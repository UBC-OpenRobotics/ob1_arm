/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2023-03-04 03:10:43.908526
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19;
x0=IKcos(j[1]);
x1=IKsin(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[2]);
x4=IKsin(j[4]);
x5=IKcos(j[4]);
x6=IKcos(j[3]);
x7=IKsin(j[3]);
x8=((((-0.0134799884173249)*x1))+(((0.99990914082844)*x0)));
x9=((((0.0134799884173249)*x0))+(((0.99990914082844)*x1)));
x10=((-1.0)*x9);
x11=(x3*x8);
x12=(x2*x8);
x13=(x2*x9);
x14=(x10*x3);
x15=((((-0.99893035836633)*x14))+(((-0.99893035836633)*x12))+(((-0.0462400165886089)*x13))+(((-0.0462400165886089)*x11)));
x16=((((-0.0462396931921057)*x14))+(((-0.0462396931921057)*x12))+(((0.998923371980755)*x11))+(((0.998923371980755)*x13)));
x17=((((-0.000172938181920294)*x12))+(((-0.000172938181920294)*x14))+(((0.00373601077131574)*x13))+(((0.00373601077131574)*x11)));
x18=(x16*x6);
x19=(x17*x7);
eerot[0]=((((((((0.275199058845806)*(((((-0.997341439912743)*(((((0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.997341439912743)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.997341439912743)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.997341439912743)*(((((0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((0.275199058845806)*(((((0.0728701052062903)*(((((0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0728701052062903)*(((((0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.0728701052062903)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.0728701052062903)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((0.275199058845806)*(((((-0.0728695955625022)*(IKsin(j[0]))*(IKsin(j[3]))))+(((0.000272535012753886)*(IKcos(j[3]))*(IKsin(j[0]))))+(((0.0728701052062903)*(((((-0.999993006133494)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999993006133494)*(((((-0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999993006133494)*(((((0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999993006133494)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.0728701052062903)*(((((0.0037400112430517)*(((((0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0037400112430517)*(((((0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((0.275199058845806)*(((((-0.997334464639852)*(IKsin(j[0]))*(IKsin(j[3]))))+(((-0.997341439912743)*(((((0.999993006133494)*(((((-0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999993006133494)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999993006133494)*(((((0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999993006133494)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.00373006819843503)*(IKcos(j[3]))*(IKsin(j[0]))))+(((-0.997341439912743)*(((((-0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0037400112430517)*(((((0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0037400112430517)*(((((0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((0.96138726744761)*(((((-0.00373006819843503)*(IKcos(j[3]))*(IKsin(j[0]))))+(((0.997341439912743)*(((((0.999993006133494)*(((((-0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999993006133494)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999993006133494)*(((((0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999993006133494)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.997341439912743)*(((((-0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0037400112430517)*(((((0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0037400112430517)*(((((0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.997334464639852)*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((0.96138726744761)*(((((-0.0728701052062903)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.0728701052062903)*(((((0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0728701052062903)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0728701052062903)*(((((0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((0.96138726744761)*(((((-0.0728701052062903)*(((((-0.999993006133494)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999993006133494)*(((((-0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999993006133494)*(((((0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999993006133494)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.000272535012753886)*(IKcos(j[3]))*(IKsin(j[0]))))+(((-0.0728701052062903)*(((((0.0037400112430517)*(((((0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0037400112430517)*(((((0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.0728695955625022)*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((0.96138726744761)*(((((0.997341439912743)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.997341439912743)*(((((0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.997341439912743)*(((((0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.997341439912743)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((0.961380543633401)*(IKcos(j[3]))*(IKsin(j[0]))))+(((0.00359559918918081)*(IKsin(j[0]))*(IKsin(j[3]))))+(((0.96138726744761)*(((((0.0037400112430517)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0037400112430517)*(((((0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.0037400112430517)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.0037400112430517)*(((((-0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.96138726744761)*(((((0.999993006133494)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999993006133494)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999993006133494)*(((((0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.999993006133494)*(((((0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((((((0.00102924757416056)*(IKsin(j[0]))*(IKsin(j[3]))))+(((0.275199058845806)*(((((0.0037400112430517)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0037400112430517)*(((((0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.0037400112430517)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.0037400112430517)*(((((-0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.275197134140326)*(IKcos(j[3]))*(IKsin(j[0]))))+(((0.275199058845806)*(((((0.999993006133494)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999993006133494)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999993006133494)*(((((0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.999993006133494)*(((((0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[5])))));
eerot[1]=((((((((-0.275199058845806)*(((((0.997341439912743)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.997341439912743)*(((((0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.997341439912743)*(((((0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.997341439912743)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((-0.275199058845806)*(((((-0.0728701052062903)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.0728701052062903)*(((((0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0728701052062903)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0728701052062903)*(((((0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((-0.275199058845806)*(((((-0.0728701052062903)*(((((-0.999993006133494)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999993006133494)*(((((-0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999993006133494)*(((((0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999993006133494)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.000272535012753886)*(IKcos(j[3]))*(IKsin(j[0]))))+(((-0.0728701052062903)*(((((0.0037400112430517)*(((((0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0037400112430517)*(((((0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.0728695955625022)*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((-0.275199058845806)*(((((-0.00373006819843503)*(IKcos(j[3]))*(IKsin(j[0]))))+(((0.997341439912743)*(((((0.999993006133494)*(((((-0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999993006133494)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999993006133494)*(((((0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999993006133494)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.997341439912743)*(((((-0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0037400112430517)*(((((0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0037400112430517)*(((((0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.997334464639852)*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((0.96138726744761)*(((((-0.997341439912743)*(((((0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.997341439912743)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.997341439912743)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.997341439912743)*(((((0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((0.96138726744761)*(((((0.0728701052062903)*(((((0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0728701052062903)*(((((0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.0728701052062903)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.0728701052062903)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((0.96138726744761)*(((((-0.0728695955625022)*(IKsin(j[0]))*(IKsin(j[3]))))+(((0.000272535012753886)*(IKcos(j[3]))*(IKsin(j[0]))))+(((0.0728701052062903)*(((((-0.999993006133494)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999993006133494)*(((((-0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999993006133494)*(((((0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999993006133494)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.0728701052062903)*(((((0.0037400112430517)*(((((0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0037400112430517)*(((((0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((0.96138726744761)*(((((-0.997334464639852)*(IKsin(j[0]))*(IKsin(j[3]))))+(((-0.997341439912743)*(((((0.999993006133494)*(((((-0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999993006133494)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999993006133494)*(((((0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999993006133494)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.00373006819843503)*(IKcos(j[3]))*(IKsin(j[0]))))+(((-0.997341439912743)*(((((-0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0037400112430517)*(((((0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0037400112430517)*(((((0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((-0.275199058845806)*(((((0.0037400112430517)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0037400112430517)*(((((0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.0037400112430517)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.0037400112430517)*(((((-0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.275199058845806)*(((((0.999993006133494)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999993006133494)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999993006133494)*(((((0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.999993006133494)*(((((0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.275197134140326)*(IKcos(j[3]))*(IKsin(j[0]))))+(((-0.00102924757416056)*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((((((0.961380543633401)*(IKcos(j[3]))*(IKsin(j[0]))))+(((0.00359559918918081)*(IKsin(j[0]))*(IKsin(j[3]))))+(((0.96138726744761)*(((((0.0037400112430517)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0037400112430517)*(((((0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.0037400112430517)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.0037400112430517)*(((((-0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.96138726744761)*(((((0.999993006133494)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999993006133494)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999993006133494)*(((((0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.999993006133494)*(((((0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[5])))));
eerot[2]=((((((((0.0728701052062903)*(((((0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0728701052062903)*(((((0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.0728701052062903)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.0728701052062903)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((((((0.997341439912743)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.997341439912743)*(((((0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.997341439912743)*(((((0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.997341439912743)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((((((-0.000272535012753886)*(IKcos(j[3]))*(IKsin(j[0]))))+(((0.0728695955625022)*(IKsin(j[0]))*(IKsin(j[3]))))+(((0.0728701052062903)*(((((0.999993006133494)*(((((-0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999993006133494)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999993006133494)*(((((0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999993006133494)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.0728701052062903)*(((((-0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0037400112430517)*(((((0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0037400112430517)*(((((0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((-0.997334464639852)*(IKsin(j[0]))*(IKsin(j[3]))))+(((0.997341439912743)*(((((-0.999993006133494)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999993006133494)*(((((-0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999993006133494)*(((((0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999993006133494)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.00373006819843503)*(IKcos(j[3]))*(IKsin(j[0]))))+(((0.997341439912743)*(((((0.0037400112430517)*(((((0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0037400112430517)*(((((0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4])))));
eetrans[0]=((((((((((((-0.0827532812332433)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.00111561463634139)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.0827532812332433)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.00111561463634139)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.00383061047743603)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-5.16412769507632e-5)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-0.00383061047743603)*(IKcos(j[0]))*(IKcos(j[1]))))+(((5.16412769507632e-5)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-0.019310578052873)*(((((0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.019310578052873)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.019310578052873)*(((((0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.019310578052873)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((-1.39931486833162e-7)*(IKsin(j[0]))*(IKsin(j[3]))))+(((-0.00202253)*(IKcos(j[0]))*(IKcos(j[1]))))+(((((((-0.019310578052873)*(((((0.999993006133494)*(((((-0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999993006133494)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999993006133494)*(((((0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999993006133494)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.019310578052873)*(((((-0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0037400112430517)*(((((0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0037400112430517)*(((((0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((7.22217790275723e-5)*(IKcos(j[3]))*(IKsin(j[0]))))+(((-0.0193104429972679)*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((-0.264295483947473)*(((((-0.999993006133494)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999993006133494)*(((((-0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999993006133494)*(((((0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999993006133494)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.26429363550014)*(IKsin(j[0]))*(IKsin(j[3]))))+(((-0.000988468081451338)*(IKcos(j[3]))*(IKsin(j[0]))))+(((-0.264295483947473)*(((((0.0037400112430517)*(((((0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0037400112430517)*(((((0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((((((-0.264295483947473)*(((((0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.264295483947473)*(((((0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.264295483947473)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.264295483947473)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((((((-0.210904956272246)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.00284325470347318)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-5.58159976571382e-10)*(IKcos(j[3]))*(IKsin(j[0]))))+(((((((-0.00284325470347318)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.210904956272246)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((((((-4.55567523959695e-8)*(((((0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-4.55567523959695e-8)*(((((-0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-4.55567523959695e-8)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-4.55567523959695e-8)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((1.70383957800504e-10)*(((((0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.70383957800504e-10)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((1.70383957800504e-10)*(((((0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((1.70383957800504e-10)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((1.70383957800504e-10)*(IKcos(j[3]))*(IKsin(j[0]))))+(((-4.55567523959695e-8)*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((((((((((1.93053087121073e-7)*(IKcos(j[0]))*(IKcos(j[1]))))+(((1.43201567020202e-5)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-4.1705562352477e-6)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000309360599791285)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((1.43201567020202e-5)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.93053087121073e-7)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.000309360599791285)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-4.1705562352477e-6)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.14998636)*(IKcos(j[0]))*(IKsin(j[1]))))+(((((((-0.000131618964352044)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.00976313936537477)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.08284942055816)*(((((0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.08284942055816)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.08284942055816)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.08284942055816)*(((((0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((((((4.55042064259883e-8)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-6.13451913294519e-10)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((2.10636831923929e-9)*(IKcos(j[0]))*(IKsin(j[1]))))+(((2.83964006194013e-11)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((2.83964006194013e-11)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-2.10636831923929e-9)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((4.55042064259883e-8)*(IKcos(j[0]))*(IKsin(j[1]))))+(((6.13451913294519e-10)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((((((-0.000309859931486833)*(((((0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000309859931486833)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000309859931486833)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.000309859931486833)*(((((-0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((2.33197113315156e-9)*(IKcos(j[3]))*(IKsin(j[0]))))+(((((((2.33197113315156e-9)*(((((0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((2.33197113315156e-9)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((2.33197113315156e-9)*(((((-0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((2.33197113315156e-9)*(((((0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-6.23515458139099e-7)*(((((-0.0134655696604924)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.998839596381523)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-6.23515458139099e-7)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.000623314888031361)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-6.23515458139099e-7)*(((((0.998839596381523)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0134655696604924)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-6.23515458139099e-7)*(((((0.0462358152590088)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.000623314888031361)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-6.23515458139099e-7)*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((-0.000131618964352044)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.00976313936537477)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((((((-6.22796284299371e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-8.39604955681564e-9)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((8.39604955681564e-9)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-6.22796284299371e-7)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-3.88649186136321e-10)*(IKcos(j[0]))*(IKsin(j[1]))))+(((2.88289471594636e-8)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-2.88289471594636e-8)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-3.88649186136321e-10)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4])))));
eerot[3]=((((((((0.275199058845806)*(((((0.999993006133494)*(((((0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999993006133494)*(((((-0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999993006133494)*(((((-0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999993006133494)*(((((-0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.00102924757416056)*(IKcos(j[0]))*(IKsin(j[3]))))+(((0.275199058845806)*(((((0.0037400112430517)*(((((-0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.0037400112430517)*(((((-0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.0037400112430517)*(((((-0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.0037400112430517)*(((((0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.275197134140326)*(IKcos(j[0]))*(IKcos(j[3]))))))*(IKcos(j[5]))))+(((((((0.275199058845806)*(((((0.0728701052062903)*(((((0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0728701052062903)*(((((-0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.0728701052062903)*(((((0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.0728701052062903)*(((((-0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((0.275199058845806)*(((((-0.997341439912743)*(((((0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.997341439912743)*(((((-0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.997341439912743)*(((((-0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.997341439912743)*(((((0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((0.275199058845806)*(((((-0.000272535012753886)*(IKcos(j[0]))*(IKcos(j[3]))))+(((0.0728695955625022)*(IKcos(j[0]))*(IKsin(j[3]))))+(((0.0728701052062903)*(((((0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0037400112430517)*(((((0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0037400112430517)*(((((-0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.0037400112430517)*(((((-0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((0.0728701052062903)*(((((-0.999993006133494)*(((((-0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.999993006133494)*(((((-0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.999993006133494)*(((((0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999993006133494)*(((((-0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.275199058845806)*(((((0.997334464639852)*(IKcos(j[0]))*(IKsin(j[3]))))+(((-0.997341439912743)*(((((0.999993006133494)*(((((0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999993006133494)*(((((-0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.999993006133494)*(((((-0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.999993006133494)*(((((-0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.00373006819843503)*(IKcos(j[0]))*(IKcos(j[3]))))+(((-0.997341439912743)*(((((-0.0037400112430517)*(((((-0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0037400112430517)*(((((0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0037400112430517)*(((((-0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((0.96138726744761)*(((((0.000272535012753886)*(IKcos(j[0]))*(IKcos(j[3]))))+(((-0.0728695955625022)*(IKcos(j[0]))*(IKsin(j[3]))))+(((-0.0728701052062903)*(((((-0.999993006133494)*(((((-0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.999993006133494)*(((((-0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.999993006133494)*(((((0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999993006133494)*(((((-0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.0728701052062903)*(((((0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0037400112430517)*(((((0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0037400112430517)*(((((-0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.0037400112430517)*(((((-0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((0.96138726744761)*(((((-0.0728701052062903)*(((((0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.0728701052062903)*(((((0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0728701052062903)*(((((-0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.0728701052062903)*(((((-0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((0.96138726744761)*(((((-0.997334464639852)*(IKcos(j[0]))*(IKsin(j[3]))))+(((0.997341439912743)*(((((-0.0037400112430517)*(((((-0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0037400112430517)*(((((0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0037400112430517)*(((((-0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((0.997341439912743)*(((((0.999993006133494)*(((((0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999993006133494)*(((((-0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.999993006133494)*(((((-0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.999993006133494)*(((((-0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.00373006819843503)*(IKcos(j[0]))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((0.96138726744761)*(((((0.997341439912743)*(((((0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.997341439912743)*(((((-0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.997341439912743)*(((((-0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.997341439912743)*(((((0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((0.96138726744761)*(((((0.0037400112430517)*(((((-0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.0037400112430517)*(((((-0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.0037400112430517)*(((((-0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.0037400112430517)*(((((0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.961380543633401)*(IKcos(j[0]))*(IKcos(j[3]))))+(((0.96138726744761)*(((((0.999993006133494)*(((((0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999993006133494)*(((((-0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999993006133494)*(((((-0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999993006133494)*(((((-0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.00359559918918081)*(IKcos(j[0]))*(IKsin(j[3]))))))*(IKsin(j[5])))));
eerot[4]=((((((((-0.275199058845806)*(((((0.997341439912743)*(((((0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.997341439912743)*(((((-0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.997341439912743)*(((((-0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.997341439912743)*(((((0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((-0.275199058845806)*(((((-0.0728701052062903)*(((((0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.0728701052062903)*(((((0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0728701052062903)*(((((-0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.0728701052062903)*(((((-0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((-0.275199058845806)*(((((0.000272535012753886)*(IKcos(j[0]))*(IKcos(j[3]))))+(((-0.0728695955625022)*(IKcos(j[0]))*(IKsin(j[3]))))+(((-0.0728701052062903)*(((((-0.999993006133494)*(((((-0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.999993006133494)*(((((-0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.999993006133494)*(((((0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999993006133494)*(((((-0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.0728701052062903)*(((((0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0037400112430517)*(((((0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0037400112430517)*(((((-0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.0037400112430517)*(((((-0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((-0.275199058845806)*(((((-0.997334464639852)*(IKcos(j[0]))*(IKsin(j[3]))))+(((0.997341439912743)*(((((-0.0037400112430517)*(((((-0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0037400112430517)*(((((0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0037400112430517)*(((((-0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((0.997341439912743)*(((((0.999993006133494)*(((((0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999993006133494)*(((((-0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.999993006133494)*(((((-0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.999993006133494)*(((((-0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.00373006819843503)*(IKcos(j[0]))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((0.96138726744761)*(((((-0.000272535012753886)*(IKcos(j[0]))*(IKcos(j[3]))))+(((0.0728695955625022)*(IKcos(j[0]))*(IKsin(j[3]))))+(((0.0728701052062903)*(((((0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0037400112430517)*(((((0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0037400112430517)*(((((-0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.0037400112430517)*(((((-0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((0.0728701052062903)*(((((-0.999993006133494)*(((((-0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.999993006133494)*(((((-0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.999993006133494)*(((((0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999993006133494)*(((((-0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.96138726744761)*(((((0.0728701052062903)*(((((0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0728701052062903)*(((((-0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.0728701052062903)*(((((0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.0728701052062903)*(((((-0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((0.96138726744761)*(((((-0.997341439912743)*(((((0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.997341439912743)*(((((-0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.997341439912743)*(((((-0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.997341439912743)*(((((0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((0.96138726744761)*(((((0.997334464639852)*(IKcos(j[0]))*(IKsin(j[3]))))+(((-0.997341439912743)*(((((0.999993006133494)*(((((0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999993006133494)*(((((-0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.999993006133494)*(((((-0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.999993006133494)*(((((-0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.00373006819843503)*(IKcos(j[0]))*(IKcos(j[3]))))+(((-0.997341439912743)*(((((-0.0037400112430517)*(((((-0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0037400112430517)*(((((0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0037400112430517)*(((((-0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((0.96138726744761)*(((((0.0037400112430517)*(((((-0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.0037400112430517)*(((((-0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.0037400112430517)*(((((-0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.0037400112430517)*(((((0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.961380543633401)*(IKcos(j[0]))*(IKcos(j[3]))))+(((0.96138726744761)*(((((0.999993006133494)*(((((0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999993006133494)*(((((-0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999993006133494)*(((((-0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999993006133494)*(((((-0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.00359559918918081)*(IKcos(j[0]))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((((((0.275197134140326)*(IKcos(j[0]))*(IKcos(j[3]))))+(((0.00102924757416056)*(IKcos(j[0]))*(IKsin(j[3]))))+(((-0.275199058845806)*(((((0.999993006133494)*(((((0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999993006133494)*(((((-0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999993006133494)*(((((-0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999993006133494)*(((((-0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.275199058845806)*(((((0.0037400112430517)*(((((-0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.0037400112430517)*(((((-0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.0037400112430517)*(((((-0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.0037400112430517)*(((((0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[5])))));
eerot[5]=((((((((0.997341439912743)*(((((0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.997341439912743)*(((((-0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.997341439912743)*(((((-0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.997341439912743)*(((((0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((((((0.000272535012753886)*(IKcos(j[0]))*(IKcos(j[3]))))+(((-0.0728695955625022)*(IKcos(j[0]))*(IKsin(j[3]))))+(((0.0728701052062903)*(((((0.999993006133494)*(((((0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999993006133494)*(((((-0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.999993006133494)*(((((-0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.999993006133494)*(((((-0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.0728701052062903)*(((((-0.0037400112430517)*(((((-0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0037400112430517)*(((((0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0037400112430517)*(((((-0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((0.0728701052062903)*(((((0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0728701052062903)*(((((-0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.0728701052062903)*(((((0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.0728701052062903)*(((((-0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((((((0.997341439912743)*(((((0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0037400112430517)*(((((0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0037400112430517)*(((((-0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.0037400112430517)*(((((-0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((0.997334464639852)*(IKcos(j[0]))*(IKsin(j[3]))))+(((-0.00373006819843503)*(IKcos(j[0]))*(IKcos(j[3]))))+(((0.997341439912743)*(((((-0.999993006133494)*(((((-0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.999993006133494)*(((((-0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.999993006133494)*(((((0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999993006133494)*(((((-0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4])))));
eetrans[1]=((((((((-0.000309859931486833)*(((((-0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.000309859931486833)*(((((-0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.000309859931486833)*(((((-0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.000309859931486833)*(((((0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.00284325470347318)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.210904956272246)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.00976313936537477)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.000131618964352044)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.210904956272246)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.00284325470347318)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((1.39931486833162e-7)*(IKcos(j[0]))*(IKsin(j[3]))))+(((((((0.0193104429972679)*(IKcos(j[0]))*(IKsin(j[3]))))+(((-7.22217790275723e-5)*(IKcos(j[0]))*(IKcos(j[3]))))+(((-0.019310578052873)*(((((-0.0037400112430517)*(((((-0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0037400112430517)*(((((0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0037400112430517)*(((((-0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.019310578052873)*(((((0.999993006133494)*(((((0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999993006133494)*(((((-0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.999993006133494)*(((((-0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.999993006133494)*(((((-0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((((((((((-5.16412769507632e-5)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.00383061047743603)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.0827532812332433)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.00111561463634139)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((5.16412769507632e-5)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.00383061047743603)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.0827532812332433)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.00111561463634139)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-0.019310578052873)*(((((-0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.019310578052873)*(((((-0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.019310578052873)*(((((0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.019310578052873)*(((((0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((((((0.00976313936537477)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.000131618964352044)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((((((2.83964006194013e-11)*(IKcos(j[1]))*(IKsin(j[0]))))+(((2.10636831923929e-9)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((4.55042064259883e-8)*(IKsin(j[0]))*(IKsin(j[1]))))+(((6.13451913294519e-10)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((4.55042064259883e-8)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-6.13451913294519e-10)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((2.83964006194013e-11)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-2.10636831923929e-9)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((((((((((2.33197113315156e-9)*(((((-0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((2.33197113315156e-9)*(((((-0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((2.33197113315156e-9)*(((((-0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((2.33197113315156e-9)*(((((0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((6.23515458139099e-7)*(IKcos(j[0]))*(IKsin(j[3]))))+(((((((-6.23515458139099e-7)*(((((-0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-6.23515458139099e-7)*(((((-0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-6.23515458139099e-7)*(((((0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-6.23515458139099e-7)*(((((-0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-2.33197113315156e-9)*(IKcos(j[0]))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((((((-0.264295483947473)*(((((0.0037400112430517)*(((((-0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0037400112430517)*(((((0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0037400112430517)*(((((-0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.0037400112430517)*(((((-0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((0.000988468081451338)*(IKcos(j[0]))*(IKcos(j[3]))))+(((-0.264295483947473)*(((((-0.999993006133494)*(((((-0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.999993006133494)*(((((-0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.999993006133494)*(((((0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999993006133494)*(((((-0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.26429363550014)*(IKcos(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((5.58159976571382e-10)*(IKcos(j[0]))*(IKcos(j[3]))))+(((((((-1.70383957800504e-10)*(IKcos(j[0]))*(IKcos(j[3]))))+(((4.55567523959695e-8)*(IKcos(j[0]))*(IKsin(j[3]))))+(((((((1.70383957800504e-10)*(((((-0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((1.70383957800504e-10)*(((((-0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.70383957800504e-10)*(((((-0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((1.70383957800504e-10)*(((((0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-4.55567523959695e-8)*(((((0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-4.55567523959695e-8)*(((((-0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-4.55567523959695e-8)*(((((-0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-4.55567523959695e-8)*(((((-0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((((((-4.1705562352477e-6)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.000309360599791285)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-1.93053087121073e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((1.43201567020202e-5)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.000309360599791285)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-4.1705562352477e-6)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((1.43201567020202e-5)*(IKsin(j[0]))*(IKsin(j[1]))))+(((1.93053087121073e-7)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((((((-3.88649186136321e-10)*(IKsin(j[0]))*(IKsin(j[1]))))+(((2.88289471594636e-8)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-2.88289471594636e-8)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-3.88649186136321e-10)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-8.39604955681564e-9)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-6.22796284299371e-7)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-6.22796284299371e-7)*(IKcos(j[1]))*(IKsin(j[0]))))+(((8.39604955681564e-9)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((((((-0.264295483947473)*(((((0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.264295483947473)*(((((-0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.264295483947473)*(((((-0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.264295483947473)*(((((0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((-0.14998636)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.00202253)*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((-0.08284942055816)*(((((-0.998839596381523)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0134655696604924)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.08284942055816)*(((((0.0134655696604924)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.998839596381523)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.08284942055816)*(((((-0.0462358152590088)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.000623314888031361)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.08284942055816)*(((((-0.0462358152590088)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3])))));
eerot[6]=((((((((0.96138726744761)*(((((((((2.3312046891988e-6)*(IKcos(j[1]))))+(((0.000172922468900354)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.00373567132047212)*(IKcos(j[1]))))+(((-5.03613819243373e-5)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((5.03613819243373e-5)*(IKcos(j[1]))))+(((0.00373567132047212)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.000172922468900354)*(IKcos(j[1]))))+(((2.3312046891988e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.96138726744761)*(((((((((-0.046235491891889)*(IKsin(j[1]))))+(((-0.000623310528650243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.046235491891889)*(IKcos(j[1]))))+(((-0.000623310528650243)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.0134654754840957)*(IKcos(j[1]))))+(((-0.998832610630725)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.0134654754840957)*(IKsin(j[1]))))+(((-0.998832610630725)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((((((0.96138726744761)*(((((0.997341439912743)*(((((((((2.3312046891988e-6)*(IKcos(j[1]))))+(((0.000172922468900354)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.00373567132047212)*(IKcos(j[1]))))+(((-5.03613819243373e-5)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((5.03613819243373e-5)*(IKcos(j[1]))))+(((0.00373567132047212)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.000172922468900354)*(IKcos(j[1]))))+(((2.3312046891988e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((0.997341439912743)*(((((((((0.998832610630725)*(IKcos(j[1]))))+(((-0.0134654754840957)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.000623310528650243)*(IKsin(j[1]))))+(((-0.046235491891889)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.046235491891889)*(IKsin(j[1]))))+(((0.000623310528650243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.0134654754840957)*(IKcos(j[1]))))+(((0.998832610630725)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((0.96138726744761)*(((((-0.0728701052062903)*(((((0.0134655696604924)*(IKcos(j[1]))))+(((0.998839596381523)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0728701052062903)*(((((-0.0462358152590088)*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0728701052062903)*(((((-0.998839596381523)*(IKcos(j[1]))))+(((0.0134655696604924)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.0728701052062903)*(((((-0.0462358152590088)*(IKcos(j[1]))))+(((0.000623314888031361)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((0.96138726744761)*(((((0.997341439912743)*(((((-0.998839596381523)*(IKcos(j[1]))))+(((0.0134655696604924)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.997341439912743)*(((((-0.0462358152590088)*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.997341439912743)*(((((0.0134655696604924)*(IKcos(j[1]))))+(((0.998839596381523)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.997341439912743)*(((((-0.0462358152590088)*(IKcos(j[1]))))+(((0.000623314888031361)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((0.96138726744761)*(((((-0.0728701052062903)*(((((-1.0)*(((((0.998832610630725)*(IKcos(j[1]))))+(((-0.0134654754840957)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.046235491891889)*(IKsin(j[1]))))+(((0.000623310528650243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.000623310528650243)*(IKsin(j[1]))))+(((-0.046235491891889)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.0134654754840957)*(IKcos(j[1]))))+(((0.998832610630725)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.0728701052062903)*(((((-1.0)*(((((0.00373567132047212)*(IKcos(j[1]))))+(((-5.03613819243373e-5)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((5.03613819243373e-5)*(IKcos(j[1]))))+(((0.00373567132047212)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((2.3312046891988e-6)*(IKcos(j[1]))))+(((0.000172922468900354)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.000172922468900354)*(IKcos(j[1]))))+(((2.3312046891988e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((0.275199058845806)*(((((0.0728701052062903)*(((((0.0134655696604924)*(IKcos(j[1]))))+(((0.998839596381523)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0728701052062903)*(((((-0.998839596381523)*(IKcos(j[1]))))+(((0.0134655696604924)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.0728701052062903)*(((((-0.0462358152590088)*(IKcos(j[1]))))+(((0.000623314888031361)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0728701052062903)*(((((-0.0462358152590088)*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((0.275199058845806)*(((((0.0728701052062903)*(((((-1.0)*(((((0.998832610630725)*(IKcos(j[1]))))+(((-0.0134654754840957)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.046235491891889)*(IKsin(j[1]))))+(((0.000623310528650243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.000623310528650243)*(IKsin(j[1]))))+(((-0.046235491891889)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.0134654754840957)*(IKcos(j[1]))))+(((0.998832610630725)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.0728701052062903)*(((((-1.0)*(((((0.00373567132047212)*(IKcos(j[1]))))+(((-5.03613819243373e-5)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((5.03613819243373e-5)*(IKcos(j[1]))))+(((0.00373567132047212)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((2.3312046891988e-6)*(IKcos(j[1]))))+(((0.000172922468900354)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.000172922468900354)*(IKcos(j[1]))))+(((2.3312046891988e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((0.275199058845806)*(((((-0.997341439912743)*(((((((((0.998832610630725)*(IKcos(j[1]))))+(((-0.0134654754840957)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.000623310528650243)*(IKsin(j[1]))))+(((-0.046235491891889)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.046235491891889)*(IKsin(j[1]))))+(((0.000623310528650243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.0134654754840957)*(IKcos(j[1]))))+(((0.998832610630725)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.997341439912743)*(((((((((2.3312046891988e-6)*(IKcos(j[1]))))+(((0.000172922468900354)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.00373567132047212)*(IKcos(j[1]))))+(((-5.03613819243373e-5)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((5.03613819243373e-5)*(IKcos(j[1]))))+(((0.00373567132047212)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.000172922468900354)*(IKcos(j[1]))))+(((2.3312046891988e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((0.275199058845806)*(((((-0.997341439912743)*(((((-0.0462358152590088)*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.997341439912743)*(((((0.0134655696604924)*(IKcos(j[1]))))+(((0.998839596381523)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.997341439912743)*(((((-0.998839596381523)*(IKcos(j[1]))))+(((0.0134655696604924)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.997341439912743)*(((((-0.0462358152590088)*(IKcos(j[1]))))+(((0.000623314888031361)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((((((0.275199058845806)*(((((((((-0.046235491891889)*(IKsin(j[1]))))+(((-0.000623310528650243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.046235491891889)*(IKcos(j[1]))))+(((-0.000623310528650243)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.0134654754840957)*(IKcos(j[1]))))+(((-0.998832610630725)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.0134654754840957)*(IKsin(j[1]))))+(((-0.998832610630725)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.275199058845806)*(((((((((2.3312046891988e-6)*(IKcos(j[1]))))+(((0.000172922468900354)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.00373567132047212)*(IKcos(j[1]))))+(((-5.03613819243373e-5)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((5.03613819243373e-5)*(IKcos(j[1]))))+(((0.00373567132047212)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.000172922468900354)*(IKcos(j[1]))))+(((2.3312046891988e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[5])))));
eerot[7]=((((((((-0.275199058845806)*(((((-0.0728701052062903)*(((((0.0134655696604924)*(IKcos(j[1]))))+(((0.998839596381523)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0728701052062903)*(((((-0.0462358152590088)*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0728701052062903)*(((((-0.998839596381523)*(IKcos(j[1]))))+(((0.0134655696604924)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.0728701052062903)*(((((-0.0462358152590088)*(IKcos(j[1]))))+(((0.000623314888031361)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((-0.275199058845806)*(((((0.997341439912743)*(((((((((2.3312046891988e-6)*(IKcos(j[1]))))+(((0.000172922468900354)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.00373567132047212)*(IKcos(j[1]))))+(((-5.03613819243373e-5)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((5.03613819243373e-5)*(IKcos(j[1]))))+(((0.00373567132047212)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.000172922468900354)*(IKcos(j[1]))))+(((2.3312046891988e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((0.997341439912743)*(((((((((0.998832610630725)*(IKcos(j[1]))))+(((-0.0134654754840957)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.000623310528650243)*(IKsin(j[1]))))+(((-0.046235491891889)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.046235491891889)*(IKsin(j[1]))))+(((0.000623310528650243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.0134654754840957)*(IKcos(j[1]))))+(((0.998832610630725)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.275199058845806)*(((((0.997341439912743)*(((((-0.998839596381523)*(IKcos(j[1]))))+(((0.0134655696604924)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.997341439912743)*(((((-0.0462358152590088)*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.997341439912743)*(((((0.0134655696604924)*(IKcos(j[1]))))+(((0.998839596381523)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.997341439912743)*(((((-0.0462358152590088)*(IKcos(j[1]))))+(((0.000623314888031361)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((-0.275199058845806)*(((((-0.0728701052062903)*(((((-1.0)*(((((0.998832610630725)*(IKcos(j[1]))))+(((-0.0134654754840957)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.046235491891889)*(IKsin(j[1]))))+(((0.000623310528650243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.000623310528650243)*(IKsin(j[1]))))+(((-0.046235491891889)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.0134654754840957)*(IKcos(j[1]))))+(((0.998832610630725)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.0728701052062903)*(((((-1.0)*(((((0.00373567132047212)*(IKcos(j[1]))))+(((-5.03613819243373e-5)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((5.03613819243373e-5)*(IKcos(j[1]))))+(((0.00373567132047212)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((2.3312046891988e-6)*(IKcos(j[1]))))+(((0.000172922468900354)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.000172922468900354)*(IKcos(j[1]))))+(((2.3312046891988e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((-0.275199058845806)*(((((((((2.3312046891988e-6)*(IKcos(j[1]))))+(((0.000172922468900354)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.00373567132047212)*(IKcos(j[1]))))+(((-5.03613819243373e-5)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((5.03613819243373e-5)*(IKcos(j[1]))))+(((0.00373567132047212)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.000172922468900354)*(IKcos(j[1]))))+(((2.3312046891988e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.275199058845806)*(((((((((-0.046235491891889)*(IKsin(j[1]))))+(((-0.000623310528650243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.046235491891889)*(IKcos(j[1]))))+(((-0.000623310528650243)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.0134654754840957)*(IKcos(j[1]))))+(((-0.998832610630725)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.0134654754840957)*(IKsin(j[1]))))+(((-0.998832610630725)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((((((0.96138726744761)*(((((((((2.3312046891988e-6)*(IKcos(j[1]))))+(((0.000172922468900354)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.00373567132047212)*(IKcos(j[1]))))+(((-5.03613819243373e-5)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((5.03613819243373e-5)*(IKcos(j[1]))))+(((0.00373567132047212)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.000172922468900354)*(IKcos(j[1]))))+(((2.3312046891988e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.96138726744761)*(((((((((-0.046235491891889)*(IKsin(j[1]))))+(((-0.000623310528650243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.046235491891889)*(IKcos(j[1]))))+(((-0.000623310528650243)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.0134654754840957)*(IKcos(j[1]))))+(((-0.998832610630725)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.0134654754840957)*(IKsin(j[1]))))+(((-0.998832610630725)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((((((0.96138726744761)*(((((0.0728701052062903)*(((((0.0134655696604924)*(IKcos(j[1]))))+(((0.998839596381523)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0728701052062903)*(((((-0.998839596381523)*(IKcos(j[1]))))+(((0.0134655696604924)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.0728701052062903)*(((((-0.0462358152590088)*(IKcos(j[1]))))+(((0.000623314888031361)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0728701052062903)*(((((-0.0462358152590088)*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((0.96138726744761)*(((((-0.997341439912743)*(((((-0.0462358152590088)*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.997341439912743)*(((((0.0134655696604924)*(IKcos(j[1]))))+(((0.998839596381523)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.997341439912743)*(((((-0.998839596381523)*(IKcos(j[1]))))+(((0.0134655696604924)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.997341439912743)*(((((-0.0462358152590088)*(IKcos(j[1]))))+(((0.000623314888031361)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((0.96138726744761)*(((((0.0728701052062903)*(((((-1.0)*(((((0.998832610630725)*(IKcos(j[1]))))+(((-0.0134654754840957)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.046235491891889)*(IKsin(j[1]))))+(((0.000623310528650243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.000623310528650243)*(IKsin(j[1]))))+(((-0.046235491891889)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.0134654754840957)*(IKcos(j[1]))))+(((0.998832610630725)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.0728701052062903)*(((((-1.0)*(((((0.00373567132047212)*(IKcos(j[1]))))+(((-5.03613819243373e-5)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((5.03613819243373e-5)*(IKcos(j[1]))))+(((0.00373567132047212)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((2.3312046891988e-6)*(IKcos(j[1]))))+(((0.000172922468900354)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.000172922468900354)*(IKcos(j[1]))))+(((2.3312046891988e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((0.96138726744761)*(((((-0.997341439912743)*(((((((((0.998832610630725)*(IKcos(j[1]))))+(((-0.0134654754840957)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.000623310528650243)*(IKsin(j[1]))))+(((-0.046235491891889)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.046235491891889)*(IKsin(j[1]))))+(((0.000623310528650243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.0134654754840957)*(IKcos(j[1]))))+(((0.998832610630725)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.997341439912743)*(((((((((2.3312046891988e-6)*(IKcos(j[1]))))+(((0.000172922468900354)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.00373567132047212)*(IKcos(j[1]))))+(((-5.03613819243373e-5)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((5.03613819243373e-5)*(IKcos(j[1]))))+(((0.00373567132047212)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.000172922468900354)*(IKcos(j[1]))))+(((2.3312046891988e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5])))));
eerot[8]=((((0.997341439912743)*x15*x5))+(((0.0728701052062903)*x5*((x19+x18))))+(((0.0728701052062903)*x15*x4))+(((0.997341439912743)*x4*(((((-1.0)*x18))+(((-1.0)*x19)))))));
eetrans[2]=((0.06)+(((((((-0.264295483947473)*(((((-1.0)*(((((0.998832610630725)*(IKcos(j[1]))))+(((-0.0134654754840957)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.046235491891889)*(IKsin(j[1]))))+(((0.000623310528650243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.000623310528650243)*(IKsin(j[1]))))+(((-0.046235491891889)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.0134654754840957)*(IKcos(j[1]))))+(((0.998832610630725)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.264295483947473)*(((((-1.0)*(((((0.00373567132047212)*(IKcos(j[1]))))+(((-5.03613819243373e-5)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((5.03613819243373e-5)*(IKcos(j[1]))))+(((0.00373567132047212)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((2.3312046891988e-6)*(IKcos(j[1]))))+(((0.000172922468900354)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.000172922468900354)*(IKcos(j[1]))))+(((2.3312046891988e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((((((-0.019310578052873)*(((((((((2.3312046891988e-6)*(IKcos(j[1]))))+(((0.000172922468900354)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.00373567132047212)*(IKcos(j[1]))))+(((-5.03613819243373e-5)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((5.03613819243373e-5)*(IKcos(j[1]))))+(((0.00373567132047212)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.000172922468900354)*(IKcos(j[1]))))+(((2.3312046891988e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.019310578052873)*(((((((((0.998832610630725)*(IKcos(j[1]))))+(((-0.0134654754840957)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.000623310528650243)*(IKsin(j[1]))))+(((-0.046235491891889)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.046235491891889)*(IKsin(j[1]))))+(((0.000623310528650243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.0134654754840957)*(IKcos(j[1]))))+(((0.998832610630725)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((((((((((2.83964006194013e-11)*(IKsin(j[1]))))+(((-2.10636831923929e-9)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((6.13451913294519e-10)*(IKcos(j[1]))))+(((4.55042064259883e-8)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-4.55042064259883e-8)*(IKcos(j[1]))))+(((6.13451913294519e-10)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-2.83964006194013e-11)*(IKcos(j[1]))))+(((-2.10636831923929e-9)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((((((((((-6.23519818953477e-7)*(((((5.03613819243373e-5)*(IKcos(j[1]))))+(((0.00373567132047212)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-6.23519818953477e-7)*(((((-0.000172922468900354)*(IKcos(j[1]))))+(((2.3312046891988e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-6.23519818953477e-7)*(((((2.3312046891988e-6)*(IKcos(j[1]))))+(((0.000172922468900354)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-6.23519818953477e-7)*(((((0.00373567132047212)*(IKcos(j[1]))))+(((-5.03613819243373e-5)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-6.23519818953477e-7)*(((((0.998832610630725)*(IKcos(j[1]))))+(((-0.0134654754840957)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-6.23519818953477e-7)*(((((0.0134654754840957)*(IKcos(j[1]))))+(((0.998832610630725)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-6.23519818953477e-7)*(((((0.046235491891889)*(IKsin(j[1]))))+(((0.000623310528650243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-6.23519818953477e-7)*(((((0.000623310528650243)*(IKsin(j[1]))))+(((-0.046235491891889)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((((((-0.00284325470347318)*(IKsin(j[1]))))+(((0.210904956272246)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((((((-0.00111561463634139)*(IKcos(j[1]))))+(((-0.0827532812332433)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.00383061047743603)*(IKcos(j[1]))))+(((-5.16412769507632e-5)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.00111561463634139)*(IKsin(j[1]))))+(((-0.0827532812332433)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.00383061047743603)*(IKsin(j[1]))))+(((-5.16412769507632e-5)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((((((1.93053087121073e-7)*(IKsin(j[1]))))+(((-1.43201567020202e-5)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.000309360599791285)*(IKcos(j[1]))))+(((-4.1705562352477e-6)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((4.1705562352477e-6)*(IKcos(j[1]))))+(((0.000309360599791285)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((1.43201567020202e-5)*(IKsin(j[1]))))+(((1.93053087121073e-7)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-0.264295483947473)*(((((0.0134655696604924)*(IKcos(j[1]))))+(((0.998839596381523)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.264295483947473)*(((((-0.0462358152590088)*(IKcos(j[1]))))+(((0.000623314888031361)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.264295483947473)*(((((-0.0462358152590088)*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.264295483947473)*(((((-0.998839596381523)*(IKcos(j[1]))))+(((0.0134655696604924)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((((((((((5.16412772986726e-5)*(IKsin(j[1]))))+(((-0.00383061050324301)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.0827532817907556)*(IKsin(j[1]))))+(((0.00111561464385733)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.00383061050324301)*(IKsin(j[1]))))+(((5.16412772986726e-5)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.0827532817907556)*(IKcos(j[1]))))+(((-0.00111561464385733)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((((((-8.39604955681564e-9)*(IKcos(j[1]))))+(((-6.22796284299371e-7)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((2.88289471594636e-8)*(IKsin(j[1]))))+(((3.88649186136321e-10)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-3.88649186136321e-10)*(IKsin(j[1]))))+(((2.88289471594636e-8)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-8.39604955681564e-9)*(IKsin(j[1]))))+(((6.22796284299371e-7)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((((((-0.000131618964352044)*(IKsin(j[1]))))+(((0.00976313936537477)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.14998636)*(IKcos(j[1]))))+(((((((-0.019310578052873)*(((((-0.0462358152590088)*(IKsin(j[1]))))+(((-0.000623314888031361)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.019310578052873)*(((((-0.0462358152590088)*(IKcos(j[1]))))+(((0.000623314888031361)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.019310578052873)*(((((-0.998839596381523)*(IKcos(j[1]))))+(((0.0134655696604924)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.019310578052873)*(((((0.0134655696604924)*(IKcos(j[1]))))+(((0.998839596381523)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((((((((((1.43266265483943e-5)*(IKcos(j[1]))))+(((-1.93140308500121e-7)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-1.43266265483943e-5)*(IKsin(j[1]))))+(((-1.93140308500121e-7)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((4.17244049243135e-6)*(IKsin(j[1]))))+(((-0.000309500368901115)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.000309500368901115)*(IKsin(j[1]))))+(((-4.17244049243135e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((((((-4.55570710160426e-8)*(((((-0.000172922468900354)*(IKcos(j[1]))))+(((2.3312046891988e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-4.55570710160426e-8)*(((((2.3312046891988e-6)*(IKcos(j[1]))))+(((0.000172922468900354)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-4.55570710160426e-8)*(((((0.00373567132047212)*(IKcos(j[1]))))+(((-5.03613819243373e-5)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-4.55570710160426e-8)*(((((5.03613819243373e-5)*(IKcos(j[1]))))+(((0.00373567132047212)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-4.55570710160426e-8)*(((((0.046235491891889)*(IKsin(j[1]))))+(((0.000623310528650243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-4.55570710160426e-8)*(((((0.0134654754840957)*(IKcos(j[1]))))+(((0.998832610630725)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-4.55570710160426e-8)*(((((0.000623310528650243)*(IKsin(j[1]))))+(((-0.046235491891889)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-4.55570710160426e-8)*(((((0.998832610630725)*(IKcos(j[1]))))+(((-0.0134654754840957)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((0.00976313936537477)*(IKsin(j[1]))))+(((0.000131618964352044)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.00202253)*(IKsin(j[1]))))+(((((((-0.00284325470347318)*(IKcos(j[1]))))+(((-0.210904956272246)*(IKsin(j[1]))))))*(IKsin(j[2])))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((-0.275199058845806)*r01))+(((0.96138726744761)*r00)));
new_r01=((((0.96138726744761)*r01))+(((0.275199058845806)*r00)));
new_r02=r02;
new_px=((((0.265000002376915)*r02))+px);
new_r10=((((-0.275199058845806)*r11))+(((0.96138726744761)*r10)));
new_r11=((((0.96138726744761)*r11))+(((0.275199058845806)*r10)));
new_r12=r12;
new_py=((((0.265000002376915)*r12))+py);
new_r20=((((-0.275199058845806)*r21))+(((0.96138726744761)*r20)));
new_r21=((((0.96138726744761)*r21))+(((0.275199058845806)*r20)));
new_r22=r22;
new_pz=((-0.06)+pz+(((0.265000002376915)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x20=((1.0)*px);
IkReal x21=((1.0)*pz);
IkReal x22=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x22))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x21)));
rxp0_2=(((py*r00))+(((-1.0)*r10*x20)));
rxp1_0=((((-1.0)*r21*x22))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x21)));
rxp1_2=((((-1.0)*r11*x20))+((py*r01)));
rxp2_0=((((-1.0)*r22*x22))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x21)));
rxp2_2=(((py*r02))+(((-1.0)*r12*x20)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x23=((1.07862616061105e-9)*r20);
IkReal x24=((0.0728701052062903)*rxp0_2);
IkReal x25=((0.997341439912743)*rxp2_2);
IkReal x26=((7.88091198203333e-11)*r22);
IkReal x27=((7.63448239599931e-7)*r21);
IkReal x28=((2.16300280464488e-9)*npy);
IkReal x29=((6.83544312478841e-13)*r11);
IkReal x30=((7.05608099487792e-17)*r12);
IkReal x31=((9.65735125396003e-16)*r10);
IkReal x32=((0.421177302869026)*npz);
IkReal x33=((0.0307715153967466)*npx);
IkReal x34=((6.52433830872364e-8)*rxp0_1);
IkReal x35=((1.0)*pp);
IkReal x36=((8.9295781100898e-7)*rxp2_1);
IkReal x37=((9.65735125396003e-16)*r00);
IkReal x38=((6.52433830872364e-8)*rxp0_0);
IkReal x39=((8.9295781100898e-7)*rxp2_0);
IkReal x40=((7.05608099487792e-17)*r02);
IkReal x41=((6.83544312478841e-13)*r01);
IkReal x42=((1.30486766174473e-7)*rxp1_1);
IkReal x43=((1.93147025079201e-15)*r11);
IkReal x44=((1.36708862495768e-12)*r10);
IkReal x45=((4.32600560928975e-9)*npx);
IkReal x46=((0.0615430307934931)*npy);
IkReal x47=((0.145740210412581)*rxp2_2);
IkReal x48=((2.1572523212221e-9)*r22);
IkReal x49=((1.57618239640667e-10)*r20);
IkReal x50=((9.11141420320851e-8)*r21);
IkReal x51=((1.99468287982549)*rxp0_2);
IkReal x52=((8.15779647419947e-14)*r11);
IkReal x53=((1.78591562201796e-6)*rxp0_1);
IkReal x54=((0.0615455315211036)*npz);
IkReal x55=((1.30486766174473e-7)*rxp2_1);
IkReal x56=((1.41121619897558e-16)*r10);
IkReal x57=((1.93147025079201e-15)*r12);
IkReal x58=((1.30486766174473e-7)*rxp2_0);
IkReal x59=((1.41121619897558e-16)*r00);
IkReal x60=((1.93147025079201e-15)*r02);
IkReal x61=((8.15779647419947e-14)*r01);
IkReal x62=((1.78591562201796e-6)*rxp0_0);
IkReal x63=((0.842354605738053)*npx);
IkReal x64=((1.68470921147611)*npy);
IkReal x65=((2.82243239795117e-16)*r11);
IkReal x66=((1.63155929483989e-13)*r10);
IkReal x67=((3.57183124403592e-6)*rxp1_1);
IkReal x68=((0.842354605738053)*npx);
IkReal x69=((0.145740210412581)*rxp1_2);
IkReal x70=((2.1572523212221e-9)*r21);
IkReal x71=((4.83591398307023e-7)*r21);
IkReal x72=((1.93147025079201e-15)*r01);
IkReal x73=((1.30486766174473e-7)*rxp1_0);
IkReal x74=((4.32977813989953e-13)*r11);
IkReal x75=((4.32977813989953e-13)*r01);
IkReal x76=((0.030774016124357)*npx);
IkReal x77=((0.061548032248714)*npy);
IkReal x78=((8.65955627979905e-13)*r10);
IkReal x79=((0.030774016124357)*npx);
IkReal x80=((-0.0220843028395099)+x36);
IkReal x81=((-5.26624855085105e-7)+x68);
IkReal x82=((-0.0220843028395099)+x30);
IkReal x83=((-0.0220843413166624)+x30);
IkReal x84=(x38+x37);
IkReal x85=(x30+x35);
IkReal x86=(x31+x34);
IkReal x87=(x76+x28);
IkReal x88=(x24+x23);
IkReal x89=(x32+x36);
IkReal x90=(x73+x72);
IkReal x91=(x33+x29);
IkReal x92=(x46+x45);
IkReal x93=(x42+x43);
IkReal x94=(x53+x52);
IkReal x95=(x36+x35);
IkReal x96=(x65+x66);
IkReal x97=(x28+x29);
IkReal x98=(x70+x69);
IkReal x99=(x61+x62);
IkReal x100=(x32+x28);
IkReal x101=(x58+x60);
IkReal x102=(x55+x57);
IkReal x103=(x54+x63);
IkReal x104=(x48+x47);
IkReal x105=(x51+x50);
IkReal x106=((((1.8222828406417e-7)*r20))+(((3.15236479281333e-10)*r21))+(((-3.98936575965097)*rxp1_2)));
IkReal x107=((((-3.57183124403592e-6)*rxp1_0))+(((2.82243239795117e-16)*r01))+(((1.63155929483989e-13)*r00)));
IkReal x108=(x98+(((1.52689647919986e-6)*r20)));
IkReal x109=((((1.36708862495768e-12)*r00))+x90);
IkReal x110=(x26+x88);
IkReal x111=((((-9.67182796614046e-7)*r20))+(((-1.0)*x98)));
IkReal x112=(x25+x88);
IkReal x113=(x40+x84);
IkReal x114=(x39+x84);
IkReal x115=((((-8.65955627979905e-13)*r00))+(((-1.0)*x90)));
IkReal x116=(x102+x56);
IkReal x117=((((-1.0)*x110))+x25+x27);
IkReal x118=((((-1.0)*x27))+(((-1.0)*x26))+x112);
IkReal x119=((((-1.0)*x113))+x39+x41);
IkReal x120=((((-1.0)*x41))+(((-1.0)*x40))+x114);
IkReal x121=((((-1.0)*x49))+x104+x105);
IkReal x122=((((-1.0)*x105))+x104+x49);
IkReal x123=(x101+x99+(((-1.0)*x59)));
IkReal x124=(x101+x59+(((-1.0)*x99)));
IkReal x125=((((-1.0)*x25))+(((-1.0)*x71))+x110);
IkReal x126=((((-1.0)*x112))+x71+x26);
IkReal x127=((((-1.0)*x75))+(((-1.0)*x39))+x113);
IkReal x128=((((-1.0)*x114))+x75+x40);
op[0]=x117;
op[1]=x117;
op[2]=x108;
op[3]=x108;
op[4]=x118;
op[5]=x118;
op[6]=((((-1.0)*x35))+x33+x82+x86+(((-1.0)*x97))+(((-1.0)*x89)));
op[7]=x119;
op[8]=((((-1.0)*x44))+(((-1.0)*x93))+(((-1.0)*x92)));
op[9]=x109;
op[10]=((((-1.0)*x35))+(((-1.0)*x33))+x82+x97+(((-1.0)*x89))+(((-1.0)*x86)));
op[11]=x120;
op[12]=x119;
op[13]=((((-1.0)*x100))+x80+x91+(((-1.0)*x86))+(((-1.0)*x85)));
op[14]=x109;
op[15]=(x44+x93+(((-1.0)*x92)));
op[16]=x120;
op[17]=((((-1.0)*x32))+x28+x80+x86+(((-1.0)*x91))+(((-1.0)*x85)));
op[18]=0;
op[19]=x117;
op[20]=0;
op[21]=x108;
op[22]=0;
op[23]=x118;
op[24]=x121;
op[25]=x121;
op[26]=x106;
op[27]=x106;
op[28]=x122;
op[29]=x122;
op[30]=((-5.26624855085105e-7)+(((-1.0)*x103))+(((-1.0)*x102))+x56+(((-1.0)*x94)));
op[31]=x123;
op[32]=(x64+x67+(((-1.0)*x96)));
op[33]=x107;
op[34]=((((-1.0)*x116))+x81+x94+(((-1.0)*x54)));
op[35]=x124;
op[36]=x123;
op[37]=((-5.26624855085105e-7)+(((-1.0)*x103))+x102+x94+(((-1.0)*x56)));
op[38]=x107;
op[39]=(x64+x96+(((-1.0)*x67)));
op[40]=x124;
op[41]=(x116+x81+(((-1.0)*x94))+(((-1.0)*x54)));
op[42]=0;
op[43]=x121;
op[44]=0;
op[45]=x106;
op[46]=0;
op[47]=x122;
op[48]=x125;
op[49]=x125;
op[50]=x111;
op[51]=x111;
op[52]=x126;
op[53]=x126;
op[54]=((-0.0220843413166624)+x74+x89+(((-1.0)*x87))+(((-1.0)*x86))+(((-1.0)*x85)));
op[55]=x127;
op[56]=((((-1.0)*x45))+x77+x78+x93);
op[57]=x115;
op[58]=((-0.0220843413166624)+(((-1.0)*x74))+x79+x28+x89+x86+(((-1.0)*x85)));
op[59]=x128;
op[60]=x127;
op[61]=((((-1.0)*x74))+x32+x83+x86+(((-1.0)*x95))+(((-1.0)*x87)));
op[62]=x115;
op[63]=((((-1.0)*x78))+(((-1.0)*x45))+x77+(((-1.0)*x93)));
op[64]=x128;
op[65]=(x100+x74+x79+x83+(((-1.0)*x95))+(((-1.0)*x86)));
op[66]=0;
op[67]=x125;
op[68]=0;
op[69]=x111;
op[70]=0;
op[71]=x126;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j4array[16], cj4array[16], sj4array[16], j5array[16], cj5array[16], sj5array[16], j0array[16], cj0array[16], sj0array[16];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ij4 += 3)
{
IkReal htj4 = zeror[ij4+0], htj5 = zeror[ij4+1], htj0 = zeror[ij4+2];
if(isnan(htj4)||isnan(htj5)||isnan(htj0)){
continue;
}
j4array[numsolutions]=((2.0)*(atan(htj4)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j0array[numsolutions]=((2.0)*(atan(htj0)));
if(isinf(htj4)){
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
}
else{
IkReal x129=htj4*htj4;
CheckValue<IkReal> x130=IKPowWithIntegerCheck(((1.0)+x129),-1);
if(!x130.valid){
continue;
}
cj4array[numsolutions]=((x130.value)*(((1.0)+(((-1.0)*x129)))));
CheckValue<IkReal> x131=IKPowWithIntegerCheck(((1.0)+(htj4*htj4)),-1);
if(!x131.valid){
continue;
}
sj4array[numsolutions]=((2.0)*htj4*(x131.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x132=htj5*htj5;
CheckValue<IkReal> x133=IKPowWithIntegerCheck(((1.0)+x132),-1);
if(!x133.valid){
continue;
}
cj5array[numsolutions]=((x133.value)*(((1.0)+(((-1.0)*x132)))));
CheckValue<IkReal> x134=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x134.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x134.value));
}
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x135=htj0*htj0;
CheckValue<IkReal> x136=IKPowWithIntegerCheck(((1.0)+x135),-1);
if(!x136.valid){
continue;
}
cj0array[numsolutions]=((x136.value)*(((1.0)+(((-1.0)*x135)))));
CheckValue<IkReal> x137=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x137.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x137.value));
}
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j4valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj4 = 16;
_nj5 = 1;
_nj0 = 1;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij0[0] = 0; _ij0[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( !j4valid[iij4] ) { continue; }
if( IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij4]-cj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij4]-sj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj0array[ij4]-cj0array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij4]-sj0array[iij4]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j4valid[iij4]=false; _ij4[1] = iij4; _ij5[1] = 0; _ij0[1] = 0;  break; 
}
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

    j5 = j5array[ij4]; cj5 = cj5array[ij4]; sj5 = sj5array[ij4];

    j0 = j0array[ij4]; cj0 = cj0array[ij4]; sj0 = sj0array[ij4];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[2];
IkReal x138=sj5*sj5;
IkReal x139=cj5*cj5;
IkReal x140=(r02*sj4);
IkReal x141=((13.6865651159599)*r20);
IkReal x142=((0.997341439912743)*cj5);
IkReal x143=(r01*r22);
IkReal x144=(r00*r21);
IkReal x145=((0.0728701052062904)*sj4);
IkReal x146=((0.997341439912743)*cj4);
IkReal x147=((13.6865651159599)*cj4);
IkReal x148=(r02*r21);
IkReal x149=((1.0)*cj4);
IkReal x150=((1.0)*sj4);
IkReal x151=((0.0728701052062904)*cj4);
IkReal x152=((13.6865651159599)*sj4);
IkReal x153=(r20*sj5);
IkReal x154=(cj5*x151);
IkReal x155=(r01*x139);
IkReal x156=(r00*r22*sj5);
IkReal x157=(r01*r20*x138);
j3eval[0]=(((cj4*x156))+(((-1.0)*cj5*x143*x152))+((sj4*x157))+((cj4*cj5*x143))+(((-1.0)*cj5*x148*x149))+((r20*sj4*x155))+((cj4*x141*x155))+(((-1.0)*x152*x156))+((cj4*r01*x138*x141))+(((-1.0)*x139*x144*x147))+(((-1.0)*x139*x144*x150))+((sj5*x140*x141))+(((13.6865651159599)*cj5*r21*x140))+(((-1.0)*x138*x144*x147))+(((-1.0)*r02*x149*x153))+(((-1.0)*x138*x144*x150)));
j3eval[1]=IKsign((((r20*x146*x155))+((r20*x145*x155))+(((-1.0)*sj4*x142*x143))+((r21*x140*x142))+((x151*x156))+((x145*x157))+(((0.997341439912743)*x140*x153))+(((-1.0)*x139*x144*x145))+(((-1.0)*x139*x144*x146))+((x146*x157))+(((-1.0)*x148*x154))+(((-1.0)*r02*x151*x153))+(((-0.997341439912743)*sj4*x156))+(((-1.0)*x138*x144*x145))+(((-1.0)*x138*x144*x146))+((x143*x154))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x158=sj5*sj5;
IkReal x159=cj5*cj5;
IkReal x160=((0.997341439912743)*sj4);
IkReal x161=((13.6865651159599)*sj4);
IkReal x162=(cj4*r20);
IkReal x163=(r12*sj5);
IkReal x164=((13.6865651159599)*r11);
IkReal x165=(r10*r21);
IkReal x166=((0.0728701052062904)*cj4);
IkReal x167=((1.0)*cj4);
IkReal x168=(cj5*r12*r21);
IkReal x169=(r11*r20*sj4);
IkReal x170=((0.0728701052062904)*x158);
IkReal x171=((0.997341439912743)*x158);
IkReal x172=(cj5*r11*r22);
IkReal x173=(r10*r22*sj5);
IkReal x174=(cj4*x159);
IkReal x175=(sj4*x159);
j3eval[0]=(((cj4*x168))+((x161*x173))+((x161*x172))+((x162*x163))+(((-1.0)*x159*x162*x164))+(((-1.0)*x158*x162*x164))+(((-1.0)*x161*x168))+(((13.6865651159599)*x165*x174))+(((-1.0)*x158*x169))+((x165*x175))+(((13.6865651159599)*cj4*x158*x165))+(((-1.0)*x159*x169))+(((-1.0)*r20*x161*x163))+((sj4*x158*x165))+(((-1.0)*x167*x172))+(((-1.0)*x167*x173)));
j3eval[1]=IKsign(((((-0.997341439912743)*r11*x159*x162))+(((-1.0)*x160*x168))+(((0.997341439912743)*x165*x174))+(((0.0728701052062904)*x162*x163))+((cj4*x165*x171))+(((-0.0728701052062904)*x159*x169))+((sj4*x165*x170))+(((-1.0)*r20*x160*x163))+((x166*x168))+(((-1.0)*r11*x162*x171))+(((-1.0)*x169*x170))+(((0.0728701052062904)*x165*x175))+(((-1.0)*x166*x173))+(((-1.0)*x166*x172))+((x160*x172))+((x160*x173))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x176=cj5*cj5;
IkReal x177=sj5*sj5;
IkReal x178=((0.0728701052062904)*r01);
IkReal x179=(r00*r11);
IkReal x180=((0.997341439912743)*cj4);
IkReal x181=(r00*r12);
IkReal x182=(r02*r10);
IkReal x183=(cj4*sj5);
IkReal x184=((13.6865651159599)*cj4);
IkReal x185=((13.6865651159599)*sj4);
IkReal x186=(r01*r10);
IkReal x187=((0.997341439912743)*sj4);
IkReal x188=(r10*x176);
IkReal x189=(cj4*cj5*r12);
IkReal x190=(sj4*x177);
IkReal x191=(sj5*x187);
IkReal x192=(sj4*x176);
IkReal x193=(cj5*r02*r11);
IkReal x194=(cj5*r01*r12);
j3eval[0]=((((-1.0)*x177*x179*x184))+((x186*x190))+((x186*x192))+((x176*x184*x186))+((r01*x189))+((sj5*x182*x185))+((x185*x193))+(((-1.0)*x176*x179*x184))+(((-1.0)*sj5*x181*x185))+(((-1.0)*cj4*x193))+(((-1.0)*x185*x194))+((x177*x184*x186))+((x181*x183))+(((-1.0)*x179*x190))+(((-1.0)*x179*x192))+(((-1.0)*x182*x183)));
j3eval[1]=IKsign(((((-1.0)*x177*x179*x180))+((sj4*x178*x188))+((x178*x189))+(((0.0728701052062904)*x181*x183))+((x187*x193))+((x176*x180*x186))+(((-1.0)*x187*x194))+(((-0.0728701052062904)*x179*x192))+(((-0.0728701052062904)*x179*x190))+(((-1.0)*x176*x179*x180))+(((-0.0728701052062904)*x182*x183))+(((-0.0728701052062904)*cj4*x193))+((r10*x178*x190))+((x182*x191))+(((-1.0)*x181*x191))+((x177*x180*x186))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x195=(cj4*sj5);
IkReal x196=(r10*sj5);
IkReal x197=(r12*sj4);
IkReal x198=((0.0728695955625022)*cj4);
IkReal x199=((0.000272535012753886)*cj4);
IkReal x200=(sj4*sj5);
IkReal x201=((0.0037400112430517)*cj5);
IkReal x202=(r02*sj4);
IkReal x203=((0.999993006133494)*cj5);
IkReal x204=(r00*sj5);
IkReal x205=(cj5*r10*sj4);
IkReal x206=(cj4*cj5*r00);
IkReal x207=(cj5*r00*sj4);
IkReal x208=(cj4*cj5*r10);
IkReal x209=((((0.997334464639851)*r01*x195))+(((0.0728695955625022)*r01*x200))+(((0.997334464639851)*x202)));
IkReal x210=(((r01*x201))+(((0.0728695955625022)*x207))+(((0.0037400112430517)*x204))+((r02*x198))+(((0.997334464639851)*x206)));
IkReal x211=((((0.000272535012753886)*x207))+(((-0.00373006819843503)*r01*x195))+(((-0.000272535012753886)*r01*x200))+(((-0.00373006819843503)*x202))+(((0.00373006819843503)*x206))+(((-1.0)*r01*x203))+((r02*x199))+(((-0.999993006133494)*x204)));
IkReal x212=((((-1.0)*r11*x203))+(((-0.00373006819843503)*x197))+(((0.000272535012753886)*x205))+(((-0.999993006133494)*x196))+(((-0.00373006819843503)*r11*x195))+((r12*x199))+(((0.00373006819843503)*x208))+(((-0.000272535012753886)*r11*x200)));
IkReal x213=((((-1.0)*r11*x201))+(((0.0728695955625022)*r11*x200))+(((-1.0)*r12*x198))+(((0.997334464639851)*r11*x195))+(((-0.0728695955625022)*x205))+(((-0.0037400112430517)*x196))+(((0.997334464639851)*x197))+(((-0.997334464639851)*x208)));
CheckValue<IkReal> x214 = IKatan2WithCheck(IkReal((((cj0*x211))+((sj0*x212)))),IkReal(((((-1.0)*sj0*x213))+(((-1.0)*cj0*((x209+(((-1.0)*x210)))))))),IKFAST_ATAN2_MAGTHRESH);
if(!x214.valid){
continue;
}
CheckValue<IkReal> x215=IKPowWithIntegerCheck(IKsign((((x211*x213))+((x212*(((((-1.0)*x209))+x210)))))),-1);
if(!x215.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x214.value)+(((1.5707963267949)*(x215.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x216=IKsin(j3);
IkReal x217=IKcos(j3);
IkReal x218=((0.00373006819843503)*cj4);
IkReal x219=(r01*sj5);
IkReal x220=((0.999993006133494)*sj5);
IkReal x221=((0.0728695955625022)*cj4);
IkReal x222=((0.0037400112430517)*cj5);
IkReal x223=(cj5*r10);
IkReal x224=((0.0728695955625022)*sj4);
IkReal x225=(r11*sj5);
IkReal x226=((0.997334464639851)*cj4);
IkReal x227=((0.000272535012753886)*sj4);
IkReal x228=((0.00373006819843503)*sj4);
IkReal x229=((0.000272535012753886)*cj4);
IkReal x230=((0.0037400112430517)*sj5);
IkReal x231=(cj5*r00);
IkReal x232=(r21*sj5);
IkReal x233=((0.997334464639851)*sj4);
IkReal x234=(cj5*r20);
IkReal x235=((0.999993006133494)*cj5);
IkReal x236=(sj4*x234);
evalcond[0]=(((x217*(((((-1.0)*x227*x232))+((x218*x234))+(((-1.0)*r20*x220))+(((-1.0)*r21*x235))+((x227*x234))+(((-1.0)*x218*x232))+((r22*x229))+(((-1.0)*r22*x228))))))+((x216*(((((-1.0)*x224*x234))+(((-1.0)*r21*x222))+((x226*x232))+(((-1.0)*r20*x230))+(((-1.0)*x226*x234))+((x224*x232))+(((-1.0)*r22*x221))+((r22*x233)))))));
evalcond[1]=(sj0+((x217*(((((-1.0)*r02*x228))+((x218*x231))+(((-1.0)*x218*x219))+(((-1.0)*x219*x227))+(((-1.0)*r00*x220))+((x227*x231))+((r02*x229))+(((-1.0)*r01*x235))))))+((x216*((((r02*x233))+(((-1.0)*x224*x231))+(((-1.0)*r02*x221))+(((-1.0)*r01*x222))+((x219*x226))+((x219*x224))+(((-1.0)*x226*x231))+(((-1.0)*r00*x230)))))));
evalcond[2]=(((x217*(((((-1.0)*r11*x235))+((r12*x229))+(((-1.0)*x225*x227))+((x223*x227))+(((-1.0)*r12*x228))+(((-1.0)*x218*x225))+((x218*x223))+(((-1.0)*r10*x220))))))+(((-1.0)*cj0))+((x216*((((x224*x225))+((x225*x226))+(((-1.0)*x223*x224))+(((-1.0)*x223*x226))+(((-1.0)*r11*x222))+(((-1.0)*r12*x221))+(((-1.0)*r10*x230))+((r12*x233)))))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[8+1], zeror[8];
int numroots;
IkReal x237=(r21*sj5);
IkReal x238=(cj5*r20);
IkReal x239=((1.3955641253225e-7)*cj4);
IkReal x240=((1.01965987338572e-8)*sj4);
IkReal x241=((0.0728701052062903)*cj4);
IkReal x242=(cj4*r22);
IkReal x243=(r22*sj4);
IkReal x244=((0.997341439912743)*sj4);
IkReal x245=((1.3955641253225e-7)*x243);
IkReal x246=((6.25181902607023e-7)*x237);
IkReal x247=(x238*x241);
IkReal x248=(x237*x244);
IkReal x249=(x237*x239);
IkReal x250=(x237*x240);
IkReal x251=(x247+x248);
IkReal x252=(((x237*x241))+((x238*x244))+(((0.997341439912743)*x242))+(((0.0728701052062903)*x243)));
IkReal x253=(x250+x246+x245+x249);
IkReal x254=((((1.08150140232244e-9)*r20*sj5))+((x238*x240))+(((6.25181902607023e-7)*x238))+((x238*x239))+(((1.0)*pz))+(((1.01965987338572e-8)*x242))+(((1.08150140232244e-9)*cj5*r21)));
IkReal x255=((-0.999462911269554)+x251+(((-1.0)*x252)));
IkReal x256=((0.999462911269554)+x251+(((-1.0)*x252)));
IkReal x257=((0.361022935236598)+x253+(((-1.0)*x254)));
IkReal x258=((-0.0610502152365978)+x253+(((-1.0)*x254)));
IkReal x259=((-0.361022935236598)+x253+(((-1.0)*x254)));
IkReal x260=((0.0610502152365977)+x253+(((-1.0)*x254)));
IkReal gconst0=x255;
IkReal gconst1=x256;
IkReal gconst2=x257;
IkReal gconst3=0.0138397693238032;
IkReal gconst4=x258;
IkReal gconst5=x255;
IkReal gconst6=x256;
IkReal gconst7=x257;
IkReal gconst8=0.0138397693238032;
IkReal gconst9=x258;
IkReal gconst10=0.00979470932380316;
IkReal gconst11=-0.844146300946391;
IkReal gconst12=-0.0178848293238032;
IkReal gconst13=0.00979470932380316;
IkReal gconst14=-0.844146300946391;
IkReal gconst15=-0.0178848293238032;
IkReal gconst16=x256;
IkReal gconst17=x255;
IkReal gconst18=x259;
IkReal gconst19=-0.0138397693238032;
IkReal gconst20=x260;
IkReal gconst21=x256;
IkReal gconst22=x255;
IkReal gconst23=x259;
IkReal gconst24=-0.0138397693238032;
IkReal gconst25=x260;
IkReal x261=((0.0655404911970328)*gconst13);
IkReal x262=(gconst20*gconst22);
IkReal x263=(gconst1*gconst5);
IkReal x264=(gconst14*gconst3);
IkReal x265=((0.0655404911970328)*gconst24);
IkReal x266=(gconst19*gconst21);
IkReal x267=(gconst1*gconst11);
IkReal x268=(gconst15*gconst21);
IkReal x269=((1.0)*gconst12);
IkReal x270=(gconst2*gconst25);
IkReal x271=(gconst16*gconst23);
IkReal x272=(gconst13*gconst16);
IkReal x273=(gconst6*gconst7);
IkReal x274=((1.0)*gconst1);
IkReal x275=(gconst11*gconst17);
IkReal x276=(gconst17*gconst21);
IkReal x277=((0.00429555598634833)*gconst20);
IkReal x278=(gconst10*gconst17);
IkReal x279=((0.0655404911970328)*gconst12);
IkReal x280=(gconst5*gconst9);
IkReal x281=((0.0655404911970328)*gconst23);
IkReal x282=(gconst22*gconst23);
IkReal x283=((0.00429555598634833)*gconst8);
IkReal x284=(gconst20*gconst21);
IkReal x285=((3.99785164507822)*gconst24);
IkReal x286=(gconst1*gconst3);
IkReal x287=(gconst0*gconst15);
IkReal x288=((0.0655404911970328)*gconst4);
IkReal x289=((3.99785164507822)*gconst7);
IkReal x290=(gconst10*gconst9);
IkReal x291=(gconst3*gconst7);
IkReal x292=((0.00429555598634833)*gconst7);
IkReal x293=((0.524042321102584)*gconst20);
IkReal x294=((0.0655404911970328)*gconst8);
IkReal x295=((1.0)*gconst8);
IkReal x296=((0.524042321102584)*gconst12);
IkReal x297=((1.0)*gconst16);
IkReal x298=((0.0655404911970328)*gconst19);
IkReal x299=(gconst14*gconst17);
IkReal x300=(gconst4*gconst5);
IkReal x301=((3.99785164507822)*gconst8);
IkReal x302=((0.0655404911970328)*gconst1);
IkReal x303=((0.0655404911970328)*gconst10);
IkReal x304=(gconst14*gconst21);
IkReal x305=(gconst18*gconst25);
IkReal x306=(gconst17*gconst5);
IkReal x307=(gconst14*gconst5);
IkReal x308=(gconst2*gconst7);
IkReal x309=(gconst21*gconst25);
IkReal x310=((0.0655404911970328)*gconst20);
IkReal x311=((0.00429555598634833)*gconst4);
IkReal x312=(gconst15*gconst5);
IkReal x313=((0.0655404911970328)*gconst2);
IkReal x314=((0.0655404911970328)*gconst14);
IkReal x315=(gconst4*gconst7);
IkReal x316=((1.0)*gconst24);
IkReal x317=(gconst21*gconst8);
IkReal x318=((0.00429555598634833)*gconst12);
IkReal x319=(gconst17*gconst19);
IkReal x320=((3.99785164507822)*gconst23);
IkReal x321=((0.00429555598634833)*gconst19);
IkReal x322=(gconst1*gconst21);
IkReal x323=(gconst2*gconst9);
IkReal x324=(gconst13*gconst4);
IkReal x325=(gconst0*gconst6);
IkReal x326=(gconst18*gconst9);
IkReal x327=(gconst18*gconst22);
IkReal x328=((1.0)*gconst17);
IkReal x329=(gconst0*gconst20);
IkReal x330=((0.0655404911970328)*gconst25);
IkReal x331=(gconst17*gconst18);
IkReal x332=(gconst15*gconst2);
IkReal x333=(gconst0*gconst4);
IkReal x334=((0.0655404911970328)*gconst7);
IkReal x335=(gconst20*gconst5);
IkReal x336=((0.00429555598634833)*gconst23);
IkReal x337=(gconst13*gconst6);
IkReal x338=((3.99785164507822)*gconst14);
IkReal x339=(gconst2*gconst6);
IkReal x340=(gconst12*gconst22);
IkReal x341=(gconst12*gconst21);
IkReal x342=((0.0655404911970328)*gconst17);
IkReal x343=(gconst0*gconst7);
IkReal x344=(gconst0*gconst9);
IkReal x345=(gconst16*gconst25);
IkReal x346=((3.99785164507822)*gconst13);
IkReal x347=(gconst13*x318);
IkReal x348=(gconst23*x311);
IkReal x349=(gconst7*x277);
IkReal x350=(gconst5*x294);
IkReal x351=((1.0)*gconst0*gconst25);
IkReal x352=(x265*x284);
IkReal x353=(x281*x319);
IkReal x354=(gconst5*gconst8*x288);
IkReal x355=(x286*x334);
IkReal x356=(x353+x352);
IkReal x357=(x355+x354);
IkReal x358=(x347+x348+x349);
op[0]=((((-1.0)*gconst17*x266*x316))+(((-1.0)*gconst25*x284*x297))+(((-1.0)*gconst18*x282*x328))+((x262*x271))+x356+((x276*x305))+(((-1.0)*gconst23*x277)));
op[1]=(((x284*x285))+(((-1.0)*x281*x327))+(((-1.0)*gconst21*x275*x316))+(((-1.0)*x262*x281))+((gconst10*gconst25*x276))+((x261*x319))+((x284*x330))+(((-1.0)*gconst23*x318))+((x271*x340))+(((-1.0)*gconst13*x327*x328))+((x271*x310))+((gconst23*x321))+(((-1.0)*gconst16*x269*x309))+((x265*x319))+((x262*x272))+(((-1.0)*gconst23*x293))+(((-1.0)*gconst13*x277))+((x284*x314))+((x268*x331))+(((-1.0)*x278*x282))+(((-1.0)*x305*x342))+((x275*x281))+(((-1.0)*x281*x331))+(((0.0655404911970328)*gconst21*x305))+((x265*x341))+(((-1.0)*x266*x299))+((x310*x345))+(((-1.0)*x265*x266))+(((-1.0)*gconst20*x268*x297))+(((-1.0)*gconst24*x277))+((x319*x320)));
op[2]=((((-1.0)*gconst25*x277))+((x285*x341))+((gconst13*x321))+(((-1.0)*gconst10*gconst22*x281))+(((-1.0)*gconst2*x282*x328))+((x271*x279))+(((0.262021160551292)*gconst19*gconst23))+((gconst16*gconst20*x261))+((gconst20*gconst6*x271))+((gconst11*x336))+(((-1.0)*gconst18*gconst23*gconst6*x328))+((gconst15*gconst16*x310))+((x284*x338))+((gconst22*gconst4*x271))+(((-1.0)*x358))+(((-1.0)*x356))+(((-1.0)*gconst17*x266*x295))+((x279*x304))+((x279*x309))+(((-1.0)*gconst16*x268*x269))+(((-1.0)*x278*x330))+((x305*x322))+((x303*x309))+(((-1.0)*x275*x304))+(((-1.0)*gconst9*x284*x297))+(((-1.0)*x266*x314))+((x265*x335))+((x268*x310))+(((-1.0)*gconst14*x277))+(((0.0655404911970328)*gconst18*x268))+(((-1.0)*gconst19*x306*x316))+((x275*x320))+(((-1.0)*gconst23*x296))+((x272*x340))+((x284*x294))+(((-1.0)*gconst11*gconst21*x265))+(((-15.9785222200683)*gconst20*gconst23))+((x270*x276))+(((-1.0)*x284*x351))+(((-1.0)*x261*x262))+(((-1.0)*x261*x331))+(((-1.0)*gconst24*x266*x274))+((x319*x346))+((x298*x299))+(((-1.0)*gconst3*x276*x316))+((x276*x326))+(((-1.0)*gconst4*x297*x309))+(((-1.0)*gconst13*x293))+(((-1.0)*gconst25*x297*x335))+(((-1.0)*gconst13*gconst22*x278))+(((-0.262021160551292)*gconst20*gconst24))+(((-1.0)*gconst18*x274*x282))+((x305*x306))+((x279*x345))+((gconst21*gconst4*x265))+((gconst1*gconst19*x281))+(((-1.0)*x261*x327))+((x265*x275))+((gconst24*x321))+(((-1.0)*gconst7*x327*x328))+(((-0.0655404911970328)*gconst15*x331))+((gconst17*gconst3*x281))+((x261*x275))+(((-1.0)*gconst24*x318))+(((-1.0)*gconst18*x336))+(((-1.0)*x279*x282))+((gconst0*gconst23*x262))+((gconst17*gconst7*x298))+(((-1.0)*x278*x281))+(((-0.00429555598634833)*x305))+((gconst16*gconst7*x262))+((x268*x278)));
op[3]=((((-0.00429555598634833)*gconst12*gconst25))+(((0.0655404911970328)*gconst1*gconst19*gconst24))+(((-1.0)*gconst10*gconst17*gconst23*gconst6))+((gconst13*gconst16*gconst20*gconst6))+(((-1.0)*gconst13*gconst17*gconst18*gconst6))+(((0.00429555598634833)*gconst11*gconst24))+(((0.0655404911970328)*gconst2*gconst21*gconst25))+(((0.0655404911970328)*gconst17*gconst24*gconst3))+(((0.0655404911970328)*gconst18*gconst25*gconst5))+(((-0.0655404911970328)*gconst18*gconst23*gconst6))+(((0.00429555598634833)*gconst11*gconst13))+(((-1.0)*gconst12*gconst16*gconst25*gconst5))+(((-15.9785222200683)*gconst12*gconst23))+(((-0.00429555598634833)*gconst24*gconst4))+(((0.0655404911970328)*gconst11*gconst14*gconst17))+((gconst10*gconst17*gconst25*gconst5))+(((0.262021160551292)*gconst11*gconst23))+(((-0.0655404911970328)*gconst20*gconst23*gconst6))+(((0.00429555598634833)*gconst19*gconst7))+(((-1.0)*gconst1*gconst11*gconst21*gconst24))+(((-0.0655404911970328)*gconst11*gconst14*gconst21))+(((-1.0)*gconst0*gconst12*gconst21*gconst25))+(((0.262021160551292)*gconst13*gconst19))+(((0.524042321102584)*gconst20*gconst23))+(((-0.0655404911970328)*gconst2*gconst22*gconst23))+(((3.99785164507822)*gconst17*gconst23*gconst3))+((gconst13*gconst16*gconst22*gconst4))+((gconst15*gconst17*gconst18*gconst5))+(((-0.0655404911970328)*gconst17*gconst18*gconst7))+(((-0.0655404911970328)*gconst17*gconst18*gconst9))+(((0.0655404911970328)*gconst10*gconst15*gconst21))+(((-1.0)*gconst11*gconst17*gconst21*gconst8))+(((-0.0655404911970328)*gconst19*gconst21*gconst8))+((gconst12*gconst16*gconst22*gconst7))+((gconst1*gconst15*gconst18*gconst21))+(((-1.0)*gconst15*gconst16*gconst21*gconst4))+(((0.0655404911970328)*gconst20*gconst21*gconst9))+(((3.99785164507822)*gconst12*gconst14*gconst21))+(((-1.0)*gconst1*gconst13*gconst18*gconst22))+(((0.0655404911970328)*gconst12*gconst15*gconst21))+(((-0.0655404911970328)*gconst17*gconst2*gconst23))+(((-0.0655404911970328)*gconst17*gconst2*gconst25))+(((-0.262021160551292)*gconst12*gconst24))+(((-0.00429555598634833)*gconst19*gconst23))+(((0.0655404911970328)*gconst12*gconst13*gconst16))+(((0.0655404911970328)*gconst1*gconst11*gconst23))+(((0.0655404911970328)*gconst12*gconst15*gconst16))+(((-0.524042321102584)*gconst23*gconst4))+(((0.00429555598634833)*gconst23*gconst3))+(((3.99785164507822)*gconst20*gconst21*gconst8))+((gconst0*gconst12*gconst22*gconst23))+(((-1.0)*gconst0*gconst15*gconst20*gconst21))+(((0.0655404911970328)*gconst12*gconst24*gconst5))+(((0.0655404911970328)*gconst12*gconst21*gconst8))+((gconst1*gconst10*gconst21*gconst25))+(((-0.00429555598634833)*gconst10*gconst25))+(((-0.00429555598634833)*gconst10*gconst23))+(((-1.0)*gconst1*gconst14*gconst19*gconst21))+(((-15.9785222200683)*gconst13*gconst20))+(((-0.00429555598634833)*gconst13*gconst4))+(((-0.262021160551292)*gconst14*gconst20))+(((-0.0655404911970328)*gconst22*gconst23*gconst4))+(((-1.0)*gconst14*gconst17*gconst21*gconst3))+(((0.0655404911970328)*gconst14*gconst20*gconst5))+((gconst15*gconst17*gconst2*gconst21))+(((-0.00429555598634833)*gconst13*gconst18))+(((-0.0655404911970328)*gconst18*gconst22*gconst7))+(((-1.0)*gconst12*gconst16*gconst21*gconst9))+(((3.99785164507822)*gconst21*gconst24*gconst4))+(((-0.0655404911970328)*gconst10*gconst13*gconst22))+(((-0.0655404911970328)*gconst13*gconst17*gconst19))+(((3.99785164507822)*gconst17*gconst19*gconst7))+(((0.0655404911970328)*gconst17*gconst19*gconst8))+(((-0.0655404911970328)*gconst10*gconst13*gconst17))+(((0.00429555598634833)*gconst14*gconst19))+(((0.0655404911970328)*gconst11*gconst17*gconst7))+(((-0.0655404911970328)*gconst20*gconst22*gconst7))+(((3.99785164507822)*gconst11*gconst13*gconst17))+(((0.0655404911970328)*gconst16*gconst20*gconst9))+(((0.0655404911970328)*gconst16*gconst20*gconst7))+(((-0.0655404911970328)*gconst14*gconst20*gconst21))+(((0.0655404911970328)*gconst18*gconst21*gconst9))+(((-0.0655404911970328)*gconst12*gconst21*gconst24))+(((3.99785164507822)*gconst20*gconst24*gconst5))+(((0.0655404911970328)*gconst21*gconst25*gconst4))+(((-1.0)*gconst10*gconst17*gconst22*gconst7))+(((-0.0655404911970328)*gconst12*gconst13*gconst22))+(((-0.0655404911970328)*gconst10*gconst15*gconst17))+(((-1.0)*gconst11*gconst17*gconst24*gconst5))+(((0.0655404911970328)*gconst14*gconst21*gconst4))+(((0.0655404911970328)*gconst1*gconst13*gconst19))+(((0.0655404911970328)*gconst16*gconst25*gconst4))+((gconst12*gconst16*gconst23*gconst6))+(((-1.0)*gconst1*gconst10*gconst22*gconst23))+(((-1.0)*gconst13*gconst17*gconst2*gconst22))+(((0.0655404911970328)*gconst20*gconst25*gconst5))+(((0.0655404911970328)*gconst0*gconst20*gconst23))+(((0.0655404911970328)*gconst0*gconst20*gconst25))+(((-0.0655404911970328)*gconst11*gconst17*gconst23))+(((-0.524042321102584)*gconst12*gconst13))+(((0.0655404911970328)*gconst16*gconst23*gconst4))+(((-1.0)*gconst14*gconst17*gconst19*gconst5))+(((-0.00429555598634833)*gconst15*gconst20))+(((3.99785164507822)*gconst1*gconst19*gconst23))+(((0.00429555598634833)*gconst20*gconst24))+((gconst0*gconst13*gconst20*gconst22))+(((-0.0655404911970328)*gconst19*gconst24*gconst5))+(((-0.0655404911970328)*gconst21*gconst24*gconst3))+(((-0.00429555598634833)*gconst15*gconst18))+(((-0.00429555598634833)*gconst12*gconst7))+(((-0.524042321102584)*gconst20*gconst7))+((gconst10*gconst17*gconst21*gconst9))+(((-0.00429555598634833)*gconst20*gconst8))+(((-0.00429555598634833)*gconst12*gconst14))+(((-0.0655404911970328)*gconst1*gconst18*gconst23))+(((-0.0655404911970328)*gconst1*gconst18*gconst25))+(((0.0655404911970328)*gconst13*gconst17*gconst3))+(((-1.0)*gconst15*gconst16*gconst20*gconst5)));
op[4]=((((-0.0655404911970328)*gconst11*gconst13*gconst17))+(((3.99785164507822)*gconst1*gconst13*gconst19))+(((0.0655404911970328)*gconst15*gconst2*gconst21))+(((-1.0)*gconst0*gconst20*gconst21*gconst9))+(((0.0655404911970328)*gconst24*gconst4*gconst5))+(((-1.0)*gconst17*gconst2*gconst23*gconst6))+(((0.0655404911970328)*gconst13*gconst16*gconst4))+(((-15.9785222200683)*gconst12*gconst13))+(((0.00429555598634833)*gconst11*gconst14))+(((-1.0)*gconst1*gconst18*gconst23*gconst6))+(((3.99785164507822)*gconst13*gconst17*gconst3))+((gconst0*gconst22*gconst23*gconst4))+(((-0.0655404911970328)*gconst1*gconst13*gconst18))+(((0.524042321102584)*gconst13*gconst20))+(((0.00429555598634833)*gconst13*gconst3))+(((0.524042321102584)*gconst12*gconst23))+(((-1.0)*gconst17*gconst2*gconst22*gconst7))+(((-1.0)*gconst11*gconst14*gconst17*gconst5))+(((0.00429555598634833)*gconst19*gconst8))+(((-0.0655404911970328)*gconst10*gconst22*gconst7))+(((-0.00429555598634833)*gconst2*gconst25))+(((-0.00429555598634833)*gconst2*gconst23))+(((-1.0)*gconst17*gconst24*gconst3*gconst5))+(((0.0655404911970328)*gconst21*gconst4*gconst8))+(((-0.0655404911970328)*gconst14*gconst21*gconst3))+(((0.0655404911970328)*gconst10*gconst21*gconst9))+(((0.262021160551292)*gconst11*gconst13))+((gconst16*gconst20*gconst6*gconst7))+(((-0.0655404911970328)*gconst10*gconst17*gconst7))+(((-0.0655404911970328)*gconst10*gconst17*gconst9))+(((0.0655404911970328)*gconst20*gconst5*gconst8))+(((3.99785164507822)*gconst12*gconst24*gconst5))+((gconst0*gconst20*gconst23*gconst6))+(((-1.0)*gconst1*gconst10*gconst13*gconst22))+((gconst16*gconst23*gconst4*gconst6))+(((-0.0655404911970328)*gconst11*gconst24*gconst5))+(((0.0655404911970328)*gconst0*gconst12*gconst23))+(((0.0655404911970328)*gconst0*gconst12*gconst25))+(((-0.0655404911970328)*gconst15*gconst17*gconst2))+(((0.262021160551292)*gconst23*gconst3))+(((-0.0655404911970328)*gconst1*gconst10*gconst23))+(((-0.0655404911970328)*gconst1*gconst10*gconst25))+(((-1.0)*gconst1*gconst11*gconst14*gconst21))+(((3.99785164507822)*gconst14*gconst21*gconst4))+((gconst1*gconst18*gconst21*gconst9))+((gconst0*gconst12*gconst13*gconst22))+(((0.0655404911970328)*gconst15*gconst21*gconst4))+((gconst10*gconst15*gconst17*gconst5))+(((0.00429555598634833)*gconst11*gconst7))+(((0.0655404911970328)*gconst1*gconst11*gconst24))+(((-1.0)*gconst0*gconst20*gconst25*gconst5))+((gconst0*gconst20*gconst22*gconst7))+(((-0.0655404911970328)*gconst1*gconst15*gconst18))+(((-15.9785222200683)*gconst23*gconst4))+(((-1.0)*gconst17*gconst19*gconst5*gconst8))+(((0.0655404911970328)*gconst1*gconst11*gconst13))+(((-0.262021160551292)*gconst12*gconst14))+(((0.0655404911970328)*gconst0*gconst13*gconst20))+(((-0.524042321102584)*gconst12*gconst7))+(((3.99785164507822)*gconst11*gconst17*gconst7))+(((-0.00429555598634833)*gconst18*gconst7))+(((-0.00429555598634833)*gconst18*gconst9))+(((-0.00429555598634833)*gconst4*gconst7))+(((3.99785164507822)*gconst14*gconst20*gconst5))+(((-0.0655404911970328)*gconst13*gconst18*gconst6))+(((-0.524042321102584)*gconst13*gconst4))+(((-0.0655404911970328)*gconst13*gconst17*gconst2))+(((0.0655404911970328)*gconst0*gconst15*gconst20))+(((0.0655404911970328)*gconst12*gconst21*gconst9))+((gconst17*gconst2*gconst21*gconst9))+(((0.0655404911970328)*gconst15*gconst16*gconst4))+(((-1.0)*gconst1*gconst21*gconst24*gconst3))+(((-0.00429555598634833)*gconst10*gconst13))+(((-0.00429555598634833)*gconst10*gconst15))+(((-0.0655404911970328)*gconst12*gconst23*gconst6))+(((-0.0655404911970328)*gconst1*gconst19*gconst23))+(((-1.0)*gconst16*gconst21*gconst4*gconst9))+(((-0.00429555598634833)*gconst13*gconst19))+(((0.0655404911970328)*gconst17*gconst3*gconst7))+(((-1.0)*gconst1*gconst19*gconst21*gconst8))+(((0.0655404911970328)*gconst1*gconst14*gconst19))+(((0.0655404911970328)*gconst12*gconst25*gconst5))+(((0.0655404911970328)*gconst15*gconst20*gconst5))+(((0.0655404911970328)*gconst10*gconst25*gconst5))+(((0.00429555598634833)*gconst14*gconst20))+((gconst1*gconst18*gconst25*gconst5))+(((-1.0)*gconst16*gconst20*gconst5*gconst9))+(((-1.0)*gconst17*gconst21*gconst3*gconst8))+(((-0.00429555598634833)*gconst20*gconst23))+(((0.0655404911970328)*gconst11*gconst17*gconst8))+((gconst12*gconst13*gconst16*gconst6))+(((-0.0655404911970328)*gconst17*gconst19*gconst7))+(((-0.262021160551292)*gconst24*gconst4))+(((-0.00429555598634833)*gconst11*gconst23))+((gconst1*gconst2*gconst21*gconst25))+(((-0.0655404911970328)*gconst13*gconst22*gconst4))+(((0.0655404911970328)*gconst14*gconst17*gconst3))+(((-1.0)*gconst12*gconst15*gconst16*gconst5))+(((0.0655404911970328)*gconst15*gconst18*gconst5))+(((0.0655404911970328)*gconst1*gconst19*gconst7))+(((-0.0655404911970328)*gconst12*gconst14*gconst21))+(((-0.0655404911970328)*gconst17*gconst23*gconst3))+(((-0.00429555598634833)*gconst25*gconst4))+(((-0.0655404911970328)*gconst13*gconst2*gconst22))+(((-1.0)*gconst1*gconst19*gconst24*gconst5))+(((-0.0655404911970328)*gconst14*gconst19*gconst5))+(((0.262021160551292)*gconst19*gconst7))+((gconst17*gconst18*gconst5*gconst9))+(((-0.0655404911970328)*gconst20*gconst21*gconst8))+(((-1.0)*gconst16*gconst25*gconst4*gconst5))+(((-0.0655404911970328)*gconst20*gconst24*gconst5))+(((-0.00429555598634833)*gconst14*gconst4))+(((-1.0)*gconst1*gconst2*gconst22*gconst23))+(((-1.0)*gconst1*gconst18*gconst22*gconst7))+(((-0.0655404911970328)*gconst11*gconst21*gconst8))+(((3.99785164507822)*gconst1*gconst11*gconst23))+(((-1.0)*gconst17*gconst18*gconst6*gconst7))+(((-0.0655404911970328)*gconst13*gconst20*gconst6))+(((3.99785164507822)*gconst12*gconst21*gconst8))+(((-1.0)*gconst10*gconst13*gconst17*gconst6))+(((-0.0655404911970328)*gconst12*gconst22*gconst7))+(((0.0655404911970328)*gconst12*gconst14*gconst5))+(((-0.0655404911970328)*gconst10*gconst23*gconst6))+((gconst17*gconst2*gconst25*gconst5))+(((-0.0655404911970328)*gconst21*gconst24*gconst4))+(((-15.9785222200683)*gconst20*gconst7))+((gconst1*gconst10*gconst15*gconst21))+(((-0.00429555598634833)*gconst12*gconst8))+(((-0.262021160551292)*gconst20*gconst8))+(((-1.0)*gconst0*gconst21*gconst25*gconst4))+((gconst16*gconst22*gconst4*gconst7))+(((0.0655404911970328)*gconst12*gconst16*gconst7))+(((0.0655404911970328)*gconst12*gconst16*gconst9))+(((-0.00429555598634833)*gconst20*gconst9))+(((0.00429555598634833)*gconst24*gconst3))+(((0.0655404911970328)*gconst1*gconst23*gconst3))+(((-0.00429555598634833)*gconst12*gconst15))+(((0.00429555598634833)*gconst12*gconst24))+(((-1.0)*gconst0*gconst12*gconst15*gconst21)));
op[5]=((((-15.9785222200683)*gconst13*gconst4))+(((-0.00429555598634833)*gconst12*gconst23))+((gconst12*gconst16*gconst6*gconst7))+(((-0.0655404911970328)*gconst11*gconst14*gconst5))+(((0.0655404911970328)*gconst25*gconst4*gconst5))+(((0.00429555598634833)*gconst12*gconst14))+(((-0.0655404911970328)*gconst1*gconst11*gconst23))+(((0.0655404911970328)*gconst1*gconst13*gconst3))+(((-1.0)*gconst0*gconst15*gconst21*gconst4))+(((0.0655404911970328)*gconst18*gconst5*gconst9))+((gconst1*gconst10*gconst25*gconst5))+((gconst15*gconst17*gconst2*gconst5))+(((0.524042321102584)*gconst12*gconst13))+(((-0.0655404911970328)*gconst20*gconst6*gconst7))+((gconst13*gconst16*gconst4*gconst6))+(((-0.0655404911970328)*gconst1*gconst13*gconst19))+(((0.0655404911970328)*gconst0*gconst20*gconst9))+(((0.0655404911970328)*gconst0*gconst20*gconst7))+(((-0.0655404911970328)*gconst23*gconst4*gconst6))+(((-0.0655404911970328)*gconst22*gconst4*gconst7))+(((-1.0)*gconst12*gconst16*gconst5*gconst9))+(((-1.0)*gconst1*gconst13*gconst18*gconst6))+(((0.0655404911970328)*gconst21*gconst4*gconst9))+(((0.0655404911970328)*gconst10*gconst15*gconst5))+(((-15.9785222200683)*gconst12*gconst7))+(((-0.0655404911970328)*gconst14*gconst21*gconst4))+(((-0.0655404911970328)*gconst1*gconst10*gconst15))+(((-0.0655404911970328)*gconst1*gconst10*gconst13))+(((-0.0655404911970328)*gconst2*gconst22*gconst7))+(((0.0655404911970328)*gconst20*gconst5*gconst9))+(((-1.0)*gconst14*gconst17*gconst3*gconst5))+(((0.0655404911970328)*gconst0*gconst12*gconst15))+(((0.0655404911970328)*gconst0*gconst12*gconst13))+(((0.524042321102584)*gconst23*gconst4))+(((-0.00429555598634833)*gconst23*gconst3))+(((3.99785164507822)*gconst21*gconst4*gconst8))+(((-0.00429555598634833)*gconst10*gconst7))+(((-0.00429555598634833)*gconst10*gconst9))+(((3.99785164507822)*gconst24*gconst4*gconst5))+(((-0.0655404911970328)*gconst12*gconst13*gconst6))+(((0.00429555598634833)*gconst11*gconst8))+(((-0.0655404911970328)*gconst11*gconst17*gconst7))+(((-0.0655404911970328)*gconst18*gconst6*gconst7))+((gconst0*gconst12*gconst22*gconst7))+(((0.0655404911970328)*gconst1*gconst11*gconst7))+(((0.0655404911970328)*gconst1*gconst11*gconst14))+((gconst1*gconst15*gconst2*gconst21))+(((-0.0655404911970328)*gconst19*gconst5*gconst8))+(((-0.524042321102584)*gconst4*gconst7))+(((-0.00429555598634833)*gconst4*gconst8))+(((-1.0)*gconst0*gconst15*gconst20*gconst5))+(((-0.262021160551292)*gconst12*gconst8))+(((0.262021160551292)*gconst11*gconst7))+(((-0.0655404911970328)*gconst14*gconst20*gconst5))+(((0.262021160551292)*gconst13*gconst3))+(((-0.0655404911970328)*gconst13*gconst17*gconst3))+(((-1.0)*gconst1*gconst13*gconst2*gconst22))+(((-0.00429555598634833)*gconst19*gconst7))+(((0.0655404911970328)*gconst2*gconst21*gconst9))+(((-0.0655404911970328)*gconst2*gconst23*gconst6))+((gconst10*gconst17*gconst5*gconst9))+(((-1.0)*gconst1*gconst14*gconst21*gconst3))+(((-1.0)*gconst10*gconst17*gconst6*gconst7))+(((0.524042321102584)*gconst20*gconst7))+(((-0.00429555598634833)*gconst13*gconst2))+(((-0.262021160551292)*gconst14*gconst4))+(((-0.00429555598634833)*gconst13*gconst20))+(((3.99785164507822)*gconst20*gconst5*gconst8))+(((-1.0)*gconst1*gconst14*gconst19*gconst5))+(((0.0655404911970328)*gconst0*gconst25*gconst4))+(((0.0655404911970328)*gconst17*gconst3*gconst8))+(((-0.0655404911970328)*gconst1*gconst2*gconst25))+(((-0.0655404911970328)*gconst1*gconst2*gconst23))+(((3.99785164507822)*gconst1*gconst23*gconst3))+(((0.0655404911970328)*gconst12*gconst5*gconst8))+((gconst1*gconst15*gconst18*gconst5))+(((0.00429555598634833)*gconst3*gconst7))+((gconst0*gconst12*gconst23*gconst6))+(((3.99785164507822)*gconst12*gconst14*gconst5))+(((-1.0)*gconst13*gconst17*gconst2*gconst6))+((gconst0*gconst13*gconst22*gconst4))+(((0.0655404911970328)*gconst1*gconst19*gconst8))+((gconst1*gconst10*gconst21*gconst9))+(((0.0655404911970328)*gconst14*gconst4*gconst5))+(((-1.0)*gconst11*gconst17*gconst5*gconst8))+(((-0.0655404911970328)*gconst12*gconst24*gconst5))+(((-0.00429555598634833)*gconst11*gconst13))+(((0.0655404911970328)*gconst0*gconst23*gconst4))+(((-1.0)*gconst1*gconst11*gconst24*gconst5))+(((0.00429555598634833)*gconst20*gconst8))+(((-1.0)*gconst0*gconst12*gconst25*gconst5))+(((-0.0655404911970328)*gconst17*gconst2*gconst9))+(((-0.0655404911970328)*gconst17*gconst2*gconst7))+(((0.0655404911970328)*gconst12*gconst15*gconst5))+(((-0.0655404911970328)*gconst10*gconst13*gconst6))+(((-0.0655404911970328)*gconst1*gconst18*gconst9))+(((-0.0655404911970328)*gconst1*gconst18*gconst7))+(((3.99785164507822)*gconst1*gconst11*gconst13))+(((0.0655404911970328)*gconst2*gconst25*gconst5))+(((-0.0655404911970328)*gconst24*gconst3*gconst5))+((gconst0*gconst13*gconst20*gconst6))+(((3.99785164507822)*gconst1*gconst19*gconst7))+(((0.0655404911970328)*gconst1*gconst24*gconst3))+(((3.99785164507822)*gconst17*gconst3*gconst7))+(((-1.0)*gconst15*gconst16*gconst4*gconst5))+(((-1.0)*gconst1*gconst10*gconst23*gconst6))+(((0.00429555598634833)*gconst14*gconst3))+(((-0.00429555598634833)*gconst15*gconst2))+(((-0.00429555598634833)*gconst15*gconst4))+(((-1.0)*gconst0*gconst12*gconst21*gconst9))+(((-1.0)*gconst1*gconst11*gconst21*gconst8))+(((-0.0655404911970328)*gconst12*gconst21*gconst8))+(((0.0655404911970328)*gconst16*gconst4*gconst9))+(((0.0655404911970328)*gconst16*gconst4*gconst7))+(((-0.00429555598634833)*gconst12*gconst9))+(((-0.0655404911970328)*gconst21*gconst3*gconst8))+(((0.00429555598634833)*gconst24*gconst4))+(((-1.0)*gconst1*gconst10*gconst22*gconst7)));
op[6]=((((-1.0)*x273*x279))+(((-0.262021160551292)*gconst4*gconst8))+((x322*x323))+(((0.262021160551292)*x291))+(((-1.0)*x291*x342))+((x279*x280))+((x286*x346))+((x312*x313))+(((-1.0)*gconst2*x292))+(((-1.0)*gconst22*x274*x308))+((x264*x302))+(((-1.0)*gconst18*x273*x274))+((gconst0*gconst22*x315))+((gconst3*x283))+(((-1.0)*x265*x300))+(((-1.0)*x358))+(((-1.0)*gconst3*x274*x317))+((gconst17*gconst2*x280))+(((-15.9785222200683)*x315))+(((-1.0)*gconst5*x269*x287))+(((-1.0)*gconst4*gconst6*x261))+((gconst12*gconst5*x301))+(((-1.0)*x300*x351))+((x267*x294))+(((-1.0)*gconst11*x350))+(((-1.0)*gconst1*gconst2*x261))+((x263*x270))+((x280*x303))+((gconst14*x311))+(((-1.0)*x279*x307))+(((-1.0)*gconst11*gconst14*x263))+(((-1.0)*x302*x332))+(((-1.0)*x281*x286))+((x263*x326))+((gconst7*x296))+x357+((x273*x329))+(((-0.0655404911970328)*gconst5*x264))+(((-1.0)*x294*x335))+(((-1.0)*x261*x267))+(((-0.00429555598634833)*gconst13*gconst3))+(((-1.0)*x261*x339))+(((-1.0)*gconst10*gconst7*x302))+(((-1.0)*gconst10*x274*x337))+(((-1.0)*gconst19*x263*x295))+(((-1.0)*gconst9*x311))+(((-1.0)*x288*x317))+(((-0.00429555598634833)*x323))+(((-1.0)*gconst2*x273*x328))+((x261*x333))+(((-1.0)*x273*x303))+((x279*x344))+((x279*x343))+((gconst10*gconst15*x263))+(((-1.0)*gconst1*gconst7*x298))+(((-1.0)*gconst4*x280*x297))+(((-1.0)*x280*x329))+(((-1.0)*gconst3*x295*x306))+((gconst16*gconst4*x273))+(((0.524042321102584)*x324))+((x287*x288))+(((-1.0)*gconst23*x274*x339))+((gconst12*gconst13*x325))+((gconst12*x283))+(((-1.0)*x290*x302))+(((-1.0)*gconst21*gconst9*x333))+((x300*x338))+((x267*x289))+(((-1.0)*gconst3*x263*x316))+((x288*x312))+(((-1.0)*gconst11*x292))+((gconst23*gconst4*x325)));
op[7]=(((x263*x290))+(((-0.00429555598634833)*x291))+(((-1.0)*gconst13*x311))+((gconst0*gconst12*x273))+(((-1.0)*gconst11*x263*x295))+(((-1.0)*gconst10*x273*x274))+(((-1.0)*gconst2*x274*x337))+((x263*x332))+((x286*x289))+(((-1.0)*gconst0*x269*x280))+((gconst4*x283))+(((-1.0)*x302*x308))+(((-1.0)*x288*x307))+((x288*x343))+((x288*x344))+(((-1.0)*x287*x300))+((x324*x325))+((x280*x313))+((x286*x294))+(((-1.0)*x273*x313))+(((-1.0)*gconst12*x292))+(((-1.0)*x267*x334))+(((0.524042321102584)*x315))+(((-1.0)*x263*x264))+(((-1.0)*x273*x288))+((x280*x288))+((x300*x301))+(((-1.0)*x261*x286))+(((-1.0)*gconst3*x350))+(((-1.0)*gconst5*gconst8*x279))+(((-1.0)*x302*x323)));
op[8]=((((-1.0)*x357))+(((-1.0)*gconst2*x273*x274))+(((-1.0)*gconst4*x292))+((x263*x323))+(((-1.0)*x280*x333))+(((-1.0)*gconst3*x263*x295))+((x273*x333)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x359=(cj1*cj5);
IkReal x360=((0.00238797124439986)*cj4);
IkReal x361=((0.0326831239315186)*sj4);
IkReal x362=(r02*sj4);
IkReal x363=((0.0728309674939976)*cj1);
IkReal x364=(r01*sj5);
IkReal x365=(cj5*sj1);
IkReal x366=((0.99680577906496)*sj4);
IkReal x367=((0.00238797124439986)*sj1);
IkReal x368=(r21*sj5);
IkReal x369=((0.0728309674939976)*cj4);
IkReal x370=(r22*sj4);
IkReal x371=((0.0728309674939976)*sj1);
IkReal x372=(cj4*sj1);
IkReal x373=((0.0326831239315186)*r22);
IkReal x374=((0.00238797124439986)*cj1);
IkReal x375=((0.0326831239315186)*cj4*r02);
IkReal x376=((0.99680577906496)*cj1*cj4);
if( IKabs((((r00*x361*x365))+((x370*x371))+((r02*x376))+(((-1.0)*x370*x374))+(((-1.0)*cj1*x364*x366))+(((-1.0)*r20*x365*x369))+(((-1.0)*r20*x359*x361))+(((-1.0)*sj1*x366*x368))+(((-1.0)*cj1*x360*x368))+(((0.99680577906496)*r22*x372))+((r00*x359*x366))+(((-1.0)*r00*x360*x365))+(((-1.0)*sj1*x361*x364))+((cj4*x363*x364))+(((0.0326831239315186)*r02*x372))+((r20*x359*x360))+(((-1.0)*r00*x359*x369))+((sj1*x368*x369))+((r20*x365*x366))+((sj1*x360*x364))+((x362*x367))+((x362*x363))+(((-1.0)*cj1*cj4*x373))+((cj1*x361*x368)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x362*x374))+(((-1.0)*x363*x370))+((cj1*x366*x368))+(((-1.0)*sj1*x360*x368))+(((-1.0)*x372*x373))+(((-1.0)*cj1*x375))+(((-1.0)*r20*x359*x366))+(((-1.0)*r00*x365*x369))+(((-1.0)*cj1*x360*x364))+(((0.99680577906496)*r02*x372))+((r00*x365*x366))+(((-1.0)*x367*x370))+((r00*x359*x360))+(((-1.0)*cj4*x363*x368))+((sj1*x364*x369))+((sj1*x361*x368))+(((-1.0)*r20*x361*x365))+((r20*x359*x369))+(((-1.0)*r00*x359*x361))+(((-1.0)*sj1*x364*x366))+(((-1.0)*r22*x376))+((x362*x371))+((cj1*x361*x364))+((r20*x360*x365)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x361*x365))+((x370*x371))+((r02*x376))+(((-1.0)*x370*x374))+(((-1.0)*cj1*x364*x366))+(((-1.0)*r20*x365*x369))+(((-1.0)*r20*x359*x361))+(((-1.0)*sj1*x366*x368))+(((-1.0)*cj1*x360*x368))+(((0.99680577906496)*r22*x372))+((r00*x359*x366))+(((-1.0)*r00*x360*x365))+(((-1.0)*sj1*x361*x364))+((cj4*x363*x364))+(((0.0326831239315186)*r02*x372))+((r20*x359*x360))+(((-1.0)*r00*x359*x369))+((sj1*x368*x369))+((r20*x365*x366))+((sj1*x360*x364))+((x362*x367))+((x362*x363))+(((-1.0)*cj1*cj4*x373))+((cj1*x361*x368))))+IKsqr(((((-1.0)*x362*x374))+(((-1.0)*x363*x370))+((cj1*x366*x368))+(((-1.0)*sj1*x360*x368))+(((-1.0)*x372*x373))+(((-1.0)*cj1*x375))+(((-1.0)*r20*x359*x366))+(((-1.0)*r00*x365*x369))+(((-1.0)*cj1*x360*x364))+(((0.99680577906496)*r02*x372))+((r00*x365*x366))+(((-1.0)*x367*x370))+((r00*x359*x360))+(((-1.0)*cj4*x363*x368))+((sj1*x364*x369))+((sj1*x361*x368))+(((-1.0)*r20*x361*x365))+((r20*x359*x369))+(((-1.0)*r00*x359*x361))+(((-1.0)*sj1*x364*x366))+(((-1.0)*r22*x376))+((x362*x371))+((cj1*x361*x364))+((r20*x360*x365))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r00*x361*x365))+((x370*x371))+((r02*x376))+(((-1.0)*x370*x374))+(((-1.0)*cj1*x364*x366))+(((-1.0)*r20*x365*x369))+(((-1.0)*r20*x359*x361))+(((-1.0)*sj1*x366*x368))+(((-1.0)*cj1*x360*x368))+(((0.99680577906496)*r22*x372))+((r00*x359*x366))+(((-1.0)*r00*x360*x365))+(((-1.0)*sj1*x361*x364))+((cj4*x363*x364))+(((0.0326831239315186)*r02*x372))+((r20*x359*x360))+(((-1.0)*r00*x359*x369))+((sj1*x368*x369))+((r20*x365*x366))+((sj1*x360*x364))+((x362*x367))+((x362*x363))+(((-1.0)*cj1*cj4*x373))+((cj1*x361*x368))), ((((-1.0)*x362*x374))+(((-1.0)*x363*x370))+((cj1*x366*x368))+(((-1.0)*sj1*x360*x368))+(((-1.0)*x372*x373))+(((-1.0)*cj1*x375))+(((-1.0)*r20*x359*x366))+(((-1.0)*r00*x365*x369))+(((-1.0)*cj1*x360*x364))+(((0.99680577906496)*r02*x372))+((r00*x365*x366))+(((-1.0)*x367*x370))+((r00*x359*x360))+(((-1.0)*cj4*x363*x368))+((sj1*x364*x369))+((sj1*x361*x368))+(((-1.0)*r20*x361*x365))+((r20*x359*x369))+(((-1.0)*r00*x359*x361))+(((-1.0)*sj1*x364*x366))+(((-1.0)*r22*x376))+((x362*x371))+((cj1*x361*x364))+((r20*x360*x365))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x377=IKcos(j2);
IkReal x378=IKsin(j2);
IkReal x379=(cj5*r20);
IkReal x380=((0.997341439912743)*sj4);
IkReal x381=((0.0728701052062903)*cj4);
IkReal x382=(r01*sj5);
IkReal x383=(cj5*r00);
IkReal x384=(cj4*r02);
IkReal x385=((1.3955641253225e-7)*cj4);
IkReal x386=(cj3*sj4);
IkReal x387=((1.01965987338572e-8)*sj4);
IkReal x388=(sj3*sj5);
IkReal x389=(r21*sj5);
IkReal x390=((0.00373006819843503)*cj4);
IkReal x391=(cj5*r01);
IkReal x392=((0.0037400112430517)*cj3);
IkReal x393=((1.08150140232244e-9)*sj5);
IkReal x394=(r02*sj4);
IkReal x395=((0.00373006819843503)*sj3);
IkReal x396=(cj4*r22);
IkReal x397=(r22*sj4);
IkReal x398=((0.999993006133494)*sj3);
IkReal x399=((0.000272535012753886)*sj3);
IkReal x400=((0.0728695955625022)*cj3);
IkReal x401=(cj5*r21);
IkReal x402=(sj4*x399);
IkReal x403=(sj1*x377);
IkReal x404=((0.997334464639851)*cj3*cj4);
IkReal x405=(cj1*x378);
IkReal x406=(cj1*x377);
IkReal x407=(sj1*x378);
IkReal x408=((0.999462911269554)*x405);
IkReal x409=((0.999462911269554)*x403);
IkReal x410=((0.0327702455985164)*x407);
IkReal x411=((0.0327702455985164)*x406);
IkReal x412=((0.999462911269554)*x406);
IkReal x413=((0.0327702455985164)*x403);
IkReal x414=((0.0327702455985164)*x405);
IkReal x415=((0.999462911269554)*x407);
IkReal x416=(x412+x413+x414);
IkReal x417=(x409+x408+x410);
evalcond[0]=((((-0.0728701052062903)*x397))+(((-1.0)*x381*x389))+(((-1.0)*x379*x380))+(((-0.997341439912743)*x396))+x415+((x379*x381))+((x380*x389))+(((-1.0)*x416)));
evalcond[1]=((((-0.0728701052062903)*x394))+(((-1.0)*x380*x383))+(((-1.0)*x381*x382))+x417+((x380*x382))+(((-1.0)*x411))+((x381*x383))+(((-0.997341439912743)*x384)));
evalcond[2]=((((-1.08150140232244e-9)*x401))+(((-6.25181902607023e-7)*x379))+(((6.25181902607023e-7)*x389))+((x387*x389))+(((-1.0)*r20*x393))+(((-1.0)*x379*x385))+(((-1.0)*x379*x387))+(((0.14998636)*cj1))+(((-0.211036575236598)*x407))+(((-1.01965987338572e-8)*x396))+(((-1.0)*pz))+(((0.00691988466190158)*x403))+(((0.00691988466190158)*x405))+(((0.211036575236598)*x406))+((x385*x389))+(((1.3955641253225e-7)*x397))+(((-0.00202253)*sj1)));
evalcond[3]=((((-1.01965987338572e-8)*x384))+(((6.25181902607023e-7)*x382))+(((-1.08150140232244e-9)*x391))+(((-0.211036575236598)*x403))+(((-0.211036575236598)*x405))+(((-1.0)*r00*x393))+(((-6.25181902607023e-7)*x383))+(((-0.00202253)*cj1))+(((-0.14998636)*sj1))+(((-1.0)*px))+(((-0.00691988466190158)*x407))+(((0.00691988466190158)*x406))+((x382*x387))+((x382*x385))+(((1.3955641253225e-7)*x394))+(((-1.0)*x383*x387))+(((-1.0)*x383*x385)));
evalcond[4]=((((-1.0)*x392*x401))+(((-0.0728695955625022)*x379*x386))+(((0.997334464639851)*r22*x386))+(((-1.0)*r20*sj5*x392))+((x395*x397))+(((-1.0)*x379*x404))+(((-1.0)*x379*x402))+(((-1.0)*sj3*x379*x390))+((x389*x404))+((r21*x388*x390))+(((0.999993006133494)*r20*x388))+x417+(((-1.0)*x396*x399))+(((0.000272535012753886)*r21*sj4*x388))+(((-1.0)*x396*x400))+((x398*x401))+(((-1.0)*x411))+(((0.0728695955625022)*x386*x389)));
evalcond[5]=((((-1.0)*x383*x402))+(((-1.0)*x383*x404))+(((0.997334464639851)*r02*x386))+(((-1.0)*x384*x399))+(((-1.0)*r00*sj5*x392))+((x394*x395))+(((0.999993006133494)*r00*x388))+(((-1.0)*x391*x392))+((x391*x398))+(((-1.0)*x384*x400))+x416+(((-0.0728695955625022)*x383*x386))+((sj3*x382*x390))+((x382*x402))+((x382*x404))+(((-1.0)*x415))+(((-1.0)*sj3*x383*x390))+(((0.0728695955625022)*x382*x386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x418=(cj1*cj5);
IkReal x419=((0.00238797124439986)*cj4);
IkReal x420=((0.0326831239315186)*sj4);
IkReal x421=(r02*sj4);
IkReal x422=((0.0728309674939976)*cj1);
IkReal x423=(r01*sj5);
IkReal x424=(cj5*sj1);
IkReal x425=((0.99680577906496)*sj4);
IkReal x426=((0.00238797124439986)*sj1);
IkReal x427=(r21*sj5);
IkReal x428=((0.0728309674939976)*cj4);
IkReal x429=(r22*sj4);
IkReal x430=((0.0728309674939976)*sj1);
IkReal x431=(cj4*sj1);
IkReal x432=((0.0326831239315186)*r22);
IkReal x433=((0.00238797124439986)*cj1);
IkReal x434=((0.0326831239315186)*cj4*r02);
IkReal x435=((0.99680577906496)*cj1*cj4);
if( IKabs((((x429*x430))+((sj1*x420*x423))+((cj1*x423*x425))+(((-1.0)*x421*x426))+(((-1.0)*x421*x422))+(((-1.0)*r00*x420*x424))+(((0.99680577906496)*r22*x431))+(((-1.0)*sj1*x425*x427))+(((-1.0)*sj1*x419*x423))+((r20*x424*x425))+((r20*x418*x419))+(((-1.0)*x429*x433))+(((-1.0)*cj1*x419*x427))+((r00*x418*x428))+((r00*x419*x424))+(((-0.0326831239315186)*r02*x431))+(((-1.0)*r20*x418*x420))+(((-1.0)*r02*x435))+(((-1.0)*cj1*cj4*x432))+(((-1.0)*r00*x418*x425))+((sj1*x427*x428))+((cj1*x420*x427))+(((-1.0)*r20*x424*x428))+(((-1.0)*cj4*x422*x423)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x422*x429))+((sj1*x420*x427))+((x421*x433))+(((-1.0)*r00*x424*x425))+((r20*x418*x428))+(((-1.0)*sj1*x423*x428))+((cj1*x434))+(((-1.0)*x421*x430))+(((-1.0)*sj1*x419*x427))+(((-1.0)*x431*x432))+((sj1*x423*x425))+((r00*x424*x428))+(((-0.99680577906496)*r02*x431))+((r00*x418*x420))+(((-1.0)*x426*x429))+(((-1.0)*r20*x418*x425))+((cj1*x419*x423))+((cj1*x425*x427))+(((-1.0)*r00*x418*x419))+(((-1.0)*r22*x435))+(((-1.0)*cj1*x420*x423))+((r20*x419*x424))+(((-1.0)*r20*x420*x424))+(((-1.0)*cj4*x422*x427)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x429*x430))+((sj1*x420*x423))+((cj1*x423*x425))+(((-1.0)*x421*x426))+(((-1.0)*x421*x422))+(((-1.0)*r00*x420*x424))+(((0.99680577906496)*r22*x431))+(((-1.0)*sj1*x425*x427))+(((-1.0)*sj1*x419*x423))+((r20*x424*x425))+((r20*x418*x419))+(((-1.0)*x429*x433))+(((-1.0)*cj1*x419*x427))+((r00*x418*x428))+((r00*x419*x424))+(((-0.0326831239315186)*r02*x431))+(((-1.0)*r20*x418*x420))+(((-1.0)*r02*x435))+(((-1.0)*cj1*cj4*x432))+(((-1.0)*r00*x418*x425))+((sj1*x427*x428))+((cj1*x420*x427))+(((-1.0)*r20*x424*x428))+(((-1.0)*cj4*x422*x423))))+IKsqr(((((-1.0)*x422*x429))+((sj1*x420*x427))+((x421*x433))+(((-1.0)*r00*x424*x425))+((r20*x418*x428))+(((-1.0)*sj1*x423*x428))+((cj1*x434))+(((-1.0)*x421*x430))+(((-1.0)*sj1*x419*x427))+(((-1.0)*x431*x432))+((sj1*x423*x425))+((r00*x424*x428))+(((-0.99680577906496)*r02*x431))+((r00*x418*x420))+(((-1.0)*x426*x429))+(((-1.0)*r20*x418*x425))+((cj1*x419*x423))+((cj1*x425*x427))+(((-1.0)*r00*x418*x419))+(((-1.0)*r22*x435))+(((-1.0)*cj1*x420*x423))+((r20*x419*x424))+(((-1.0)*r20*x420*x424))+(((-1.0)*cj4*x422*x427))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x429*x430))+((sj1*x420*x423))+((cj1*x423*x425))+(((-1.0)*x421*x426))+(((-1.0)*x421*x422))+(((-1.0)*r00*x420*x424))+(((0.99680577906496)*r22*x431))+(((-1.0)*sj1*x425*x427))+(((-1.0)*sj1*x419*x423))+((r20*x424*x425))+((r20*x418*x419))+(((-1.0)*x429*x433))+(((-1.0)*cj1*x419*x427))+((r00*x418*x428))+((r00*x419*x424))+(((-0.0326831239315186)*r02*x431))+(((-1.0)*r20*x418*x420))+(((-1.0)*r02*x435))+(((-1.0)*cj1*cj4*x432))+(((-1.0)*r00*x418*x425))+((sj1*x427*x428))+((cj1*x420*x427))+(((-1.0)*r20*x424*x428))+(((-1.0)*cj4*x422*x423))), ((((-1.0)*x422*x429))+((sj1*x420*x427))+((x421*x433))+(((-1.0)*r00*x424*x425))+((r20*x418*x428))+(((-1.0)*sj1*x423*x428))+((cj1*x434))+(((-1.0)*x421*x430))+(((-1.0)*sj1*x419*x427))+(((-1.0)*x431*x432))+((sj1*x423*x425))+((r00*x424*x428))+(((-0.99680577906496)*r02*x431))+((r00*x418*x420))+(((-1.0)*x426*x429))+(((-1.0)*r20*x418*x425))+((cj1*x419*x423))+((cj1*x425*x427))+(((-1.0)*r00*x418*x419))+(((-1.0)*r22*x435))+(((-1.0)*cj1*x420*x423))+((r20*x419*x424))+(((-1.0)*r20*x420*x424))+(((-1.0)*cj4*x422*x427))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x436=IKcos(j2);
IkReal x437=IKsin(j2);
IkReal x438=(cj5*r20);
IkReal x439=((0.997341439912743)*sj4);
IkReal x440=((0.0728701052062903)*cj4);
IkReal x441=(r01*sj5);
IkReal x442=(cj5*r00);
IkReal x443=(cj4*r02);
IkReal x444=((1.3955641253225e-7)*cj4);
IkReal x445=(cj3*sj4);
IkReal x446=((1.01965987338572e-8)*sj4);
IkReal x447=(sj3*sj5);
IkReal x448=(r21*sj5);
IkReal x449=((0.00373006819843503)*cj4);
IkReal x450=(cj5*r01);
IkReal x451=((0.0037400112430517)*cj3);
IkReal x452=((1.08150140232244e-9)*sj5);
IkReal x453=(r02*sj4);
IkReal x454=((0.00373006819843503)*sj3);
IkReal x455=(cj4*r22);
IkReal x456=(r22*sj4);
IkReal x457=((0.999993006133494)*sj3);
IkReal x458=((0.000272535012753886)*sj3);
IkReal x459=((0.0728695955625022)*cj3);
IkReal x460=(cj5*r21);
IkReal x461=(sj4*x458);
IkReal x462=(sj1*x436);
IkReal x463=((0.997334464639851)*cj3*cj4);
IkReal x464=(cj1*x437);
IkReal x465=(cj1*x436);
IkReal x466=(sj1*x437);
IkReal x467=((0.999462911269554)*x464);
IkReal x468=((0.999462911269554)*x462);
IkReal x469=((0.0327702455985164)*x466);
IkReal x470=((0.0327702455985164)*x465);
IkReal x471=((0.999462911269554)*x466);
IkReal x472=((0.999462911269554)*x465);
IkReal x473=((0.0327702455985164)*x462);
IkReal x474=((0.0327702455985164)*x464);
IkReal x475=(x474+x472+x473);
IkReal x476=(x469+x468+x467);
evalcond[0]=(((x439*x448))+(((-0.997341439912743)*x455))+(((-1.0)*x438*x439))+(((-1.0)*x475))+x471+(((-0.0728701052062903)*x456))+((x438*x440))+(((-1.0)*x440*x448)));
evalcond[1]=(((x439*x441))+(((-1.0)*x476))+(((-1.0)*x439*x442))+((x440*x442))+(((-0.997341439912743)*x443))+x470+(((-0.0728701052062903)*x453))+(((-1.0)*x440*x441)));
evalcond[2]=(((x446*x448))+(((6.25181902607023e-7)*x448))+(((-0.211036575236598)*x466))+(((-1.0)*x438*x446))+(((-1.0)*x438*x444))+(((-6.25181902607023e-7)*x438))+(((0.00691988466190158)*x464))+(((0.00691988466190158)*x462))+(((-1.01965987338572e-8)*x455))+(((0.211036575236598)*x465))+(((0.14998636)*cj1))+(((-1.0)*pz))+((x444*x448))+(((-1.08150140232244e-9)*x460))+(((1.3955641253225e-7)*x456))+(((-1.0)*r20*x452))+(((-0.00202253)*sj1)));
evalcond[3]=((((6.25181902607023e-7)*x441))+(((-6.25181902607023e-7)*x442))+(((0.00691988466190158)*x466))+(((-1.0)*r00*x452))+(((0.14998636)*sj1))+(((0.211036575236598)*x464))+(((0.211036575236598)*x462))+(((-1.0)*px))+((x441*x446))+((x441*x444))+(((-1.08150140232244e-9)*x450))+(((-1.01965987338572e-8)*x443))+(((1.3955641253225e-7)*x453))+(((-0.00691988466190158)*x465))+(((-1.0)*x442*x444))+(((-1.0)*x442*x446))+(((0.00202253)*cj1)));
evalcond[4]=(((x454*x456))+(((0.997334464639851)*r22*x445))+((r21*x447*x449))+(((0.000272535012753886)*r21*sj4*x447))+(((-1.0)*x470))+(((-1.0)*r20*sj5*x451))+(((-1.0)*sj3*x438*x449))+x476+(((-1.0)*x455*x459))+(((-1.0)*x455*x458))+((x448*x463))+(((-1.0)*x451*x460))+(((-1.0)*x438*x461))+(((-1.0)*x438*x463))+(((-0.0728695955625022)*x438*x445))+(((0.0728695955625022)*x445*x448))+((x457*x460))+(((0.999993006133494)*r20*x447)));
evalcond[5]=((((-1.0)*x443*x459))+(((-1.0)*x443*x458))+((x441*x463))+((x441*x461))+(((-1.0)*r00*sj5*x451))+(((-1.0)*sj3*x442*x449))+(((0.999993006133494)*r00*x447))+((x453*x454))+(((-1.0)*x475))+(((-0.0728695955625022)*x442*x445))+x471+(((-1.0)*x442*x461))+(((-1.0)*x442*x463))+(((-1.0)*x450*x451))+((x450*x457))+((sj3*x441*x449))+(((0.997334464639851)*r02*x445))+(((0.0728695955625022)*x441*x445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x477=(cj4*cj5);
IkReal x478=((0.00238797124439986)*cj1);
IkReal x479=(r10*sj1);
IkReal x480=(cj5*sj4);
IkReal x481=((0.0728309674939976)*cj4);
IkReal x482=((0.0326831239315186)*r20);
IkReal x483=((0.99680577906496)*cj1);
IkReal x484=(cj4*r12);
IkReal x485=(r21*sj5);
IkReal x486=((0.0326831239315186)*sj4);
IkReal x487=((0.99680577906496)*sj1);
IkReal x488=((0.00238797124439986)*sj1);
IkReal x489=(r12*sj4);
IkReal x490=((0.0728309674939976)*sj1);
IkReal x491=((0.0326831239315186)*sj1);
IkReal x492=((0.0728309674939976)*cj1);
IkReal x493=((0.0326831239315186)*cj1);
IkReal x494=(cj4*r22);
IkReal x495=(r11*sj5);
IkReal x496=(r22*sj4);
IkReal x497=(sj1*x495);
if( IKabs((((cj4*x488*x495))+(((-1.0)*r20*x477*x490))+(((0.0326831239315186)*x479*x480))+(((-1.0)*sj4*x483*x495))+(((-1.0)*cj4*x478*x485))+(((-1.0)*r10*x477*x492))+((r20*x477*x478))+(((-1.0)*x486*x497))+((x489*x492))+((x488*x489))+((x483*x484))+(((-1.0)*x493*x494))+((x490*x496))+((cj1*x485*x486))+(((-1.0)*cj1*x480*x482))+((sj1*x481*x485))+((cj1*x481*x495))+((x484*x491))+((r10*x480*x483))+(((-1.0)*sj4*x485*x487))+((r20*x480*x487))+((x487*x494))+(((-1.0)*x478*x496))+(((-0.00238797124439986)*x477*x479)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x484*x487))+(((-1.0)*x488*x496))+(((-1.0)*cj4*x485*x488))+(((0.99680577906496)*x479*x480))+(((-1.0)*x491*x494))+((r10*x477*x478))+(((-0.0728309674939976)*x477*x479))+((x489*x490))+((r20*x477*x488))+(((-1.0)*cj1*x481*x485))+(((-1.0)*x483*x494))+(((-1.0)*cj4*x478*x495))+((sj4*x483*x485))+(((-1.0)*r20*x480*x483))+((r20*x477*x492))+(((-1.0)*r10*x480*x493))+(((-1.0)*sj1*x480*x482))+(((-1.0)*sj4*x487*x495))+((x481*x497))+((cj1*x486*x495))+(((-1.0)*x484*x493))+((sj1*x485*x486))+(((-1.0)*x478*x489))+(((-1.0)*x492*x496)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x488*x495))+(((-1.0)*r20*x477*x490))+(((0.0326831239315186)*x479*x480))+(((-1.0)*sj4*x483*x495))+(((-1.0)*cj4*x478*x485))+(((-1.0)*r10*x477*x492))+((r20*x477*x478))+(((-1.0)*x486*x497))+((x489*x492))+((x488*x489))+((x483*x484))+(((-1.0)*x493*x494))+((x490*x496))+((cj1*x485*x486))+(((-1.0)*cj1*x480*x482))+((sj1*x481*x485))+((cj1*x481*x495))+((x484*x491))+((r10*x480*x483))+(((-1.0)*sj4*x485*x487))+((r20*x480*x487))+((x487*x494))+(((-1.0)*x478*x496))+(((-0.00238797124439986)*x477*x479))))+IKsqr((((x484*x487))+(((-1.0)*x488*x496))+(((-1.0)*cj4*x485*x488))+(((0.99680577906496)*x479*x480))+(((-1.0)*x491*x494))+((r10*x477*x478))+(((-0.0728309674939976)*x477*x479))+((x489*x490))+((r20*x477*x488))+(((-1.0)*cj1*x481*x485))+(((-1.0)*x483*x494))+(((-1.0)*cj4*x478*x495))+((sj4*x483*x485))+(((-1.0)*r20*x480*x483))+((r20*x477*x492))+(((-1.0)*r10*x480*x493))+(((-1.0)*sj1*x480*x482))+(((-1.0)*sj4*x487*x495))+((x481*x497))+((cj1*x486*x495))+(((-1.0)*x484*x493))+((sj1*x485*x486))+(((-1.0)*x478*x489))+(((-1.0)*x492*x496))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj4*x488*x495))+(((-1.0)*r20*x477*x490))+(((0.0326831239315186)*x479*x480))+(((-1.0)*sj4*x483*x495))+(((-1.0)*cj4*x478*x485))+(((-1.0)*r10*x477*x492))+((r20*x477*x478))+(((-1.0)*x486*x497))+((x489*x492))+((x488*x489))+((x483*x484))+(((-1.0)*x493*x494))+((x490*x496))+((cj1*x485*x486))+(((-1.0)*cj1*x480*x482))+((sj1*x481*x485))+((cj1*x481*x495))+((x484*x491))+((r10*x480*x483))+(((-1.0)*sj4*x485*x487))+((r20*x480*x487))+((x487*x494))+(((-1.0)*x478*x496))+(((-0.00238797124439986)*x477*x479))), (((x484*x487))+(((-1.0)*x488*x496))+(((-1.0)*cj4*x485*x488))+(((0.99680577906496)*x479*x480))+(((-1.0)*x491*x494))+((r10*x477*x478))+(((-0.0728309674939976)*x477*x479))+((x489*x490))+((r20*x477*x488))+(((-1.0)*cj1*x481*x485))+(((-1.0)*x483*x494))+(((-1.0)*cj4*x478*x495))+((sj4*x483*x485))+(((-1.0)*r20*x480*x483))+((r20*x477*x492))+(((-1.0)*r10*x480*x493))+(((-1.0)*sj1*x480*x482))+(((-1.0)*sj4*x487*x495))+((x481*x497))+((cj1*x486*x495))+(((-1.0)*x484*x493))+((sj1*x485*x486))+(((-1.0)*x478*x489))+(((-1.0)*x492*x496))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x498=IKcos(j2);
IkReal x499=IKsin(j2);
IkReal x500=(cj5*r20);
IkReal x501=((0.0728701052062903)*cj4);
IkReal x502=(cj5*r10);
IkReal x503=(sj4*sj5);
IkReal x504=((0.000272535012753886)*sj3);
IkReal x505=(r21*sj5);
IkReal x506=(cj3*cj4);
IkReal x507=(cj4*r12);
IkReal x508=((0.997341439912743)*sj4);
IkReal x509=((1.08150140232244e-9)*sj5);
IkReal x510=(r10*sj5);
IkReal x511=((0.999993006133494)*sj3);
IkReal x512=((1.08150140232244e-9)*cj5);
IkReal x513=(cj4*r22);
IkReal x514=((1.01965987338572e-8)*sj4);
IkReal x515=(r22*sj4);
IkReal x516=((0.0037400112430517)*cj3);
IkReal x517=(r11*sj5);
IkReal x518=((1.3955641253225e-7)*cj4);
IkReal x519=(cj5*r11);
IkReal x520=((0.00373006819843503)*sj3);
IkReal x521=(r12*sj4);
IkReal x522=((0.997334464639851)*cj3);
IkReal x523=(cj5*r21);
IkReal x524=(r20*sj5);
IkReal x525=((0.211036575236598)*x499);
IkReal x526=(sj1*x498);
IkReal x527=((0.0728695955625022)*cj3*sj4);
IkReal x528=(cj4*x520);
IkReal x529=(cj1*x499);
IkReal x530=(cj1*x498);
IkReal x531=(sj1*x499);
IkReal x532=((0.999462911269554)*x529);
IkReal x533=((0.999462911269554)*x526);
IkReal x534=((0.0327702455985164)*x531);
IkReal x535=((0.0327702455985164)*x530);
IkReal x536=((0.999462911269554)*x530);
IkReal x537=((0.0327702455985164)*x526);
IkReal x538=((0.0327702455985164)*x529);
IkReal x539=((0.999462911269554)*x531);
IkReal x540=(x537+x536+x538);
IkReal x541=(x533+x532+x534);
evalcond[0]=(((x500*x501))+(((-0.0728701052062903)*x515))+(((-1.0)*x501*x505))+(((-0.997341439912743)*x513))+(((-1.0)*x540))+x539+(((0.997341439912743)*r21*x503))+(((-1.0)*x500*x508)));
evalcond[1]=((((-1.0)*x501*x517))+(((-0.997341439912743)*x507))+(((-0.0728701052062903)*x521))+(((-1.0)*x502*x508))+(((-1.0)*x535))+((x501*x502))+x541+(((0.997341439912743)*r11*x503)));
evalcond[2]=((((-1.0)*r20*x509))+(((-1.01965987338572e-8)*x513))+(((0.211036575236598)*x530))+(((-1.0)*sj1*x525))+(((6.25181902607023e-7)*x505))+(((0.14998636)*cj1))+(((-6.25181902607023e-7)*x500))+(((-1.0)*x500*x514))+(((-1.0)*x500*x518))+(((1.3955641253225e-7)*x515))+(((-1.0)*pz))+(((-1.0)*r21*x512))+(((0.00691988466190158)*x529))+(((0.00691988466190158)*x526))+(((1.01965987338572e-8)*r21*x503))+((x505*x518))+(((-0.00202253)*sj1)));
evalcond[3]=((((-1.0)*x502*x518))+(((-1.0)*x502*x514))+(((-0.211036575236598)*x526))+(((-6.25181902607023e-7)*x502))+(((-1.0)*cj1*x525))+(((-0.00691988466190158)*x531))+(((1.01965987338572e-8)*r11*x503))+(((-1.0)*r11*x512))+(((-0.00202253)*cj1))+(((-0.14998636)*sj1))+(((-1.0)*py))+(((-1.0)*r10*x509))+((x517*x518))+(((0.00691988466190158)*x530))+(((-1.01965987338572e-8)*x507))+(((6.25181902607023e-7)*x517))+(((1.3955641253225e-7)*x521)));
evalcond[4]=((((0.997334464639851)*x505*x506))+(((-0.0728695955625022)*r22*x506))+(((-1.0)*x500*x528))+(((-1.0)*x500*x527))+(((-1.0)*sj4*x500*x504))+(((-1.0)*x504*x513))+((x515*x520))+((x515*x522))+(((-1.0)*x535))+(((-0.997334464639851)*x500*x506))+x541+(((-1.0)*x516*x524))+(((-1.0)*x516*x523))+((x511*x523))+((x511*x524))+((x505*x528))+(((0.0728695955625022)*cj3*r21*x503))+((r21*x503*x504)));
evalcond[5]=(((x511*x519))+((x510*x511))+(((-1.0)*x539))+((x517*x528))+(((-0.997334464639851)*x502*x506))+(((-1.0)*x502*x527))+(((-1.0)*x502*x528))+((r11*x503*x504))+((x521*x522))+(((-1.0)*x516*x519))+((x520*x521))+x540+(((0.997334464639851)*x506*x517))+(((-1.0)*x504*x507))+(((-0.0728695955625022)*r12*x506))+(((-1.0)*sj4*x502*x504))+(((-1.0)*x510*x516))+(((0.0728695955625022)*cj3*r11*x503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x542=(cj4*cj5);
IkReal x543=((0.00238797124439986)*cj1);
IkReal x544=(r10*sj1);
IkReal x545=(cj5*sj4);
IkReal x546=((0.0728309674939976)*cj4);
IkReal x547=((0.0326831239315186)*r20);
IkReal x548=((0.99680577906496)*cj1);
IkReal x549=(cj4*r12);
IkReal x550=(sj4*sj5);
IkReal x551=((0.99680577906496)*sj1);
IkReal x552=((0.00238797124439986)*sj1);
IkReal x553=((0.0326831239315186)*cj1);
IkReal x554=(r12*sj4);
IkReal x555=((0.0728309674939976)*sj1);
IkReal x556=((0.0326831239315186)*sj1);
IkReal x557=((0.0728309674939976)*cj1);
IkReal x558=(r21*sj5);
IkReal x559=(cj4*r22);
IkReal x560=(r11*sj5);
IkReal x561=(r22*sj4);
IkReal x562=(sj1*x560);
if( IKabs((((r20*x542*x543))+(((-1.0)*x543*x561))+((r20*x545*x551))+(((-1.0)*x554*x557))+(((0.00238797124439986)*x542*x544))+(((-1.0)*cj1*x545*x547))+(((-1.0)*x553*x559))+((r11*x550*x556))+(((-1.0)*x552*x554))+(((-1.0)*x549*x556))+(((-1.0)*cj4*x552*x560))+(((-1.0)*x548*x549))+((r10*x542*x557))+(((-1.0)*r21*x550*x551))+((x551*x559))+((r21*x550*x553))+(((-1.0)*cj1*x546*x560))+(((-1.0)*r10*x545*x548))+((sj1*x546*x558))+(((-1.0)*r20*x542*x555))+((x555*x561))+((r11*x548*x550))+(((-0.0326831239315186)*x544*x545))+(((-1.0)*cj4*x543*x558)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x556*x559))+(((-1.0)*cj1*x546*x558))+(((-1.0)*x552*x561))+(((-1.0)*x554*x555))+(((-1.0)*r20*x545*x548))+(((-1.0)*cj4*x552*x558))+((cj4*x543*x560))+(((-0.99680577906496)*x544*x545))+((r11*x550*x551))+(((-1.0)*sj1*x545*x547))+(((-1.0)*x546*x562))+(((-1.0)*x548*x559))+(((-1.0)*x557*x561))+(((-1.0)*r10*x542*x543))+(((-1.0)*r11*x550*x553))+(((-1.0)*x549*x551))+((x543*x554))+((x549*x553))+((r21*x550*x556))+(((0.0728309674939976)*x542*x544))+((r10*x545*x553))+((r20*x542*x552))+((r20*x542*x557))+((r21*x548*x550)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x542*x543))+(((-1.0)*x543*x561))+((r20*x545*x551))+(((-1.0)*x554*x557))+(((0.00238797124439986)*x542*x544))+(((-1.0)*cj1*x545*x547))+(((-1.0)*x553*x559))+((r11*x550*x556))+(((-1.0)*x552*x554))+(((-1.0)*x549*x556))+(((-1.0)*cj4*x552*x560))+(((-1.0)*x548*x549))+((r10*x542*x557))+(((-1.0)*r21*x550*x551))+((x551*x559))+((r21*x550*x553))+(((-1.0)*cj1*x546*x560))+(((-1.0)*r10*x545*x548))+((sj1*x546*x558))+(((-1.0)*r20*x542*x555))+((x555*x561))+((r11*x548*x550))+(((-0.0326831239315186)*x544*x545))+(((-1.0)*cj4*x543*x558))))+IKsqr(((((-1.0)*x556*x559))+(((-1.0)*cj1*x546*x558))+(((-1.0)*x552*x561))+(((-1.0)*x554*x555))+(((-1.0)*r20*x545*x548))+(((-1.0)*cj4*x552*x558))+((cj4*x543*x560))+(((-0.99680577906496)*x544*x545))+((r11*x550*x551))+(((-1.0)*sj1*x545*x547))+(((-1.0)*x546*x562))+(((-1.0)*x548*x559))+(((-1.0)*x557*x561))+(((-1.0)*r10*x542*x543))+(((-1.0)*r11*x550*x553))+(((-1.0)*x549*x551))+((x543*x554))+((x549*x553))+((r21*x550*x556))+(((0.0728309674939976)*x542*x544))+((r10*x545*x553))+((r20*x542*x552))+((r20*x542*x557))+((r21*x548*x550))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*x542*x543))+(((-1.0)*x543*x561))+((r20*x545*x551))+(((-1.0)*x554*x557))+(((0.00238797124439986)*x542*x544))+(((-1.0)*cj1*x545*x547))+(((-1.0)*x553*x559))+((r11*x550*x556))+(((-1.0)*x552*x554))+(((-1.0)*x549*x556))+(((-1.0)*cj4*x552*x560))+(((-1.0)*x548*x549))+((r10*x542*x557))+(((-1.0)*r21*x550*x551))+((x551*x559))+((r21*x550*x553))+(((-1.0)*cj1*x546*x560))+(((-1.0)*r10*x545*x548))+((sj1*x546*x558))+(((-1.0)*r20*x542*x555))+((x555*x561))+((r11*x548*x550))+(((-0.0326831239315186)*x544*x545))+(((-1.0)*cj4*x543*x558))), ((((-1.0)*x556*x559))+(((-1.0)*cj1*x546*x558))+(((-1.0)*x552*x561))+(((-1.0)*x554*x555))+(((-1.0)*r20*x545*x548))+(((-1.0)*cj4*x552*x558))+((cj4*x543*x560))+(((-0.99680577906496)*x544*x545))+((r11*x550*x551))+(((-1.0)*sj1*x545*x547))+(((-1.0)*x546*x562))+(((-1.0)*x548*x559))+(((-1.0)*x557*x561))+(((-1.0)*r10*x542*x543))+(((-1.0)*r11*x550*x553))+(((-1.0)*x549*x551))+((x543*x554))+((x549*x553))+((r21*x550*x556))+(((0.0728309674939976)*x542*x544))+((r10*x545*x553))+((r20*x542*x552))+((r20*x542*x557))+((r21*x548*x550))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x563=IKcos(j2);
IkReal x564=IKsin(j2);
IkReal x565=(cj5*r20);
IkReal x566=((0.0728701052062903)*cj4);
IkReal x567=(cj5*r10);
IkReal x568=(sj4*sj5);
IkReal x569=((0.000272535012753886)*sj3);
IkReal x570=(r21*sj5);
IkReal x571=(cj3*cj4);
IkReal x572=(cj4*r12);
IkReal x573=((0.997341439912743)*sj4);
IkReal x574=((1.08150140232244e-9)*sj5);
IkReal x575=(r10*sj5);
IkReal x576=((0.999993006133494)*sj3);
IkReal x577=((1.08150140232244e-9)*cj5);
IkReal x578=(cj4*r22);
IkReal x579=((1.01965987338572e-8)*sj4);
IkReal x580=(r22*sj4);
IkReal x581=((0.0037400112430517)*cj3);
IkReal x582=(r11*sj5);
IkReal x583=((1.3955641253225e-7)*cj4);
IkReal x584=(cj5*r11);
IkReal x585=((0.00373006819843503)*sj3);
IkReal x586=(r12*sj4);
IkReal x587=((0.997334464639851)*cj3);
IkReal x588=(cj5*r21);
IkReal x589=(r20*sj5);
IkReal x590=((0.211036575236598)*x564);
IkReal x591=(sj1*x563);
IkReal x592=((0.0728695955625022)*cj3*sj4);
IkReal x593=(cj4*x585);
IkReal x594=(cj1*x564);
IkReal x595=(cj1*x563);
IkReal x596=(sj1*x564);
IkReal x597=((0.999462911269554)*x594);
IkReal x598=((0.999462911269554)*x591);
IkReal x599=((0.0327702455985164)*x596);
IkReal x600=((0.0327702455985164)*x595);
IkReal x601=((0.999462911269554)*x596);
IkReal x602=((0.999462911269554)*x595);
IkReal x603=((0.0327702455985164)*x591);
IkReal x604=((0.0327702455985164)*x594);
IkReal x605=(x603+x602+x604);
IkReal x606=(x597+x599+x598);
evalcond[0]=((((-1.0)*x566*x570))+((x565*x566))+(((-0.0728701052062903)*x580))+(((-1.0)*x565*x573))+(((-0.997341439912743)*x578))+x601+(((-1.0)*x605))+(((0.997341439912743)*r21*x568)));
evalcond[1]=(((x566*x567))+(((-0.0728701052062903)*x586))+(((-0.997341439912743)*x572))+(((-1.0)*x567*x573))+x600+(((-1.0)*x606))+(((0.997341439912743)*r11*x568))+(((-1.0)*x566*x582)));
evalcond[2]=((((0.14998636)*cj1))+(((-1.0)*sj1*x590))+(((1.01965987338572e-8)*r21*x568))+(((-1.0)*x565*x579))+(((-1.0)*pz))+(((6.25181902607023e-7)*x570))+(((-6.25181902607023e-7)*x565))+((x570*x583))+(((-1.0)*x565*x583))+(((-1.0)*r21*x577))+(((1.3955641253225e-7)*x580))+(((-1.0)*r20*x574))+(((-0.00202253)*sj1))+(((0.00691988466190158)*x591))+(((0.00691988466190158)*x594))+(((0.211036575236598)*x595))+(((-1.01965987338572e-8)*x578)));
evalcond[3]=((((-1.0)*r10*x574))+(((6.25181902607023e-7)*x582))+(((-1.0)*r11*x577))+((x582*x583))+(((1.01965987338572e-8)*r11*x568))+(((0.14998636)*sj1))+((cj1*x590))+(((-1.0)*py))+(((-6.25181902607023e-7)*x567))+(((-1.0)*x567*x579))+(((1.3955641253225e-7)*x586))+(((0.00691988466190158)*x596))+(((-1.0)*x567*x583))+(((0.211036575236598)*x591))+(((-1.01965987338572e-8)*x572))+(((-0.00691988466190158)*x595))+(((0.00202253)*cj1)));
evalcond[4]=((((-1.0)*x569*x578))+((x570*x593))+(((-1.0)*x565*x593))+(((-1.0)*x565*x592))+((x580*x585))+((x580*x587))+(((-0.0728695955625022)*r22*x571))+((r21*x568*x569))+(((0.0728695955625022)*cj3*r21*x568))+(((-0.997334464639851)*x565*x571))+x606+(((-1.0)*sj4*x565*x569))+(((-1.0)*x600))+(((0.997334464639851)*x570*x571))+((x576*x588))+((x576*x589))+(((-1.0)*x581*x589))+(((-1.0)*x581*x588)));
evalcond[5]=((((-1.0)*x569*x572))+(((-0.997334464639851)*x567*x571))+(((-1.0)*x567*x593))+(((-1.0)*x567*x592))+((r11*x568*x569))+((x575*x576))+((x586*x587))+((x585*x586))+(((-0.0728695955625022)*r12*x571))+x601+((x582*x593))+(((-1.0)*x605))+(((-1.0)*x575*x581))+(((-1.0)*sj4*x567*x569))+((x576*x584))+(((0.0728695955625022)*cj3*r11*x568))+(((0.997334464639851)*x571*x582))+(((-1.0)*x581*x584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x607=((0.99680577906496)*sj4);
IkReal x608=((0.0728309674939976)*cj4);
IkReal x609=((0.00238797124439986)*cj1);
IkReal x610=(r22*sj0);
IkReal x611=(cj4*cj5);
IkReal x612=((0.0326831239315186)*sj4);
IkReal x613=(r12*sj1);
IkReal x614=((0.99680577906496)*cj4);
IkReal x615=((0.00238797124439986)*cj4);
IkReal x616=((0.0728309674939976)*sj4);
IkReal x617=((0.00238797124439986)*sj4);
IkReal x618=((0.0326831239315186)*cj4);
IkReal x619=(cj1*r12);
IkReal x620=(r20*sj0);
IkReal x621=(r11*sj5);
IkReal x622=(cj5*r10*sj1);
IkReal x623=(sj1*x621);
IkReal x624=(cj1*x614);
IkReal x625=(r21*sj0*sj5);
IkReal x626=(cj5*x620);
IkReal x627=(cj1*cj5*r10);
CheckValue<IkReal> x628 = IKatan2WithCheck(IkReal((((sj4*x609*x610))+(((-1.0)*x614*x619))+((sj1*x608*x626))+(((-1.0)*sj1*x610*x614))+(((-1.0)*sj1*x610*x616))+((cj1*x610*x618))+(((-1.0)*cj1*x608*x621))+(((-1.0)*x607*x627))+(((-1.0)*sj1*x608*x625))+(((0.00238797124439986)*r10*sj1*x611))+(((-1.0)*cj1*x612*x625))+((x612*x623))+((x608*x627))+((cj1*x607*x621))+(((-1.0)*x612*x622))+(((-1.0)*x613*x618))+(((-1.0)*x613*x617))+((cj1*x612*x626))+(((-1.0)*sj1*x607*x626))+(((-1.0)*x609*x611*x620))+(((-1.0)*x615*x623))+(((-1.0)*x616*x619))+((cj4*x609*x625))+((sj1*x607*x625)))),IkReal(((((-1.0)*r10*x609*x611))+((r12*sj4*x609))+((cj1*x610*x616))+(((-1.0)*cj1*x608*x626))+(((-1.0)*x607*x622))+(((-1.0)*cj1*x607*x625))+(((-1.0)*cj1*x612*x621))+((x612*x627))+((sj1*x610*x618))+((sj1*x610*x617))+(((-1.0)*sj1*x612*x625))+((sj1*x615*x625))+((x608*x622))+((cj1*x607*x626))+(((-0.00238797124439986)*sj1*x611*x620))+(((-1.0)*x613*x614))+(((-1.0)*x613*x616))+((sj1*x612*x626))+((cj1*x608*x625))+((x610*x624))+((x618*x619))+((cj4*x609*x621))+((x607*x623))+(((-1.0)*x608*x623)))),IKFAST_ATAN2_MAGTHRESH);
if(!x628.valid){
continue;
}
CheckValue<IkReal> x629=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x629.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x628.value)+(((-1.5707963267949)*(x629.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x630=IKcos(j2);
IkReal x631=IKsin(j2);
IkReal x632=(cj3*cj5);
IkReal x633=(sj3*sj5);
IkReal x634=((0.000272535012753886)*sj4);
IkReal x635=(cj4*r02);
IkReal x636=((0.00373006819843503)*cj4);
IkReal x637=(cj5*r00);
IkReal x638=((1.3955641253225e-7)*cj4);
IkReal x639=((0.0728695955625022)*sj4);
IkReal x640=((1.01965987338572e-8)*sj4);
IkReal x641=(r01*sj5);
IkReal x642=(cj5*r20);
IkReal x643=((0.211036575236598)*sj0);
IkReal x644=(r21*sj5);
IkReal x645=((0.997334464639851)*cj3);
IkReal x646=(cj4*r12);
IkReal x647=((0.0728701052062903)*cj4);
IkReal x648=((0.211036575236598)*cj0);
IkReal x649=(cj0*sj1);
IkReal x650=((0.997341439912743)*sj4);
IkReal x651=((1.08150140232244e-9)*sj5);
IkReal x652=(r02*sj4);
IkReal x653=((1.08150140232244e-9)*cj5);
IkReal x654=((0.000272535012753886)*sj3);
IkReal x655=((0.999462911269554)*cj0);
IkReal x656=(cj4*r22);
IkReal x657=((0.0327702455985164)*cj0);
IkReal x658=(cj5*r10);
IkReal x659=(r12*sj4);
IkReal x660=((0.997334464639851)*cj4);
IkReal x661=((0.999462911269554)*sj0);
IkReal x662=(r22*sj4);
IkReal x663=(r11*sj5);
IkReal x664=(sj0*sj1);
IkReal x665=((0.0327702455985164)*sj0);
IkReal x666=((0.0728695955625022)*cj3);
IkReal x667=((0.00202253)*cj1);
IkReal x668=(cj5*x647);
IkReal x669=(sj1*x630);
IkReal x670=(cj1*x631);
IkReal x671=((0.00373006819843503)*sj3*sj4);
IkReal x672=((0.00691988466190158)*x631);
IkReal x673=(sj1*x631);
IkReal x674=((0.999993006133494)*cj5*sj3);
IkReal x675=((0.0037400112430517)*cj3*sj5);
IkReal x676=(cj1*x630);
IkReal x677=(sj0*x676);
evalcond[0]=((((-0.0327702455985164)*x669))+(((-0.997341439912743)*x656))+(((-1.0)*x642*x650))+((x644*x650))+(((-1.0)*x644*x647))+(((-0.0327702455985164)*x670))+(((-0.0728701052062903)*x662))+(((-0.999462911269554)*x676))+(((0.999462911269554)*x673))+((x642*x647)));
evalcond[1]=((((-0.0728701052062903)*x652))+(((-1.0)*x657*x676))+(((0.999462911269554)*x630*x649))+(((-1.0)*x641*x647))+(((-0.997341439912743)*x635))+((x637*x647))+((x655*x670))+((x641*x650))+(((0.0327702455985164)*x631*x649))+(((-1.0)*x637*x650)));
evalcond[2]=((((-0.0728701052062903)*x659))+((x647*x658))+(((-1.0)*x647*x663))+((x661*x670))+(((-0.997341439912743)*x646))+(((-1.0)*x665*x676))+((x661*x669))+(((-1.0)*x650*x658))+(((0.0327702455985164)*x631*x664))+((x650*x663)));
evalcond[3]=((((0.00691988466190158)*x670))+((x638*x644))+(((-1.01965987338572e-8)*x656))+(((6.25181902607023e-7)*x644))+(((0.211036575236598)*x676))+(((-6.25181902607023e-7)*x642))+(((-1.0)*x640*x642))+(((0.14998636)*cj1))+(((-0.211036575236598)*x673))+((x640*x644))+(((-1.0)*pz))+(((0.00691988466190158)*x669))+(((-1.0)*r20*x651))+(((1.3955641253225e-7)*x662))+(((-0.00202253)*sj1))+(((-1.0)*r21*x653))+(((-1.0)*x638*x642)));
evalcond[4]=(((r21*x674))+(((0.999993006133494)*r20*x633))+((x645*x662))+(((-1.0)*r20*x675))+((cj3*x639*x644))+(((-0.0037400112430517)*r21*x632))+(((0.0327702455985164)*x673))+((cj4*x644*x645))+(((0.00373006819843503)*sj3*x662))+((r21*x633*x636))+((r21*x633*x634))+(((-1.0)*x656*x666))+(((-1.0)*r20*x632*x639))+(((-0.0327702455985164)*x676))+(((-1.0)*sj3*x636*x642))+(((-1.0)*r20*x632*x660))+(((0.999462911269554)*x670))+(((0.999462911269554)*x669))+(((-1.0)*x654*x656))+(((-1.0)*sj3*x634*x642)));
evalcond[5]=((((-1.0)*cj0*x667))+(((-1.0)*x648*x669))+((x638*x641))+(((6.25181902607023e-7)*x641))+(((1.3955641253225e-7)*x652))+(((-0.14998636)*x649))+(((-1.0)*x648*x670))+(((-1.0)*x649*x672))+(((-1.0)*x637*x638))+(((-1.0)*r00*x651))+(((-6.25181902607023e-7)*x637))+(((-1.0)*r01*x653))+((x640*x641))+(((-1.0)*px))+(((0.00691988466190158)*cj0*x676))+(((-1.01965987338572e-8)*x635))+(((-1.0)*x637*x640)));
evalcond[6]=((((0.00691988466190158)*x677))+(((-1.0)*x643*x670))+(((-6.25181902607023e-7)*x658))+(((-1.0)*x640*x658))+(((-1.0)*r11*x653))+(((1.3955641253225e-7)*x659))+(((-1.01965987338572e-8)*x646))+((x640*x663))+(((-1.0)*x664*x672))+(((-1.0)*py))+(((-1.0)*r10*x651))+(((-1.0)*x643*x669))+(((-0.14998636)*x664))+(((-1.0)*sj0*x667))+((x638*x663))+(((6.25181902607023e-7)*x663))+(((-1.0)*x638*x658)));
evalcond[7]=((((0.0327702455985164)*x630*x649))+(((-1.0)*r00*x632*x639))+((r01*x674))+(((0.00373006819843503)*sj3*x652))+(((0.999993006133494)*r00*x633))+((cj3*x639*x641))+(((-0.0037400112430517)*r01*x632))+((x645*x652))+(((-1.0)*x635*x666))+((x655*x676))+(((-1.0)*sj3*x634*x637))+(((-1.0)*x635*x654))+((cj4*x641*x645))+(((-1.0)*sj3*x636*x637))+(((-0.999462911269554)*x631*x649))+((x657*x670))+(((-1.0)*r00*x675))+(((-1.0)*r00*x632*x660))+((r01*x633*x636))+((r01*x633*x634)));
evalcond[8]=((((0.999993006133494)*r10*x633))+((x661*x676))+((x665*x670))+((cj3*x639*x663))+(((0.00373006819843503)*sj3*x659))+((r11*x674))+(((-1.0)*x646*x654))+((x645*x659))+((cj4*x645*x663))+(((-1.0)*sj3*x636*x658))+(((-1.0)*r10*x632*x660))+(((0.0327702455985164)*x630*x664))+(((-1.0)*r10*x675))+(((-1.0)*r10*x632*x639))+((r11*x633*x636))+((r11*x633*x634))+(((-0.0037400112430517)*r11*x632))+(((-1.0)*sj3*x634*x658))+(((-1.0)*x661*x673))+(((-1.0)*x646*x666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x678=(cj1*sj4);
IkReal x679=((0.0326831239315186)*cj5);
IkReal x680=((0.0728309674939976)*r02);
IkReal x681=((0.0326831239315186)*sj1);
IkReal x682=(cj0*r20);
IkReal x683=(sj1*sj4);
IkReal x684=((0.00238797124439986)*r02);
IkReal x685=((0.99680577906496)*cj1);
IkReal x686=(cj4*sj1);
IkReal x687=((0.00238797124439986)*cj5);
IkReal x688=(cj4*r02);
IkReal x689=((0.0326831239315186)*cj1);
IkReal x690=(r01*sj5);
IkReal x691=((0.0728309674939976)*cj5);
IkReal x692=(cj5*r00);
IkReal x693=(cj0*r22);
IkReal x694=(cj1*cj4);
IkReal x695=((0.99680577906496)*cj5);
IkReal x696=(cj4*x693);
IkReal x697=(cj0*r21*sj5);
IkReal x698=((0.0728309674939976)*x694);
CheckValue<IkReal> x699 = IKatan2WithCheck(IkReal(((((-0.99680577906496)*x678*x692))+(((-1.0)*x685*x688))+(((-1.0)*r00*x679*x683))+(((0.99680577906496)*x678*x690))+(((-1.0)*x681*x688))+((x689*x696))+(((0.00238797124439986)*x694*x697))+((x682*x686*x691))+(((-1.0)*x678*x680))+(((-0.0326831239315186)*x678*x697))+(((-0.00238797124439986)*x686*x690))+(((-0.0728309674939976)*x686*x697))+(((0.99680577906496)*x683*x697))+(((-0.99680577906496)*x686*x693))+((sj4*x681*x690))+((x678*x679*x682))+(((-0.0728309674939976)*x683*x693))+(((0.00238797124439986)*x678*x693))+(((-1.0)*x690*x698))+(((-1.0)*x683*x684))+(((-1.0)*x682*x687*x694))+(((-1.0)*x682*x683*x695))+((r00*x686*x687))+((r00*x691*x694)))),IkReal(((((-0.99680577906496)*x678*x697))+((x678*x684))+((r00*x678*x679))+(((-1.0)*x680*x683))+((x688*x689))+((x697*x698))+(((0.00238797124439986)*x683*x693))+(((0.00238797124439986)*x690*x694))+(((-0.99680577906496)*x683*x692))+(((-1.0)*x682*x686*x687))+(((-0.0326831239315186)*x678*x690))+(((-1.0)*sj4*x681*x697))+(((-0.0728309674939976)*x686*x690))+((x681*x696))+((x679*x682*x683))+(((0.99680577906496)*x683*x690))+((r00*x686*x691))+(((-0.99680577906496)*r02*x686))+(((0.0728309674939976)*x678*x693))+((x685*x696))+((x678*x682*x695))+(((-1.0)*x682*x691*x694))+(((-1.0)*r00*x687*x694))+(((0.00238797124439986)*x686*x697)))),IKFAST_ATAN2_MAGTHRESH);
if(!x699.valid){
continue;
}
CheckValue<IkReal> x700=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x700.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x699.value)+(((-1.5707963267949)*(x700.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x701=IKcos(j2);
IkReal x702=IKsin(j2);
IkReal x703=(cj3*cj5);
IkReal x704=(sj3*sj5);
IkReal x705=((0.000272535012753886)*sj4);
IkReal x706=(cj4*r02);
IkReal x707=((0.00373006819843503)*cj4);
IkReal x708=(cj5*r00);
IkReal x709=((1.3955641253225e-7)*cj4);
IkReal x710=((0.0728695955625022)*sj4);
IkReal x711=((1.01965987338572e-8)*sj4);
IkReal x712=(r01*sj5);
IkReal x713=(cj5*r20);
IkReal x714=((0.211036575236598)*sj0);
IkReal x715=(r21*sj5);
IkReal x716=((0.997334464639851)*cj3);
IkReal x717=(cj4*r12);
IkReal x718=((0.0728701052062903)*cj4);
IkReal x719=((0.211036575236598)*cj0);
IkReal x720=(cj0*sj1);
IkReal x721=((0.997341439912743)*sj4);
IkReal x722=((1.08150140232244e-9)*sj5);
IkReal x723=(r02*sj4);
IkReal x724=((1.08150140232244e-9)*cj5);
IkReal x725=((0.000272535012753886)*sj3);
IkReal x726=((0.999462911269554)*cj0);
IkReal x727=(cj4*r22);
IkReal x728=((0.0327702455985164)*cj0);
IkReal x729=(cj5*r10);
IkReal x730=(r12*sj4);
IkReal x731=((0.997334464639851)*cj4);
IkReal x732=((0.999462911269554)*sj0);
IkReal x733=(r22*sj4);
IkReal x734=(r11*sj5);
IkReal x735=(sj0*sj1);
IkReal x736=((0.0327702455985164)*sj0);
IkReal x737=((0.0728695955625022)*cj3);
IkReal x738=((0.00202253)*cj1);
IkReal x739=(cj5*x718);
IkReal x740=(sj1*x701);
IkReal x741=(cj1*x702);
IkReal x742=((0.00373006819843503)*sj3*sj4);
IkReal x743=((0.00691988466190158)*x702);
IkReal x744=(sj1*x702);
IkReal x745=((0.999993006133494)*cj5*sj3);
IkReal x746=((0.0037400112430517)*cj3*sj5);
IkReal x747=(cj1*x701);
IkReal x748=(sj0*x747);
evalcond[0]=((((-1.0)*x713*x721))+(((-0.999462911269554)*x747))+(((-0.997341439912743)*x727))+(((-0.0327702455985164)*x741))+(((-0.0327702455985164)*x740))+(((-0.0728701052062903)*x733))+((x713*x718))+((x715*x721))+(((0.999462911269554)*x744))+(((-1.0)*x715*x718)));
evalcond[1]=(((x712*x721))+((x726*x741))+(((-1.0)*x728*x747))+(((-1.0)*x712*x718))+(((-0.0728701052062903)*x723))+(((0.999462911269554)*x701*x720))+((x708*x718))+(((-1.0)*x708*x721))+(((0.0327702455985164)*x702*x720))+(((-0.997341439912743)*x706)));
evalcond[2]=((((0.0327702455985164)*x702*x735))+((x721*x734))+((x732*x741))+((x732*x740))+(((-1.0)*x721*x729))+((x718*x729))+(((-1.0)*x718*x734))+(((-0.0728701052062903)*x730))+(((-1.0)*x736*x747))+(((-0.997341439912743)*x717)));
evalcond[3]=((((-1.0)*x711*x713))+(((0.211036575236598)*x747))+(((6.25181902607023e-7)*x715))+(((-0.211036575236598)*x744))+(((1.3955641253225e-7)*x733))+(((0.00691988466190158)*x741))+(((0.00691988466190158)*x740))+((x711*x715))+(((0.14998636)*cj1))+(((-1.0)*x709*x713))+((x709*x715))+(((-1.0)*pz))+(((-6.25181902607023e-7)*x713))+(((-1.01965987338572e-8)*x727))+(((-1.0)*r21*x724))+(((-1.0)*r20*x722))+(((-0.00202253)*sj1)));
evalcond[4]=((((-1.0)*r20*x746))+(((-0.0037400112430517)*r21*x703))+(((-1.0)*x727*x737))+((cj4*x715*x716))+(((-1.0)*sj3*x705*x713))+(((-1.0)*x725*x727))+((r21*x704*x707))+((r21*x704*x705))+((cj3*x710*x715))+((r21*x745))+(((-1.0)*r20*x703*x731))+(((-1.0)*r20*x703*x710))+(((-1.0)*sj3*x707*x713))+(((-0.0327702455985164)*x747))+(((0.0327702455985164)*x744))+((x716*x733))+(((0.00373006819843503)*sj3*x733))+(((0.999993006133494)*r20*x704))+(((0.999462911269554)*x740))+(((0.999462911269554)*x741)));
evalcond[5]=((((-1.0)*r00*x722))+(((0.00691988466190158)*cj0*x747))+(((-0.14998636)*x720))+(((6.25181902607023e-7)*x712))+(((1.3955641253225e-7)*x723))+(((-1.0)*cj0*x738))+((x711*x712))+((x709*x712))+(((-1.0)*px))+(((-1.0)*x719*x740))+(((-1.0)*x719*x741))+(((-6.25181902607023e-7)*x708))+(((-1.0)*x708*x711))+(((-1.01965987338572e-8)*x706))+(((-1.0)*x708*x709))+(((-1.0)*r01*x724))+(((-1.0)*x720*x743)));
evalcond[6]=((((6.25181902607023e-7)*x734))+(((-0.14998636)*x735))+(((-1.0)*x709*x729))+(((-1.0)*sj0*x738))+(((1.3955641253225e-7)*x730))+(((0.00691988466190158)*x748))+((x711*x734))+((x709*x734))+(((-1.0)*x714*x741))+(((-1.0)*x714*x740))+(((-1.0)*py))+(((-6.25181902607023e-7)*x729))+(((-1.0)*r10*x722))+(((-1.01965987338572e-8)*x717))+(((-1.0)*r11*x724))+(((-1.0)*x735*x743))+(((-1.0)*x711*x729)));
evalcond[7]=(((x726*x747))+(((-0.0037400112430517)*r01*x703))+((cj4*x712*x716))+(((-1.0)*sj3*x705*x708))+(((0.0327702455985164)*x701*x720))+(((-0.999462911269554)*x702*x720))+(((0.999993006133494)*r00*x704))+(((-1.0)*r00*x703*x731))+((cj3*x710*x712))+(((-1.0)*r00*x746))+(((-1.0)*r00*x703*x710))+((r01*x745))+(((0.00373006819843503)*sj3*x723))+(((-1.0)*sj3*x707*x708))+(((-1.0)*x706*x737))+((x728*x741))+((x716*x723))+((r01*x704*x707))+((r01*x704*x705))+(((-1.0)*x706*x725)));
evalcond[8]=((((-1.0)*sj3*x705*x729))+(((-1.0)*r10*x703*x731))+(((-1.0)*r10*x703*x710))+(((-1.0)*x717*x725))+((r11*x704*x707))+((r11*x704*x705))+(((-1.0)*x717*x737))+(((-1.0)*x732*x744))+(((-0.0037400112430517)*r11*x703))+((r11*x745))+(((-1.0)*r10*x746))+(((0.0327702455985164)*x701*x735))+((cj3*x710*x734))+((x732*x747))+(((0.999993006133494)*r10*x704))+(((-1.0)*sj3*x707*x729))+((cj4*x716*x734))+((x716*x730))+(((0.00373006819843503)*sj3*x730))+((x736*x741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x749=((0.999993006133494)*sj5);
IkReal x750=(cj4*sj5);
IkReal x751=((0.0728695955625022)*cj4);
IkReal x752=(cj5*r10);
IkReal x753=((0.00373006819843503)*cj4);
IkReal x754=((0.0728695955625022)*sj4);
IkReal x755=((0.000272535012753886)*sj4);
IkReal x756=((0.00373006819843503)*sj4);
IkReal x757=((0.0037400112430517)*sj5);
IkReal x758=((0.0037400112430517)*cj5);
IkReal x759=((0.997334464639851)*sj4);
IkReal x760=(cj5*r20);
IkReal x761=(r11*sj5);
IkReal x762=(r21*sj5);
IkReal x763=((0.999993006133494)*cj5);
IkReal x764=((0.000272535012753886)*cj4);
IkReal x765=((0.997334464639851)*cj4);
IkReal x766=(sj4*x760);
IkReal x767=(((r22*x759))+(((0.997334464639851)*r21*x750))+((x754*x762)));
IkReal x768=(((r22*x751))+((x760*x765))+((r21*x758))+((r20*x757))+((x754*x760)));
IkReal x769=((((-1.0)*r20*x749))+(((-1.0)*x755*x762))+(((-1.0)*r21*x763))+(((-0.00373006819843503)*r21*x750))+(((-1.0)*r22*x756))+((r22*x764))+((x755*x760))+((x753*x760)));
CheckValue<IkReal> x770=IKPowWithIntegerCheck(IKsign(((((((((-1.0)*x767))+x768))*((((x752*x753))+((x752*x755))+(((-1.0)*x755*x761))+(((-1.0)*r12*x756))+(((-1.0)*r10*x749))+(((-1.0)*r11*x763))+(((-0.00373006819843503)*r11*x750))+((r12*x764))))))+((x769*(((((-1.0)*x752*x765))+(((0.997334464639851)*r11*x750))+(((-1.0)*r10*x757))+(((-1.0)*r11*x758))+(((-1.0)*r12*x751))+((r12*x759))+(((-1.0)*x752*x754))+((x754*x761)))))))),-1);
if(!x770.valid){
continue;
}
CheckValue<IkReal> x771 = IKatan2WithCheck(IkReal((cj0*x769)),IkReal(((-1.0)*cj0*(((((-1.0)*x768))+x767)))),IKFAST_ATAN2_MAGTHRESH);
if(!x771.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x770.value)))+(x771.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x772=IKsin(j3);
IkReal x773=IKcos(j3);
IkReal x774=((0.00373006819843503)*cj4);
IkReal x775=(r01*sj5);
IkReal x776=((0.999993006133494)*sj5);
IkReal x777=((0.0728695955625022)*cj4);
IkReal x778=((0.0037400112430517)*cj5);
IkReal x779=(cj5*r10);
IkReal x780=((0.0728695955625022)*sj4);
IkReal x781=(r11*sj5);
IkReal x782=((0.997334464639851)*cj4);
IkReal x783=((0.000272535012753886)*sj4);
IkReal x784=((0.00373006819843503)*sj4);
IkReal x785=((0.000272535012753886)*cj4);
IkReal x786=((0.0037400112430517)*sj5);
IkReal x787=(cj5*r00);
IkReal x788=(r21*sj5);
IkReal x789=((0.997334464639851)*sj4);
IkReal x790=(cj5*r20);
IkReal x791=((0.999993006133494)*cj5);
IkReal x792=(sj4*x790);
evalcond[0]=(((x773*(((((-1.0)*r20*x776))+((x774*x790))+((x783*x790))+(((-1.0)*r21*x791))+((r22*x785))+(((-1.0)*r22*x784))+(((-1.0)*x774*x788))+(((-1.0)*x783*x788))))))+((x772*((((x782*x788))+(((-1.0)*r22*x777))+(((-1.0)*r20*x786))+((r22*x789))+(((-1.0)*x782*x790))+((x780*x788))+(((-1.0)*x780*x790))+(((-1.0)*r21*x778)))))));
evalcond[1]=(sj0+((x773*(((((-1.0)*x774*x775))+((x774*x787))+(((-1.0)*x775*x783))+(((-1.0)*r01*x791))+((x783*x787))+((r02*x785))+(((-1.0)*r00*x776))+(((-1.0)*r02*x784))))))+((x772*(((((-1.0)*r00*x786))+((x775*x782))+((x775*x780))+((r02*x789))+(((-1.0)*r02*x777))+(((-1.0)*r01*x778))+(((-1.0)*x782*x787))+(((-1.0)*x780*x787)))))));
evalcond[2]=(((x772*((((x781*x782))+(((-1.0)*r11*x778))+(((-1.0)*r12*x777))+(((-1.0)*r10*x786))+((x780*x781))+((r12*x789))+(((-1.0)*x779*x780))+(((-1.0)*x779*x782))))))+((x773*((((x774*x779))+(((-1.0)*x781*x783))+(((-1.0)*r10*x776))+((x779*x783))+(((-1.0)*r12*x784))+(((-1.0)*r11*x791))+(((-1.0)*x774*x781))+((r12*x785))))))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[8+1], zeror[8];
int numroots;
IkReal x793=(r21*sj5);
IkReal x794=(cj5*r20);
IkReal x795=((1.3955641253225e-7)*cj4);
IkReal x796=((1.01965987338572e-8)*sj4);
IkReal x797=((0.0728701052062903)*cj4);
IkReal x798=(cj4*r22);
IkReal x799=(r22*sj4);
IkReal x800=((0.997341439912743)*sj4);
IkReal x801=((1.3955641253225e-7)*x799);
IkReal x802=((6.25181902607023e-7)*x793);
IkReal x803=(x794*x797);
IkReal x804=(x793*x800);
IkReal x805=(x793*x795);
IkReal x806=(x793*x796);
IkReal x807=(x804+x803);
IkReal x808=(((x793*x797))+(((0.0728701052062903)*x799))+((x794*x800))+(((0.997341439912743)*x798)));
IkReal x809=(x805+x806+x801+x802);
IkReal x810=((((1.08150140232244e-9)*r20*sj5))+(((6.25181902607023e-7)*x794))+(((1.01965987338572e-8)*x798))+(((1.0)*pz))+((x794*x796))+((x794*x795))+(((1.08150140232244e-9)*cj5*r21)));
IkReal x811=((-0.999462911269554)+x807+(((-1.0)*x808)));
IkReal x812=((0.999462911269554)+x807+(((-1.0)*x808)));
IkReal x813=((0.361022935236598)+(((-1.0)*x810))+x809);
IkReal x814=((-0.0610502152365978)+(((-1.0)*x810))+x809);
IkReal x815=((-0.361022935236598)+(((-1.0)*x810))+x809);
IkReal x816=((0.0610502152365977)+(((-1.0)*x810))+x809);
IkReal gconst0=x811;
IkReal gconst1=x812;
IkReal gconst2=x813;
IkReal gconst3=0.0138397693238032;
IkReal gconst4=x814;
IkReal gconst5=x811;
IkReal gconst6=x812;
IkReal gconst7=x813;
IkReal gconst8=0.0138397693238032;
IkReal gconst9=x814;
IkReal gconst10=0.00979470932380316;
IkReal gconst11=-0.844146300946391;
IkReal gconst12=-0.0178848293238032;
IkReal gconst13=0.00979470932380316;
IkReal gconst14=-0.844146300946391;
IkReal gconst15=-0.0178848293238032;
IkReal gconst16=x812;
IkReal gconst17=x811;
IkReal gconst18=x815;
IkReal gconst19=-0.0138397693238032;
IkReal gconst20=x816;
IkReal gconst21=x812;
IkReal gconst22=x811;
IkReal gconst23=x815;
IkReal gconst24=-0.0138397693238032;
IkReal gconst25=x816;
IkReal x817=((0.0655404911970328)*gconst13);
IkReal x818=(gconst20*gconst22);
IkReal x819=(gconst1*gconst5);
IkReal x820=(gconst14*gconst3);
IkReal x821=((0.0655404911970328)*gconst24);
IkReal x822=(gconst19*gconst21);
IkReal x823=(gconst1*gconst11);
IkReal x824=(gconst15*gconst21);
IkReal x825=((1.0)*gconst12);
IkReal x826=(gconst2*gconst25);
IkReal x827=(gconst16*gconst23);
IkReal x828=(gconst13*gconst16);
IkReal x829=(gconst6*gconst7);
IkReal x830=((1.0)*gconst1);
IkReal x831=(gconst11*gconst17);
IkReal x832=(gconst17*gconst21);
IkReal x833=((0.00429555598634833)*gconst20);
IkReal x834=(gconst10*gconst17);
IkReal x835=((0.0655404911970328)*gconst12);
IkReal x836=(gconst5*gconst9);
IkReal x837=((0.0655404911970328)*gconst23);
IkReal x838=(gconst22*gconst23);
IkReal x839=((0.00429555598634833)*gconst8);
IkReal x840=(gconst20*gconst21);
IkReal x841=((3.99785164507822)*gconst24);
IkReal x842=(gconst1*gconst3);
IkReal x843=(gconst0*gconst15);
IkReal x844=((0.0655404911970328)*gconst4);
IkReal x845=((3.99785164507822)*gconst7);
IkReal x846=(gconst10*gconst9);
IkReal x847=(gconst3*gconst7);
IkReal x848=((0.00429555598634833)*gconst7);
IkReal x849=((0.524042321102584)*gconst20);
IkReal x850=((0.0655404911970328)*gconst8);
IkReal x851=((1.0)*gconst8);
IkReal x852=((0.524042321102584)*gconst12);
IkReal x853=((1.0)*gconst16);
IkReal x854=((0.0655404911970328)*gconst19);
IkReal x855=(gconst14*gconst17);
IkReal x856=(gconst4*gconst5);
IkReal x857=((3.99785164507822)*gconst8);
IkReal x858=((0.0655404911970328)*gconst1);
IkReal x859=((0.0655404911970328)*gconst10);
IkReal x860=(gconst14*gconst21);
IkReal x861=(gconst18*gconst25);
IkReal x862=(gconst17*gconst5);
IkReal x863=(gconst14*gconst5);
IkReal x864=(gconst2*gconst7);
IkReal x865=(gconst21*gconst25);
IkReal x866=((0.0655404911970328)*gconst20);
IkReal x867=((0.00429555598634833)*gconst4);
IkReal x868=(gconst15*gconst5);
IkReal x869=((0.0655404911970328)*gconst2);
IkReal x870=((0.0655404911970328)*gconst14);
IkReal x871=(gconst4*gconst7);
IkReal x872=((1.0)*gconst24);
IkReal x873=(gconst21*gconst8);
IkReal x874=((0.00429555598634833)*gconst12);
IkReal x875=(gconst17*gconst19);
IkReal x876=((3.99785164507822)*gconst23);
IkReal x877=((0.00429555598634833)*gconst19);
IkReal x878=(gconst1*gconst21);
IkReal x879=(gconst2*gconst9);
IkReal x880=(gconst13*gconst4);
IkReal x881=(gconst0*gconst6);
IkReal x882=(gconst18*gconst9);
IkReal x883=(gconst18*gconst22);
IkReal x884=((1.0)*gconst17);
IkReal x885=(gconst0*gconst20);
IkReal x886=((0.0655404911970328)*gconst25);
IkReal x887=(gconst17*gconst18);
IkReal x888=(gconst15*gconst2);
IkReal x889=(gconst0*gconst4);
IkReal x890=((0.0655404911970328)*gconst7);
IkReal x891=(gconst20*gconst5);
IkReal x892=((0.00429555598634833)*gconst23);
IkReal x893=(gconst13*gconst6);
IkReal x894=((3.99785164507822)*gconst14);
IkReal x895=(gconst2*gconst6);
IkReal x896=(gconst12*gconst22);
IkReal x897=(gconst12*gconst21);
IkReal x898=((0.0655404911970328)*gconst17);
IkReal x899=(gconst0*gconst7);
IkReal x900=(gconst0*gconst9);
IkReal x901=(gconst16*gconst25);
IkReal x902=((3.99785164507822)*gconst13);
IkReal x903=(gconst13*x874);
IkReal x904=(gconst23*x867);
IkReal x905=(gconst7*x833);
IkReal x906=(gconst5*x850);
IkReal x907=((1.0)*gconst0*gconst25);
IkReal x908=(x821*x840);
IkReal x909=(x837*x875);
IkReal x910=(gconst5*gconst8*x844);
IkReal x911=(x842*x890);
IkReal x912=(x908+x909);
IkReal x913=(x911+x910);
IkReal x914=(x904+x905+x903);
op[0]=((((-1.0)*gconst18*x838*x884))+(((-1.0)*gconst23*x833))+((x818*x827))+((x832*x861))+(((-1.0)*gconst25*x840*x853))+x912+(((-1.0)*gconst17*x822*x872)));
op[1]=((((-1.0)*x834*x838))+((x831*x837))+(((-1.0)*gconst16*x825*x865))+((x817*x875))+((x827*x896))+(((-1.0)*gconst24*x833))+((x840*x841))+(((-1.0)*gconst13*x833))+((x866*x901))+((gconst23*x877))+((x824*x887))+(((-1.0)*x818*x837))+(((-1.0)*gconst21*x831*x872))+(((-1.0)*gconst20*x824*x853))+(((-1.0)*gconst23*x849))+(((-1.0)*x837*x887))+(((-1.0)*x837*x883))+((x827*x866))+(((0.0655404911970328)*gconst21*x861))+(((-1.0)*x821*x822))+((x818*x828))+((x875*x876))+(((-1.0)*x822*x855))+(((-1.0)*gconst13*x883*x884))+((x840*x870))+((x821*x875))+((gconst10*gconst25*x832))+((x821*x897))+(((-1.0)*x861*x898))+(((-1.0)*gconst23*x874))+((x840*x886)));
op[2]=(((gconst15*gconst16*x866))+(((0.0655404911970328)*gconst18*x824))+((x824*x834))+(((-1.0)*gconst25*x833))+((x835*x901))+(((-1.0)*gconst23*x852))+(((-1.0)*gconst11*gconst21*x821))+(((0.262021160551292)*gconst19*gconst23))+((gconst16*gconst7*x818))+(((-1.0)*x835*x838))+((x841*x897))+((x821*x831))+(((-1.0)*gconst13*x849))+(((-1.0)*x817*x883))+(((-1.0)*x817*x887))+((gconst1*gconst19*x837))+((x875*x902))+((gconst11*x892))+((gconst22*gconst4*x827))+(((-1.0)*x817*x818))+((gconst21*gconst4*x821))+((x827*x835))+(((-1.0)*x912))+(((-1.0)*x914))+(((-1.0)*x831*x860))+(((-1.0)*x834*x886))+((x826*x832))+((x831*x876))+((gconst17*gconst3*x837))+(((-1.0)*gconst18*gconst23*gconst6*x884))+((gconst20*gconst6*x827))+(((-0.00429555598634833)*x861))+(((-15.9785222200683)*gconst20*gconst23))+((x824*x866))+(((-1.0)*x834*x837))+(((-1.0)*gconst13*gconst22*x834))+((gconst17*gconst7*x854))+((x828*x896))+(((-1.0)*gconst24*x874))+(((-1.0)*gconst25*x853*x891))+((x859*x865))+(((-1.0)*gconst19*x862*x872))+((x835*x865))+((x835*x860))+((x854*x855))+((x861*x862))+((x840*x850))+(((-0.262021160551292)*gconst20*gconst24))+(((-1.0)*gconst10*gconst22*x837))+(((-1.0)*x840*x907))+(((-1.0)*gconst16*x824*x825))+(((-1.0)*gconst9*x840*x853))+((gconst16*gconst20*x817))+(((-1.0)*gconst2*x838*x884))+((x861*x878))+(((-1.0)*gconst18*x892))+(((-1.0)*gconst7*x883*x884))+((x817*x831))+(((-1.0)*gconst17*x822*x851))+(((-1.0)*gconst4*x853*x865))+((gconst0*gconst23*x818))+((gconst13*x877))+((x840*x894))+((x821*x891))+(((-1.0)*x822*x870))+((gconst24*x877))+(((-1.0)*gconst24*x822*x830))+(((-1.0)*gconst3*x832*x872))+(((-1.0)*gconst18*x830*x838))+(((-1.0)*gconst14*x833))+(((-0.0655404911970328)*gconst15*x887))+((x832*x882)));
op[3]=((((-0.00429555598634833)*gconst12*gconst25))+(((0.0655404911970328)*gconst1*gconst19*gconst24))+(((-1.0)*gconst10*gconst17*gconst23*gconst6))+((gconst13*gconst16*gconst20*gconst6))+(((-1.0)*gconst13*gconst17*gconst18*gconst6))+(((0.00429555598634833)*gconst11*gconst24))+(((0.0655404911970328)*gconst2*gconst21*gconst25))+(((0.0655404911970328)*gconst17*gconst24*gconst3))+(((0.0655404911970328)*gconst18*gconst25*gconst5))+(((-0.0655404911970328)*gconst18*gconst23*gconst6))+(((0.00429555598634833)*gconst11*gconst13))+(((-1.0)*gconst12*gconst16*gconst25*gconst5))+(((-15.9785222200683)*gconst12*gconst23))+(((-0.00429555598634833)*gconst24*gconst4))+(((0.0655404911970328)*gconst11*gconst14*gconst17))+((gconst10*gconst17*gconst25*gconst5))+(((0.262021160551292)*gconst11*gconst23))+(((-0.0655404911970328)*gconst20*gconst23*gconst6))+(((0.00429555598634833)*gconst19*gconst7))+(((-1.0)*gconst1*gconst11*gconst21*gconst24))+(((-0.0655404911970328)*gconst11*gconst14*gconst21))+(((-1.0)*gconst0*gconst12*gconst21*gconst25))+(((0.262021160551292)*gconst13*gconst19))+(((0.524042321102584)*gconst20*gconst23))+(((-0.0655404911970328)*gconst2*gconst22*gconst23))+(((3.99785164507822)*gconst17*gconst23*gconst3))+((gconst13*gconst16*gconst22*gconst4))+((gconst15*gconst17*gconst18*gconst5))+(((-0.0655404911970328)*gconst17*gconst18*gconst7))+(((-0.0655404911970328)*gconst17*gconst18*gconst9))+(((0.0655404911970328)*gconst10*gconst15*gconst21))+(((-1.0)*gconst11*gconst17*gconst21*gconst8))+(((-0.0655404911970328)*gconst19*gconst21*gconst8))+((gconst12*gconst16*gconst22*gconst7))+((gconst1*gconst15*gconst18*gconst21))+(((-1.0)*gconst15*gconst16*gconst21*gconst4))+(((0.0655404911970328)*gconst20*gconst21*gconst9))+(((3.99785164507822)*gconst12*gconst14*gconst21))+(((-1.0)*gconst1*gconst13*gconst18*gconst22))+(((0.0655404911970328)*gconst12*gconst15*gconst21))+(((-0.0655404911970328)*gconst17*gconst2*gconst23))+(((-0.0655404911970328)*gconst17*gconst2*gconst25))+(((-0.262021160551292)*gconst12*gconst24))+(((-0.00429555598634833)*gconst19*gconst23))+(((0.0655404911970328)*gconst12*gconst13*gconst16))+(((0.0655404911970328)*gconst1*gconst11*gconst23))+(((0.0655404911970328)*gconst12*gconst15*gconst16))+(((-0.524042321102584)*gconst23*gconst4))+(((0.00429555598634833)*gconst23*gconst3))+(((3.99785164507822)*gconst20*gconst21*gconst8))+((gconst0*gconst12*gconst22*gconst23))+(((-1.0)*gconst0*gconst15*gconst20*gconst21))+(((0.0655404911970328)*gconst12*gconst24*gconst5))+(((0.0655404911970328)*gconst12*gconst21*gconst8))+((gconst1*gconst10*gconst21*gconst25))+(((-0.00429555598634833)*gconst10*gconst25))+(((-0.00429555598634833)*gconst10*gconst23))+(((-1.0)*gconst1*gconst14*gconst19*gconst21))+(((-15.9785222200683)*gconst13*gconst20))+(((-0.00429555598634833)*gconst13*gconst4))+(((-0.262021160551292)*gconst14*gconst20))+(((-0.0655404911970328)*gconst22*gconst23*gconst4))+(((-1.0)*gconst14*gconst17*gconst21*gconst3))+(((0.0655404911970328)*gconst14*gconst20*gconst5))+((gconst15*gconst17*gconst2*gconst21))+(((-0.00429555598634833)*gconst13*gconst18))+(((-0.0655404911970328)*gconst18*gconst22*gconst7))+(((-1.0)*gconst12*gconst16*gconst21*gconst9))+(((3.99785164507822)*gconst21*gconst24*gconst4))+(((-0.0655404911970328)*gconst10*gconst13*gconst22))+(((-0.0655404911970328)*gconst13*gconst17*gconst19))+(((3.99785164507822)*gconst17*gconst19*gconst7))+(((0.0655404911970328)*gconst17*gconst19*gconst8))+(((-0.0655404911970328)*gconst10*gconst13*gconst17))+(((0.00429555598634833)*gconst14*gconst19))+(((0.0655404911970328)*gconst11*gconst17*gconst7))+(((-0.0655404911970328)*gconst20*gconst22*gconst7))+(((3.99785164507822)*gconst11*gconst13*gconst17))+(((0.0655404911970328)*gconst16*gconst20*gconst9))+(((0.0655404911970328)*gconst16*gconst20*gconst7))+(((-0.0655404911970328)*gconst14*gconst20*gconst21))+(((0.0655404911970328)*gconst18*gconst21*gconst9))+(((-0.0655404911970328)*gconst12*gconst21*gconst24))+(((3.99785164507822)*gconst20*gconst24*gconst5))+(((0.0655404911970328)*gconst21*gconst25*gconst4))+(((-1.0)*gconst10*gconst17*gconst22*gconst7))+(((-0.0655404911970328)*gconst12*gconst13*gconst22))+(((-0.0655404911970328)*gconst10*gconst15*gconst17))+(((-1.0)*gconst11*gconst17*gconst24*gconst5))+(((0.0655404911970328)*gconst14*gconst21*gconst4))+(((0.0655404911970328)*gconst1*gconst13*gconst19))+(((0.0655404911970328)*gconst16*gconst25*gconst4))+((gconst12*gconst16*gconst23*gconst6))+(((-1.0)*gconst1*gconst10*gconst22*gconst23))+(((-1.0)*gconst13*gconst17*gconst2*gconst22))+(((0.0655404911970328)*gconst20*gconst25*gconst5))+(((0.0655404911970328)*gconst0*gconst20*gconst23))+(((0.0655404911970328)*gconst0*gconst20*gconst25))+(((-0.0655404911970328)*gconst11*gconst17*gconst23))+(((-0.524042321102584)*gconst12*gconst13))+(((0.0655404911970328)*gconst16*gconst23*gconst4))+(((-1.0)*gconst14*gconst17*gconst19*gconst5))+(((-0.00429555598634833)*gconst15*gconst20))+(((3.99785164507822)*gconst1*gconst19*gconst23))+(((0.00429555598634833)*gconst20*gconst24))+((gconst0*gconst13*gconst20*gconst22))+(((-0.0655404911970328)*gconst19*gconst24*gconst5))+(((-0.0655404911970328)*gconst21*gconst24*gconst3))+(((-0.00429555598634833)*gconst15*gconst18))+(((-0.00429555598634833)*gconst12*gconst7))+(((-0.524042321102584)*gconst20*gconst7))+((gconst10*gconst17*gconst21*gconst9))+(((-0.00429555598634833)*gconst20*gconst8))+(((-0.00429555598634833)*gconst12*gconst14))+(((-0.0655404911970328)*gconst1*gconst18*gconst23))+(((-0.0655404911970328)*gconst1*gconst18*gconst25))+(((0.0655404911970328)*gconst13*gconst17*gconst3))+(((-1.0)*gconst15*gconst16*gconst20*gconst5)));
op[4]=((((-0.0655404911970328)*gconst11*gconst13*gconst17))+(((3.99785164507822)*gconst1*gconst13*gconst19))+(((0.0655404911970328)*gconst15*gconst2*gconst21))+(((-1.0)*gconst0*gconst20*gconst21*gconst9))+(((0.0655404911970328)*gconst24*gconst4*gconst5))+(((-1.0)*gconst17*gconst2*gconst23*gconst6))+(((0.0655404911970328)*gconst13*gconst16*gconst4))+(((-15.9785222200683)*gconst12*gconst13))+(((0.00429555598634833)*gconst11*gconst14))+(((-1.0)*gconst1*gconst18*gconst23*gconst6))+(((3.99785164507822)*gconst13*gconst17*gconst3))+((gconst0*gconst22*gconst23*gconst4))+(((-0.0655404911970328)*gconst1*gconst13*gconst18))+(((0.524042321102584)*gconst13*gconst20))+(((0.00429555598634833)*gconst13*gconst3))+(((0.524042321102584)*gconst12*gconst23))+(((-1.0)*gconst17*gconst2*gconst22*gconst7))+(((-1.0)*gconst11*gconst14*gconst17*gconst5))+(((0.00429555598634833)*gconst19*gconst8))+(((-0.0655404911970328)*gconst10*gconst22*gconst7))+(((-0.00429555598634833)*gconst2*gconst25))+(((-0.00429555598634833)*gconst2*gconst23))+(((-1.0)*gconst17*gconst24*gconst3*gconst5))+(((0.0655404911970328)*gconst21*gconst4*gconst8))+(((-0.0655404911970328)*gconst14*gconst21*gconst3))+(((0.0655404911970328)*gconst10*gconst21*gconst9))+(((0.262021160551292)*gconst11*gconst13))+((gconst16*gconst20*gconst6*gconst7))+(((-0.0655404911970328)*gconst10*gconst17*gconst7))+(((-0.0655404911970328)*gconst10*gconst17*gconst9))+(((0.0655404911970328)*gconst20*gconst5*gconst8))+(((3.99785164507822)*gconst12*gconst24*gconst5))+((gconst0*gconst20*gconst23*gconst6))+(((-1.0)*gconst1*gconst10*gconst13*gconst22))+((gconst16*gconst23*gconst4*gconst6))+(((-0.0655404911970328)*gconst11*gconst24*gconst5))+(((0.0655404911970328)*gconst0*gconst12*gconst23))+(((0.0655404911970328)*gconst0*gconst12*gconst25))+(((-0.0655404911970328)*gconst15*gconst17*gconst2))+(((0.262021160551292)*gconst23*gconst3))+(((-0.0655404911970328)*gconst1*gconst10*gconst23))+(((-0.0655404911970328)*gconst1*gconst10*gconst25))+(((-1.0)*gconst1*gconst11*gconst14*gconst21))+(((3.99785164507822)*gconst14*gconst21*gconst4))+((gconst1*gconst18*gconst21*gconst9))+((gconst0*gconst12*gconst13*gconst22))+(((0.0655404911970328)*gconst15*gconst21*gconst4))+((gconst10*gconst15*gconst17*gconst5))+(((0.00429555598634833)*gconst11*gconst7))+(((0.0655404911970328)*gconst1*gconst11*gconst24))+(((-1.0)*gconst0*gconst20*gconst25*gconst5))+((gconst0*gconst20*gconst22*gconst7))+(((-0.0655404911970328)*gconst1*gconst15*gconst18))+(((-15.9785222200683)*gconst23*gconst4))+(((-1.0)*gconst17*gconst19*gconst5*gconst8))+(((0.0655404911970328)*gconst1*gconst11*gconst13))+(((-0.262021160551292)*gconst12*gconst14))+(((0.0655404911970328)*gconst0*gconst13*gconst20))+(((-0.524042321102584)*gconst12*gconst7))+(((3.99785164507822)*gconst11*gconst17*gconst7))+(((-0.00429555598634833)*gconst18*gconst7))+(((-0.00429555598634833)*gconst18*gconst9))+(((-0.00429555598634833)*gconst4*gconst7))+(((3.99785164507822)*gconst14*gconst20*gconst5))+(((-0.0655404911970328)*gconst13*gconst18*gconst6))+(((-0.524042321102584)*gconst13*gconst4))+(((-0.0655404911970328)*gconst13*gconst17*gconst2))+(((0.0655404911970328)*gconst0*gconst15*gconst20))+(((0.0655404911970328)*gconst12*gconst21*gconst9))+((gconst17*gconst2*gconst21*gconst9))+(((0.0655404911970328)*gconst15*gconst16*gconst4))+(((-1.0)*gconst1*gconst21*gconst24*gconst3))+(((-0.00429555598634833)*gconst10*gconst13))+(((-0.00429555598634833)*gconst10*gconst15))+(((-0.0655404911970328)*gconst12*gconst23*gconst6))+(((-0.0655404911970328)*gconst1*gconst19*gconst23))+(((-1.0)*gconst16*gconst21*gconst4*gconst9))+(((-0.00429555598634833)*gconst13*gconst19))+(((0.0655404911970328)*gconst17*gconst3*gconst7))+(((-1.0)*gconst1*gconst19*gconst21*gconst8))+(((0.0655404911970328)*gconst1*gconst14*gconst19))+(((0.0655404911970328)*gconst12*gconst25*gconst5))+(((0.0655404911970328)*gconst15*gconst20*gconst5))+(((0.0655404911970328)*gconst10*gconst25*gconst5))+(((0.00429555598634833)*gconst14*gconst20))+((gconst1*gconst18*gconst25*gconst5))+(((-1.0)*gconst16*gconst20*gconst5*gconst9))+(((-1.0)*gconst17*gconst21*gconst3*gconst8))+(((-0.00429555598634833)*gconst20*gconst23))+(((0.0655404911970328)*gconst11*gconst17*gconst8))+((gconst12*gconst13*gconst16*gconst6))+(((-0.0655404911970328)*gconst17*gconst19*gconst7))+(((-0.262021160551292)*gconst24*gconst4))+(((-0.00429555598634833)*gconst11*gconst23))+((gconst1*gconst2*gconst21*gconst25))+(((-0.0655404911970328)*gconst13*gconst22*gconst4))+(((0.0655404911970328)*gconst14*gconst17*gconst3))+(((-1.0)*gconst12*gconst15*gconst16*gconst5))+(((0.0655404911970328)*gconst15*gconst18*gconst5))+(((0.0655404911970328)*gconst1*gconst19*gconst7))+(((-0.0655404911970328)*gconst12*gconst14*gconst21))+(((-0.0655404911970328)*gconst17*gconst23*gconst3))+(((-0.00429555598634833)*gconst25*gconst4))+(((-0.0655404911970328)*gconst13*gconst2*gconst22))+(((-1.0)*gconst1*gconst19*gconst24*gconst5))+(((-0.0655404911970328)*gconst14*gconst19*gconst5))+(((0.262021160551292)*gconst19*gconst7))+((gconst17*gconst18*gconst5*gconst9))+(((-0.0655404911970328)*gconst20*gconst21*gconst8))+(((-1.0)*gconst16*gconst25*gconst4*gconst5))+(((-0.0655404911970328)*gconst20*gconst24*gconst5))+(((-0.00429555598634833)*gconst14*gconst4))+(((-1.0)*gconst1*gconst2*gconst22*gconst23))+(((-1.0)*gconst1*gconst18*gconst22*gconst7))+(((-0.0655404911970328)*gconst11*gconst21*gconst8))+(((3.99785164507822)*gconst1*gconst11*gconst23))+(((-1.0)*gconst17*gconst18*gconst6*gconst7))+(((-0.0655404911970328)*gconst13*gconst20*gconst6))+(((3.99785164507822)*gconst12*gconst21*gconst8))+(((-1.0)*gconst10*gconst13*gconst17*gconst6))+(((-0.0655404911970328)*gconst12*gconst22*gconst7))+(((0.0655404911970328)*gconst12*gconst14*gconst5))+(((-0.0655404911970328)*gconst10*gconst23*gconst6))+((gconst17*gconst2*gconst25*gconst5))+(((-0.0655404911970328)*gconst21*gconst24*gconst4))+(((-15.9785222200683)*gconst20*gconst7))+((gconst1*gconst10*gconst15*gconst21))+(((-0.00429555598634833)*gconst12*gconst8))+(((-0.262021160551292)*gconst20*gconst8))+(((-1.0)*gconst0*gconst21*gconst25*gconst4))+((gconst16*gconst22*gconst4*gconst7))+(((0.0655404911970328)*gconst12*gconst16*gconst7))+(((0.0655404911970328)*gconst12*gconst16*gconst9))+(((-0.00429555598634833)*gconst20*gconst9))+(((0.00429555598634833)*gconst24*gconst3))+(((0.0655404911970328)*gconst1*gconst23*gconst3))+(((-0.00429555598634833)*gconst12*gconst15))+(((0.00429555598634833)*gconst12*gconst24))+(((-1.0)*gconst0*gconst12*gconst15*gconst21)));
op[5]=((((-15.9785222200683)*gconst13*gconst4))+(((-0.00429555598634833)*gconst12*gconst23))+((gconst12*gconst16*gconst6*gconst7))+(((-0.0655404911970328)*gconst11*gconst14*gconst5))+(((0.0655404911970328)*gconst25*gconst4*gconst5))+(((0.00429555598634833)*gconst12*gconst14))+(((-0.0655404911970328)*gconst1*gconst11*gconst23))+(((0.0655404911970328)*gconst1*gconst13*gconst3))+(((-1.0)*gconst0*gconst15*gconst21*gconst4))+(((0.0655404911970328)*gconst18*gconst5*gconst9))+((gconst1*gconst10*gconst25*gconst5))+((gconst15*gconst17*gconst2*gconst5))+(((0.524042321102584)*gconst12*gconst13))+(((-0.0655404911970328)*gconst20*gconst6*gconst7))+((gconst13*gconst16*gconst4*gconst6))+(((-0.0655404911970328)*gconst1*gconst13*gconst19))+(((0.0655404911970328)*gconst0*gconst20*gconst9))+(((0.0655404911970328)*gconst0*gconst20*gconst7))+(((-0.0655404911970328)*gconst23*gconst4*gconst6))+(((-0.0655404911970328)*gconst22*gconst4*gconst7))+(((-1.0)*gconst12*gconst16*gconst5*gconst9))+(((-1.0)*gconst1*gconst13*gconst18*gconst6))+(((0.0655404911970328)*gconst21*gconst4*gconst9))+(((0.0655404911970328)*gconst10*gconst15*gconst5))+(((-15.9785222200683)*gconst12*gconst7))+(((-0.0655404911970328)*gconst14*gconst21*gconst4))+(((-0.0655404911970328)*gconst1*gconst10*gconst15))+(((-0.0655404911970328)*gconst1*gconst10*gconst13))+(((-0.0655404911970328)*gconst2*gconst22*gconst7))+(((0.0655404911970328)*gconst20*gconst5*gconst9))+(((-1.0)*gconst14*gconst17*gconst3*gconst5))+(((0.0655404911970328)*gconst0*gconst12*gconst15))+(((0.0655404911970328)*gconst0*gconst12*gconst13))+(((0.524042321102584)*gconst23*gconst4))+(((-0.00429555598634833)*gconst23*gconst3))+(((3.99785164507822)*gconst21*gconst4*gconst8))+(((-0.00429555598634833)*gconst10*gconst7))+(((-0.00429555598634833)*gconst10*gconst9))+(((3.99785164507822)*gconst24*gconst4*gconst5))+(((-0.0655404911970328)*gconst12*gconst13*gconst6))+(((0.00429555598634833)*gconst11*gconst8))+(((-0.0655404911970328)*gconst11*gconst17*gconst7))+(((-0.0655404911970328)*gconst18*gconst6*gconst7))+((gconst0*gconst12*gconst22*gconst7))+(((0.0655404911970328)*gconst1*gconst11*gconst7))+(((0.0655404911970328)*gconst1*gconst11*gconst14))+((gconst1*gconst15*gconst2*gconst21))+(((-0.0655404911970328)*gconst19*gconst5*gconst8))+(((-0.524042321102584)*gconst4*gconst7))+(((-0.00429555598634833)*gconst4*gconst8))+(((-1.0)*gconst0*gconst15*gconst20*gconst5))+(((-0.262021160551292)*gconst12*gconst8))+(((0.262021160551292)*gconst11*gconst7))+(((-0.0655404911970328)*gconst14*gconst20*gconst5))+(((0.262021160551292)*gconst13*gconst3))+(((-0.0655404911970328)*gconst13*gconst17*gconst3))+(((-1.0)*gconst1*gconst13*gconst2*gconst22))+(((-0.00429555598634833)*gconst19*gconst7))+(((0.0655404911970328)*gconst2*gconst21*gconst9))+(((-0.0655404911970328)*gconst2*gconst23*gconst6))+((gconst10*gconst17*gconst5*gconst9))+(((-1.0)*gconst1*gconst14*gconst21*gconst3))+(((-1.0)*gconst10*gconst17*gconst6*gconst7))+(((0.524042321102584)*gconst20*gconst7))+(((-0.00429555598634833)*gconst13*gconst2))+(((-0.262021160551292)*gconst14*gconst4))+(((-0.00429555598634833)*gconst13*gconst20))+(((3.99785164507822)*gconst20*gconst5*gconst8))+(((-1.0)*gconst1*gconst14*gconst19*gconst5))+(((0.0655404911970328)*gconst0*gconst25*gconst4))+(((0.0655404911970328)*gconst17*gconst3*gconst8))+(((-0.0655404911970328)*gconst1*gconst2*gconst25))+(((-0.0655404911970328)*gconst1*gconst2*gconst23))+(((3.99785164507822)*gconst1*gconst23*gconst3))+(((0.0655404911970328)*gconst12*gconst5*gconst8))+((gconst1*gconst15*gconst18*gconst5))+(((0.00429555598634833)*gconst3*gconst7))+((gconst0*gconst12*gconst23*gconst6))+(((3.99785164507822)*gconst12*gconst14*gconst5))+(((-1.0)*gconst13*gconst17*gconst2*gconst6))+((gconst0*gconst13*gconst22*gconst4))+(((0.0655404911970328)*gconst1*gconst19*gconst8))+((gconst1*gconst10*gconst21*gconst9))+(((0.0655404911970328)*gconst14*gconst4*gconst5))+(((-1.0)*gconst11*gconst17*gconst5*gconst8))+(((-0.0655404911970328)*gconst12*gconst24*gconst5))+(((-0.00429555598634833)*gconst11*gconst13))+(((0.0655404911970328)*gconst0*gconst23*gconst4))+(((-1.0)*gconst1*gconst11*gconst24*gconst5))+(((0.00429555598634833)*gconst20*gconst8))+(((-1.0)*gconst0*gconst12*gconst25*gconst5))+(((-0.0655404911970328)*gconst17*gconst2*gconst9))+(((-0.0655404911970328)*gconst17*gconst2*gconst7))+(((0.0655404911970328)*gconst12*gconst15*gconst5))+(((-0.0655404911970328)*gconst10*gconst13*gconst6))+(((-0.0655404911970328)*gconst1*gconst18*gconst9))+(((-0.0655404911970328)*gconst1*gconst18*gconst7))+(((3.99785164507822)*gconst1*gconst11*gconst13))+(((0.0655404911970328)*gconst2*gconst25*gconst5))+(((-0.0655404911970328)*gconst24*gconst3*gconst5))+((gconst0*gconst13*gconst20*gconst6))+(((3.99785164507822)*gconst1*gconst19*gconst7))+(((0.0655404911970328)*gconst1*gconst24*gconst3))+(((3.99785164507822)*gconst17*gconst3*gconst7))+(((-1.0)*gconst15*gconst16*gconst4*gconst5))+(((-1.0)*gconst1*gconst10*gconst23*gconst6))+(((0.00429555598634833)*gconst14*gconst3))+(((-0.00429555598634833)*gconst15*gconst2))+(((-0.00429555598634833)*gconst15*gconst4))+(((-1.0)*gconst0*gconst12*gconst21*gconst9))+(((-1.0)*gconst1*gconst11*gconst21*gconst8))+(((-0.0655404911970328)*gconst12*gconst21*gconst8))+(((0.0655404911970328)*gconst16*gconst4*gconst9))+(((0.0655404911970328)*gconst16*gconst4*gconst7))+(((-0.00429555598634833)*gconst12*gconst9))+(((-0.0655404911970328)*gconst21*gconst3*gconst8))+(((0.00429555598634833)*gconst24*gconst4))+(((-1.0)*gconst1*gconst10*gconst22*gconst7)));
op[6]=((((-15.9785222200683)*x871))+(((-1.0)*x856*x907))+((x835*x899))+(((-0.262021160551292)*gconst4*gconst8))+(((-1.0)*x850*x891))+(((0.262021160551292)*x847))+((x823*x850))+(((-1.0)*gconst3*x819*x872))+((x835*x900))+(((-1.0)*x844*x873))+((x868*x869))+(((0.524042321102584)*x880))+(((-1.0)*gconst23*x830*x895))+((gconst14*x867))+((gconst3*x839))+(((-1.0)*gconst5*x825*x843))+(((-1.0)*gconst11*x906))+(((-1.0)*gconst19*x819*x851))+(((-1.0)*gconst11*x848))+(((-1.0)*x846*x858))+(((-1.0)*gconst11*gconst14*x819))+((gconst12*gconst5*x857))+(((-1.0)*gconst10*x830*x893))+((x878*x879))+((x842*x902))+(((-1.0)*gconst10*gconst7*x858))+((x829*x885))+(((-1.0)*x829*x859))+((x819*x882))+(((-1.0)*gconst2*x848))+(((-1.0)*x817*x895))+(((-1.0)*x914))+((x835*x836))+((gconst7*x852))+((gconst17*gconst2*x836))+(((-1.0)*gconst1*gconst2*x817))+(((-1.0)*x817*x823))+((x843*x844))+((x819*x826))+(((-1.0)*x821*x856))+(((-0.00429555598634833)*x879))+(((-1.0)*gconst9*x867))+(((-1.0)*x837*x842))+((gconst23*gconst4*x881))+((gconst12*gconst13*x881))+((x817*x889))+(((-0.00429555598634833)*gconst13*gconst3))+(((-1.0)*gconst22*x830*x864))+((x844*x868))+(((-1.0)*gconst4*gconst6*x817))+(((-1.0)*x836*x885))+((gconst16*gconst4*x829))+((x823*x845))+((x820*x858))+((gconst0*gconst22*x871))+((gconst12*x839))+(((-1.0)*x835*x863))+(((-1.0)*x847*x898))+((x856*x894))+(((-0.0655404911970328)*gconst5*x820))+(((-1.0)*gconst2*x829*x884))+(((-1.0)*gconst18*x829*x830))+x913+(((-1.0)*gconst3*x851*x862))+(((-1.0)*x858*x888))+(((-1.0)*x829*x835))+(((-1.0)*gconst1*gconst7*x854))+(((-1.0)*gconst4*x836*x853))+((gconst10*gconst15*x819))+((x836*x859))+(((-1.0)*gconst3*x830*x873))+(((-1.0)*gconst21*gconst9*x889)));
op[7]=(((x836*x869))+((x842*x850))+(((-1.0)*gconst0*x825*x836))+(((-1.0)*x844*x863))+(((-1.0)*x823*x890))+((x844*x899))+((x880*x881))+(((-1.0)*gconst10*x829*x830))+(((-1.0)*gconst2*x830*x893))+((x819*x846))+((gconst0*gconst12*x829))+(((0.524042321102584)*x871))+((x819*x888))+(((-1.0)*gconst11*x819*x851))+(((-1.0)*gconst5*gconst8*x835))+(((-1.0)*gconst12*x848))+(((-1.0)*gconst13*x867))+(((-1.0)*x829*x869))+((gconst4*x839))+((x836*x844))+((x842*x845))+((x856*x857))+(((-1.0)*x817*x842))+(((-1.0)*x819*x820))+(((-0.00429555598634833)*x847))+(((-1.0)*x858*x864))+(((-1.0)*x858*x879))+((x844*x900))+(((-1.0)*x829*x844))+(((-1.0)*gconst3*x906))+(((-1.0)*x843*x856)));
op[8]=((((-1.0)*gconst2*x829*x830))+(((-1.0)*gconst3*x819*x851))+((x829*x889))+(((-1.0)*gconst4*x848))+(((-1.0)*x913))+(((-1.0)*x836*x889))+((x819*x879)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x915=(cj1*cj5);
IkReal x916=((0.00238797124439986)*cj4);
IkReal x917=((0.0326831239315186)*sj4);
IkReal x918=(r02*sj4);
IkReal x919=((0.0728309674939976)*cj1);
IkReal x920=(r01*sj5);
IkReal x921=(cj5*sj1);
IkReal x922=((0.99680577906496)*sj4);
IkReal x923=((0.00238797124439986)*sj1);
IkReal x924=(r21*sj5);
IkReal x925=((0.0728309674939976)*cj4);
IkReal x926=(r22*sj4);
IkReal x927=((0.0728309674939976)*sj1);
IkReal x928=(cj4*sj1);
IkReal x929=((0.0326831239315186)*r22);
IkReal x930=((0.00238797124439986)*cj1);
IkReal x931=((0.0326831239315186)*cj4*r02);
IkReal x932=((0.99680577906496)*cj1*cj4);
if( IKabs((((x918*x923))+((r00*x915*x922))+(((-1.0)*r20*x915*x917))+(((-1.0)*r00*x916*x921))+((cj4*x919*x920))+((r20*x921*x922))+(((-1.0)*cj1*cj4*x929))+((r00*x917*x921))+((cj1*x917*x924))+(((-1.0)*sj1*x917*x920))+((x918*x919))+(((-1.0)*x926*x930))+((sj1*x924*x925))+(((0.0326831239315186)*r02*x928))+(((-1.0)*sj1*x922*x924))+(((-1.0)*r20*x921*x925))+((r20*x915*x916))+((x926*x927))+(((-1.0)*cj1*x916*x924))+((sj1*x916*x920))+((r02*x932))+(((-1.0)*r00*x915*x925))+(((-1.0)*cj1*x920*x922))+(((0.99680577906496)*r22*x928)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x918*x927))+((cj1*x922*x924))+(((-1.0)*cj4*x919*x924))+(((-1.0)*r22*x932))+((cj1*x917*x920))+(((-1.0)*r20*x915*x922))+(((-1.0)*x928*x929))+(((0.99680577906496)*r02*x928))+((r00*x921*x922))+((r20*x916*x921))+(((-1.0)*r20*x917*x921))+((sj1*x917*x924))+(((-1.0)*sj1*x916*x924))+((r20*x915*x925))+((r00*x915*x916))+(((-1.0)*x918*x930))+(((-1.0)*cj1*x931))+(((-1.0)*x919*x926))+(((-1.0)*r00*x921*x925))+(((-1.0)*sj1*x920*x922))+(((-1.0)*cj1*x916*x920))+(((-1.0)*r00*x915*x917))+((sj1*x920*x925))+(((-1.0)*x923*x926)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x918*x923))+((r00*x915*x922))+(((-1.0)*r20*x915*x917))+(((-1.0)*r00*x916*x921))+((cj4*x919*x920))+((r20*x921*x922))+(((-1.0)*cj1*cj4*x929))+((r00*x917*x921))+((cj1*x917*x924))+(((-1.0)*sj1*x917*x920))+((x918*x919))+(((-1.0)*x926*x930))+((sj1*x924*x925))+(((0.0326831239315186)*r02*x928))+(((-1.0)*sj1*x922*x924))+(((-1.0)*r20*x921*x925))+((r20*x915*x916))+((x926*x927))+(((-1.0)*cj1*x916*x924))+((sj1*x916*x920))+((r02*x932))+(((-1.0)*r00*x915*x925))+(((-1.0)*cj1*x920*x922))+(((0.99680577906496)*r22*x928))))+IKsqr((((x918*x927))+((cj1*x922*x924))+(((-1.0)*cj4*x919*x924))+(((-1.0)*r22*x932))+((cj1*x917*x920))+(((-1.0)*r20*x915*x922))+(((-1.0)*x928*x929))+(((0.99680577906496)*r02*x928))+((r00*x921*x922))+((r20*x916*x921))+(((-1.0)*r20*x917*x921))+((sj1*x917*x924))+(((-1.0)*sj1*x916*x924))+((r20*x915*x925))+((r00*x915*x916))+(((-1.0)*x918*x930))+(((-1.0)*cj1*x931))+(((-1.0)*x919*x926))+(((-1.0)*r00*x921*x925))+(((-1.0)*sj1*x920*x922))+(((-1.0)*cj1*x916*x920))+(((-1.0)*r00*x915*x917))+((sj1*x920*x925))+(((-1.0)*x923*x926))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x918*x923))+((r00*x915*x922))+(((-1.0)*r20*x915*x917))+(((-1.0)*r00*x916*x921))+((cj4*x919*x920))+((r20*x921*x922))+(((-1.0)*cj1*cj4*x929))+((r00*x917*x921))+((cj1*x917*x924))+(((-1.0)*sj1*x917*x920))+((x918*x919))+(((-1.0)*x926*x930))+((sj1*x924*x925))+(((0.0326831239315186)*r02*x928))+(((-1.0)*sj1*x922*x924))+(((-1.0)*r20*x921*x925))+((r20*x915*x916))+((x926*x927))+(((-1.0)*cj1*x916*x924))+((sj1*x916*x920))+((r02*x932))+(((-1.0)*r00*x915*x925))+(((-1.0)*cj1*x920*x922))+(((0.99680577906496)*r22*x928))), (((x918*x927))+((cj1*x922*x924))+(((-1.0)*cj4*x919*x924))+(((-1.0)*r22*x932))+((cj1*x917*x920))+(((-1.0)*r20*x915*x922))+(((-1.0)*x928*x929))+(((0.99680577906496)*r02*x928))+((r00*x921*x922))+((r20*x916*x921))+(((-1.0)*r20*x917*x921))+((sj1*x917*x924))+(((-1.0)*sj1*x916*x924))+((r20*x915*x925))+((r00*x915*x916))+(((-1.0)*x918*x930))+(((-1.0)*cj1*x931))+(((-1.0)*x919*x926))+(((-1.0)*r00*x921*x925))+(((-1.0)*sj1*x920*x922))+(((-1.0)*cj1*x916*x920))+(((-1.0)*r00*x915*x917))+((sj1*x920*x925))+(((-1.0)*x923*x926))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x933=IKcos(j2);
IkReal x934=IKsin(j2);
IkReal x935=(cj5*r20);
IkReal x936=((0.997341439912743)*sj4);
IkReal x937=((0.0728701052062903)*cj4);
IkReal x938=(r01*sj5);
IkReal x939=(cj5*r00);
IkReal x940=(cj4*r02);
IkReal x941=((1.3955641253225e-7)*cj4);
IkReal x942=(cj3*sj4);
IkReal x943=((1.01965987338572e-8)*sj4);
IkReal x944=(sj3*sj5);
IkReal x945=(r21*sj5);
IkReal x946=((0.00373006819843503)*cj4);
IkReal x947=(cj5*r01);
IkReal x948=((0.0037400112430517)*cj3);
IkReal x949=((1.08150140232244e-9)*sj5);
IkReal x950=(r02*sj4);
IkReal x951=((0.00373006819843503)*sj3);
IkReal x952=(cj4*r22);
IkReal x953=(r22*sj4);
IkReal x954=((0.999993006133494)*sj3);
IkReal x955=((0.000272535012753886)*sj3);
IkReal x956=((0.0728695955625022)*cj3);
IkReal x957=(cj5*r21);
IkReal x958=(sj4*x955);
IkReal x959=(sj1*x933);
IkReal x960=((0.997334464639851)*cj3*cj4);
IkReal x961=(cj1*x934);
IkReal x962=(cj1*x933);
IkReal x963=(sj1*x934);
IkReal x964=((0.999462911269554)*x961);
IkReal x965=((0.999462911269554)*x959);
IkReal x966=((0.0327702455985164)*x963);
IkReal x967=((0.0327702455985164)*x962);
IkReal x968=((0.999462911269554)*x962);
IkReal x969=((0.0327702455985164)*x959);
IkReal x970=((0.0327702455985164)*x961);
IkReal x971=((0.999462911269554)*x963);
IkReal x972=(x970+x968+x969);
IkReal x973=(x966+x964+x965);
evalcond[0]=((((-0.0728701052062903)*x953))+(((-1.0)*x935*x936))+((x936*x945))+((x935*x937))+(((-0.997341439912743)*x952))+(((-1.0)*x937*x945))+x971+(((-1.0)*x972)));
evalcond[1]=((((-0.0728701052062903)*x950))+(((-0.997341439912743)*x940))+((x936*x938))+((x937*x939))+(((-1.0)*x936*x939))+(((-1.0)*x937*x938))+x973+(((-1.0)*x967)));
evalcond[2]=((((0.00691988466190158)*x961))+(((0.00691988466190158)*x959))+(((0.14998636)*cj1))+(((-1.0)*r20*x949))+((x941*x945))+(((0.211036575236598)*x962))+((x943*x945))+(((-1.0)*pz))+(((6.25181902607023e-7)*x945))+(((-1.08150140232244e-9)*x957))+(((-0.211036575236598)*x963))+(((-1.01965987338572e-8)*x952))+(((-6.25181902607023e-7)*x935))+(((-0.00202253)*sj1))+(((-1.0)*x935*x943))+(((-1.0)*x935*x941))+(((1.3955641253225e-7)*x953)));
evalcond[3]=((((-1.08150140232244e-9)*x947))+(((0.00691988466190158)*x962))+(((-1.0)*r00*x949))+(((-1.01965987338572e-8)*x940))+(((6.25181902607023e-7)*x938))+(((-1.0)*x939*x941))+(((-1.0)*x939*x943))+((x938*x943))+((x938*x941))+(((-0.00202253)*cj1))+(((-0.14998636)*sj1))+(((-1.0)*px))+(((-0.211036575236598)*x961))+(((-0.211036575236598)*x959))+(((-6.25181902607023e-7)*x939))+(((1.3955641253225e-7)*x950))+(((-0.00691988466190158)*x963)));
evalcond[4]=(((x951*x953))+(((0.997334464639851)*r22*x942))+(((0.999993006133494)*r20*x944))+(((0.000272535012753886)*r21*sj4*x944))+(((0.0728695955625022)*x942*x945))+(((-1.0)*x935*x958))+(((-1.0)*x935*x960))+((x945*x960))+(((-1.0)*x952*x956))+(((-1.0)*x952*x955))+x973+(((-1.0)*x948*x957))+(((-1.0)*x967))+(((-1.0)*sj3*x935*x946))+(((-0.0728695955625022)*x935*x942))+((r21*x944*x946))+(((-1.0)*r20*sj5*x948))+((x954*x957)));
evalcond[5]=((((-1.0)*x947*x948))+(((-1.0)*x940*x955))+(((-1.0)*x940*x956))+(((-1.0)*x939*x958))+(((-1.0)*r00*sj5*x948))+(((0.999993006133494)*r00*x944))+(((-1.0)*x939*x960))+((x947*x954))+(((-0.0728695955625022)*x939*x942))+(((0.0728695955625022)*x938*x942))+((x938*x958))+((sj3*x938*x946))+((x938*x960))+x972+((x950*x951))+(((-1.0)*sj3*x939*x946))+(((-1.0)*x971))+(((0.997334464639851)*r02*x942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x974=(cj1*cj5);
IkReal x975=((0.00238797124439986)*cj4);
IkReal x976=((0.0326831239315186)*sj4);
IkReal x977=(r02*sj4);
IkReal x978=((0.0728309674939976)*cj1);
IkReal x979=(r01*sj5);
IkReal x980=(cj5*sj1);
IkReal x981=((0.99680577906496)*sj4);
IkReal x982=((0.00238797124439986)*sj1);
IkReal x983=(r21*sj5);
IkReal x984=((0.0728309674939976)*cj4);
IkReal x985=(r22*sj4);
IkReal x986=((0.0728309674939976)*sj1);
IkReal x987=(cj4*sj1);
IkReal x988=((0.0326831239315186)*r22);
IkReal x989=((0.00238797124439986)*cj1);
IkReal x990=((0.0326831239315186)*cj4*r02);
IkReal x991=((0.99680577906496)*cj1*cj4);
if( IKabs(((((-1.0)*cj1*x975*x983))+(((-1.0)*sj1*x981*x983))+((r00*x974*x984))+(((-1.0)*r20*x980*x984))+(((0.99680577906496)*r22*x987))+(((-0.0326831239315186)*r02*x987))+(((-1.0)*cj4*x978*x979))+((sj1*x976*x979))+((cj1*x979*x981))+(((-1.0)*r02*x991))+(((-1.0)*cj1*cj4*x988))+((cj1*x976*x983))+((r20*x980*x981))+(((-1.0)*r00*x974*x981))+(((-1.0)*r00*x976*x980))+(((-1.0)*sj1*x975*x979))+(((-1.0)*x977*x982))+((r00*x975*x980))+(((-1.0)*x977*x978))+((x985*x986))+((r20*x974*x975))+(((-1.0)*r20*x974*x976))+(((-1.0)*x985*x989))+((sj1*x983*x984)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x991))+((cj1*x981*x983))+((cj1*x990))+(((-1.0)*cj1*x976*x979))+((x977*x989))+((r00*x974*x976))+(((-1.0)*r20*x976*x980))+(((-1.0)*x982*x985))+(((-1.0)*x978*x985))+((r20*x975*x980))+((sj1*x979*x981))+(((-1.0)*cj4*x978*x983))+(((-1.0)*r00*x974*x975))+((sj1*x976*x983))+(((-0.99680577906496)*r02*x987))+((r00*x980*x984))+(((-1.0)*x977*x986))+(((-1.0)*x987*x988))+(((-1.0)*sj1*x975*x983))+(((-1.0)*r00*x980*x981))+(((-1.0)*sj1*x979*x984))+((cj1*x975*x979))+(((-1.0)*r20*x974*x981))+((r20*x974*x984)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x975*x983))+(((-1.0)*sj1*x981*x983))+((r00*x974*x984))+(((-1.0)*r20*x980*x984))+(((0.99680577906496)*r22*x987))+(((-0.0326831239315186)*r02*x987))+(((-1.0)*cj4*x978*x979))+((sj1*x976*x979))+((cj1*x979*x981))+(((-1.0)*r02*x991))+(((-1.0)*cj1*cj4*x988))+((cj1*x976*x983))+((r20*x980*x981))+(((-1.0)*r00*x974*x981))+(((-1.0)*r00*x976*x980))+(((-1.0)*sj1*x975*x979))+(((-1.0)*x977*x982))+((r00*x975*x980))+(((-1.0)*x977*x978))+((x985*x986))+((r20*x974*x975))+(((-1.0)*r20*x974*x976))+(((-1.0)*x985*x989))+((sj1*x983*x984))))+IKsqr(((((-1.0)*r22*x991))+((cj1*x981*x983))+((cj1*x990))+(((-1.0)*cj1*x976*x979))+((x977*x989))+((r00*x974*x976))+(((-1.0)*r20*x976*x980))+(((-1.0)*x982*x985))+(((-1.0)*x978*x985))+((r20*x975*x980))+((sj1*x979*x981))+(((-1.0)*cj4*x978*x983))+(((-1.0)*r00*x974*x975))+((sj1*x976*x983))+(((-0.99680577906496)*r02*x987))+((r00*x980*x984))+(((-1.0)*x977*x986))+(((-1.0)*x987*x988))+(((-1.0)*sj1*x975*x983))+(((-1.0)*r00*x980*x981))+(((-1.0)*sj1*x979*x984))+((cj1*x975*x979))+(((-1.0)*r20*x974*x981))+((r20*x974*x984))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x975*x983))+(((-1.0)*sj1*x981*x983))+((r00*x974*x984))+(((-1.0)*r20*x980*x984))+(((0.99680577906496)*r22*x987))+(((-0.0326831239315186)*r02*x987))+(((-1.0)*cj4*x978*x979))+((sj1*x976*x979))+((cj1*x979*x981))+(((-1.0)*r02*x991))+(((-1.0)*cj1*cj4*x988))+((cj1*x976*x983))+((r20*x980*x981))+(((-1.0)*r00*x974*x981))+(((-1.0)*r00*x976*x980))+(((-1.0)*sj1*x975*x979))+(((-1.0)*x977*x982))+((r00*x975*x980))+(((-1.0)*x977*x978))+((x985*x986))+((r20*x974*x975))+(((-1.0)*r20*x974*x976))+(((-1.0)*x985*x989))+((sj1*x983*x984))), ((((-1.0)*r22*x991))+((cj1*x981*x983))+((cj1*x990))+(((-1.0)*cj1*x976*x979))+((x977*x989))+((r00*x974*x976))+(((-1.0)*r20*x976*x980))+(((-1.0)*x982*x985))+(((-1.0)*x978*x985))+((r20*x975*x980))+((sj1*x979*x981))+(((-1.0)*cj4*x978*x983))+(((-1.0)*r00*x974*x975))+((sj1*x976*x983))+(((-0.99680577906496)*r02*x987))+((r00*x980*x984))+(((-1.0)*x977*x986))+(((-1.0)*x987*x988))+(((-1.0)*sj1*x975*x983))+(((-1.0)*r00*x980*x981))+(((-1.0)*sj1*x979*x984))+((cj1*x975*x979))+(((-1.0)*r20*x974*x981))+((r20*x974*x984))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x992=IKcos(j2);
IkReal x993=IKsin(j2);
IkReal x994=(cj5*r20);
IkReal x995=((0.997341439912743)*sj4);
IkReal x996=((0.0728701052062903)*cj4);
IkReal x997=(r01*sj5);
IkReal x998=(cj5*r00);
IkReal x999=(cj4*r02);
IkReal x1000=((1.3955641253225e-7)*cj4);
IkReal x1001=(cj3*sj4);
IkReal x1002=((1.01965987338572e-8)*sj4);
IkReal x1003=(sj3*sj5);
IkReal x1004=(r21*sj5);
IkReal x1005=((0.00373006819843503)*cj4);
IkReal x1006=(cj5*r01);
IkReal x1007=((0.0037400112430517)*cj3);
IkReal x1008=((1.08150140232244e-9)*sj5);
IkReal x1009=(r02*sj4);
IkReal x1010=((0.00373006819843503)*sj3);
IkReal x1011=(cj4*r22);
IkReal x1012=(r22*sj4);
IkReal x1013=((0.999993006133494)*sj3);
IkReal x1014=((0.000272535012753886)*sj3);
IkReal x1015=((0.0728695955625022)*cj3);
IkReal x1016=(cj5*r21);
IkReal x1017=(sj4*x1014);
IkReal x1018=(sj1*x992);
IkReal x1019=((0.997334464639851)*cj3*cj4);
IkReal x1020=(cj1*x993);
IkReal x1021=(cj1*x992);
IkReal x1022=(sj1*x993);
IkReal x1023=((0.999462911269554)*x1020);
IkReal x1024=((0.999462911269554)*x1018);
IkReal x1025=((0.0327702455985164)*x1022);
IkReal x1026=((0.0327702455985164)*x1021);
IkReal x1027=((0.999462911269554)*x1022);
IkReal x1028=((0.999462911269554)*x1021);
IkReal x1029=((0.0327702455985164)*x1018);
IkReal x1030=((0.0327702455985164)*x1020);
IkReal x1031=(x1030+x1029+x1028);
IkReal x1032=(x1025+x1024+x1023);
evalcond[0]=(((x994*x996))+(((-1.0)*x1031))+x1027+(((-1.0)*x994*x995))+(((-0.997341439912743)*x1011))+(((-0.0728701052062903)*x1012))+(((-1.0)*x1004*x996))+((x1004*x995)));
evalcond[1]=((((-1.0)*x1032))+x1026+(((-1.0)*x995*x998))+(((-1.0)*x996*x997))+(((-0.0728701052062903)*x1009))+((x995*x997))+(((-0.997341439912743)*x999))+((x996*x998)));
evalcond[2]=((((-6.25181902607023e-7)*x994))+(((-1.0)*x1002*x994))+(((-1.08150140232244e-9)*x1016))+((x1000*x1004))+(((0.14998636)*cj1))+(((-1.0)*r20*x1008))+(((0.00691988466190158)*x1018))+(((-1.0)*pz))+(((-1.01965987338572e-8)*x1011))+(((-0.211036575236598)*x1022))+(((0.00691988466190158)*x1020))+(((-1.0)*x1000*x994))+(((6.25181902607023e-7)*x1004))+(((0.211036575236598)*x1021))+((x1002*x1004))+(((-0.00202253)*sj1))+(((1.3955641253225e-7)*x1012)));
evalcond[3]=(((x1000*x997))+(((-1.08150140232244e-9)*x1006))+(((-6.25181902607023e-7)*x998))+(((-1.0)*x1002*x998))+(((1.3955641253225e-7)*x1009))+(((0.14998636)*sj1))+(((-1.0)*px))+(((-1.01965987338572e-8)*x999))+(((-0.00691988466190158)*x1021))+(((0.211036575236598)*x1018))+(((0.00691988466190158)*x1022))+(((-1.0)*x1000*x998))+((x1002*x997))+(((0.211036575236598)*x1020))+(((-1.0)*r00*x1008))+(((6.25181902607023e-7)*x997))+(((0.00202253)*cj1)));
evalcond[4]=((((-1.0)*x1011*x1015))+(((-1.0)*x1011*x1014))+x1032+(((-1.0)*sj3*x1005*x994))+(((0.999993006133494)*r20*x1003))+(((-1.0)*r20*sj5*x1007))+(((0.0728695955625022)*x1001*x1004))+((x1013*x1016))+(((-1.0)*x1026))+(((-1.0)*x1019*x994))+(((-1.0)*x1017*x994))+((r21*x1003*x1005))+((x1004*x1019))+(((0.997334464639851)*r22*x1001))+(((-1.0)*x1007*x1016))+(((0.000272535012753886)*r21*sj4*x1003))+(((-0.0728695955625022)*x1001*x994))+((x1010*x1012)));
evalcond[5]=((((0.0728695955625022)*x1001*x997))+(((-1.0)*x1031))+x1027+(((-1.0)*sj3*x1005*x998))+(((0.999993006133494)*r00*x1003))+((x1009*x1010))+((sj3*x1005*x997))+(((-1.0)*x1006*x1007))+((x1019*x997))+(((-1.0)*r00*sj5*x1007))+(((-1.0)*x1019*x998))+(((-1.0)*x1017*x998))+((x1006*x1013))+((x1017*x997))+(((0.997334464639851)*r02*x1001))+(((-1.0)*x1015*x999))+(((-0.0728695955625022)*x1001*x998))+(((-1.0)*x1014*x999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1033=(cj4*cj5);
IkReal x1034=((0.00238797124439986)*cj1);
IkReal x1035=(r10*sj1);
IkReal x1036=(cj5*sj4);
IkReal x1037=((0.0728309674939976)*cj4);
IkReal x1038=((0.0326831239315186)*r20);
IkReal x1039=((0.99680577906496)*cj1);
IkReal x1040=(cj4*r12);
IkReal x1041=(r21*sj5);
IkReal x1042=((0.0326831239315186)*sj4);
IkReal x1043=((0.99680577906496)*sj1);
IkReal x1044=((0.00238797124439986)*sj1);
IkReal x1045=(r12*sj4);
IkReal x1046=((0.0728309674939976)*sj1);
IkReal x1047=((0.0326831239315186)*sj1);
IkReal x1048=((0.0728309674939976)*cj1);
IkReal x1049=((0.0326831239315186)*cj1);
IkReal x1050=(cj4*r22);
IkReal x1051=(r11*sj5);
IkReal x1052=(r22*sj4);
IkReal x1053=(sj1*x1051);
if( IKabs(((((-0.00238797124439986)*x1033*x1035))+((sj1*x1037*x1041))+((r20*x1036*x1043))+((x1043*x1050))+(((-1.0)*sj4*x1041*x1043))+((x1040*x1047))+((x1039*x1040))+((r10*x1036*x1039))+(((-1.0)*cj4*x1034*x1041))+((cj4*x1044*x1051))+((cj1*x1041*x1042))+(((0.0326831239315186)*x1035*x1036))+((cj1*x1037*x1051))+(((-1.0)*x1042*x1053))+((r20*x1033*x1034))+(((-1.0)*r10*x1033*x1048))+(((-1.0)*r20*x1033*x1046))+(((-1.0)*x1034*x1052))+((x1046*x1052))+((x1045*x1048))+(((-1.0)*cj1*x1036*x1038))+(((-1.0)*x1049*x1050))+(((-1.0)*sj4*x1039*x1051))+((x1044*x1045)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x1041*x1042))+((x1037*x1053))+(((-1.0)*cj1*x1037*x1041))+(((-1.0)*cj4*x1041*x1044))+(((-1.0)*cj4*x1034*x1051))+((x1040*x1043))+(((-1.0)*x1044*x1052))+(((-1.0)*sj4*x1043*x1051))+(((-1.0)*x1039*x1050))+(((-1.0)*r10*x1036*x1049))+(((-1.0)*r20*x1036*x1039))+((cj1*x1042*x1051))+(((0.99680577906496)*x1035*x1036))+((sj4*x1039*x1041))+((r20*x1033*x1044))+((r20*x1033*x1048))+(((-0.0728309674939976)*x1033*x1035))+(((-1.0)*x1040*x1049))+(((-1.0)*x1048*x1052))+(((-1.0)*sj1*x1036*x1038))+(((-1.0)*x1034*x1045))+((x1045*x1046))+((r10*x1033*x1034))+(((-1.0)*x1047*x1050)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.00238797124439986)*x1033*x1035))+((sj1*x1037*x1041))+((r20*x1036*x1043))+((x1043*x1050))+(((-1.0)*sj4*x1041*x1043))+((x1040*x1047))+((x1039*x1040))+((r10*x1036*x1039))+(((-1.0)*cj4*x1034*x1041))+((cj4*x1044*x1051))+((cj1*x1041*x1042))+(((0.0326831239315186)*x1035*x1036))+((cj1*x1037*x1051))+(((-1.0)*x1042*x1053))+((r20*x1033*x1034))+(((-1.0)*r10*x1033*x1048))+(((-1.0)*r20*x1033*x1046))+(((-1.0)*x1034*x1052))+((x1046*x1052))+((x1045*x1048))+(((-1.0)*cj1*x1036*x1038))+(((-1.0)*x1049*x1050))+(((-1.0)*sj4*x1039*x1051))+((x1044*x1045))))+IKsqr((((sj1*x1041*x1042))+((x1037*x1053))+(((-1.0)*cj1*x1037*x1041))+(((-1.0)*cj4*x1041*x1044))+(((-1.0)*cj4*x1034*x1051))+((x1040*x1043))+(((-1.0)*x1044*x1052))+(((-1.0)*sj4*x1043*x1051))+(((-1.0)*x1039*x1050))+(((-1.0)*r10*x1036*x1049))+(((-1.0)*r20*x1036*x1039))+((cj1*x1042*x1051))+(((0.99680577906496)*x1035*x1036))+((sj4*x1039*x1041))+((r20*x1033*x1044))+((r20*x1033*x1048))+(((-0.0728309674939976)*x1033*x1035))+(((-1.0)*x1040*x1049))+(((-1.0)*x1048*x1052))+(((-1.0)*sj1*x1036*x1038))+(((-1.0)*x1034*x1045))+((x1045*x1046))+((r10*x1033*x1034))+(((-1.0)*x1047*x1050))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.00238797124439986)*x1033*x1035))+((sj1*x1037*x1041))+((r20*x1036*x1043))+((x1043*x1050))+(((-1.0)*sj4*x1041*x1043))+((x1040*x1047))+((x1039*x1040))+((r10*x1036*x1039))+(((-1.0)*cj4*x1034*x1041))+((cj4*x1044*x1051))+((cj1*x1041*x1042))+(((0.0326831239315186)*x1035*x1036))+((cj1*x1037*x1051))+(((-1.0)*x1042*x1053))+((r20*x1033*x1034))+(((-1.0)*r10*x1033*x1048))+(((-1.0)*r20*x1033*x1046))+(((-1.0)*x1034*x1052))+((x1046*x1052))+((x1045*x1048))+(((-1.0)*cj1*x1036*x1038))+(((-1.0)*x1049*x1050))+(((-1.0)*sj4*x1039*x1051))+((x1044*x1045))), (((sj1*x1041*x1042))+((x1037*x1053))+(((-1.0)*cj1*x1037*x1041))+(((-1.0)*cj4*x1041*x1044))+(((-1.0)*cj4*x1034*x1051))+((x1040*x1043))+(((-1.0)*x1044*x1052))+(((-1.0)*sj4*x1043*x1051))+(((-1.0)*x1039*x1050))+(((-1.0)*r10*x1036*x1049))+(((-1.0)*r20*x1036*x1039))+((cj1*x1042*x1051))+(((0.99680577906496)*x1035*x1036))+((sj4*x1039*x1041))+((r20*x1033*x1044))+((r20*x1033*x1048))+(((-0.0728309674939976)*x1033*x1035))+(((-1.0)*x1040*x1049))+(((-1.0)*x1048*x1052))+(((-1.0)*sj1*x1036*x1038))+(((-1.0)*x1034*x1045))+((x1045*x1046))+((r10*x1033*x1034))+(((-1.0)*x1047*x1050))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1054=IKcos(j2);
IkReal x1055=IKsin(j2);
IkReal x1056=(cj5*r20);
IkReal x1057=((0.0728701052062903)*cj4);
IkReal x1058=(cj5*r10);
IkReal x1059=(sj4*sj5);
IkReal x1060=((0.000272535012753886)*sj3);
IkReal x1061=(r21*sj5);
IkReal x1062=(cj3*cj4);
IkReal x1063=(cj4*r12);
IkReal x1064=((0.997341439912743)*sj4);
IkReal x1065=((1.08150140232244e-9)*sj5);
IkReal x1066=(r10*sj5);
IkReal x1067=((0.999993006133494)*sj3);
IkReal x1068=((1.08150140232244e-9)*cj5);
IkReal x1069=(cj4*r22);
IkReal x1070=((1.01965987338572e-8)*sj4);
IkReal x1071=(r22*sj4);
IkReal x1072=((0.0037400112430517)*cj3);
IkReal x1073=(r11*sj5);
IkReal x1074=((1.3955641253225e-7)*cj4);
IkReal x1075=(cj5*r11);
IkReal x1076=((0.00373006819843503)*sj3);
IkReal x1077=(r12*sj4);
IkReal x1078=((0.997334464639851)*cj3);
IkReal x1079=(cj5*r21);
IkReal x1080=(r20*sj5);
IkReal x1081=((0.211036575236598)*x1055);
IkReal x1082=(sj1*x1054);
IkReal x1083=((0.0728695955625022)*cj3*sj4);
IkReal x1084=(cj4*x1076);
IkReal x1085=(cj1*x1055);
IkReal x1086=(cj1*x1054);
IkReal x1087=(sj1*x1055);
IkReal x1088=((0.999462911269554)*x1085);
IkReal x1089=((0.999462911269554)*x1082);
IkReal x1090=((0.0327702455985164)*x1087);
IkReal x1091=((0.0327702455985164)*x1086);
IkReal x1092=((0.999462911269554)*x1086);
IkReal x1093=((0.0327702455985164)*x1082);
IkReal x1094=((0.0327702455985164)*x1085);
IkReal x1095=((0.999462911269554)*x1087);
IkReal x1096=(x1094+x1092+x1093);
IkReal x1097=(x1090+x1089+x1088);
evalcond[0]=(x1095+((x1056*x1057))+(((0.997341439912743)*r21*x1059))+(((-1.0)*x1096))+(((-1.0)*x1057*x1061))+(((-1.0)*x1056*x1064))+(((-0.0728701052062903)*x1071))+(((-0.997341439912743)*x1069)));
evalcond[1]=(x1097+(((0.997341439912743)*r11*x1059))+(((-1.0)*x1058*x1064))+(((-1.0)*x1091))+((x1057*x1058))+(((-1.0)*x1057*x1073))+(((-0.0728701052062903)*x1077))+(((-0.997341439912743)*x1063)));
evalcond[2]=((((-1.01965987338572e-8)*x1069))+(((0.211036575236598)*x1086))+(((-1.0)*r21*x1068))+(((-1.0)*sj1*x1081))+(((-1.0)*r20*x1065))+((x1061*x1074))+(((0.14998636)*cj1))+(((1.3955641253225e-7)*x1071))+(((-1.0)*pz))+(((-1.0)*x1056*x1070))+(((-1.0)*x1056*x1074))+(((1.01965987338572e-8)*r21*x1059))+(((0.00691988466190158)*x1082))+(((0.00691988466190158)*x1085))+(((-0.00202253)*sj1))+(((-6.25181902607023e-7)*x1056))+(((6.25181902607023e-7)*x1061)));
evalcond[3]=((((-1.01965987338572e-8)*x1063))+(((6.25181902607023e-7)*x1073))+(((-1.0)*r11*x1068))+(((-1.0)*r10*x1065))+(((1.3955641253225e-7)*x1077))+(((-1.0)*x1058*x1070))+(((-1.0)*x1058*x1074))+(((-0.00202253)*cj1))+(((-0.14998636)*sj1))+(((-1.0)*py))+((x1073*x1074))+(((-1.0)*cj1*x1081))+(((-0.00691988466190158)*x1087))+(((-0.211036575236598)*x1082))+(((0.00691988466190158)*x1086))+(((-6.25181902607023e-7)*x1058))+(((1.01965987338572e-8)*r11*x1059)));
evalcond[4]=((((0.997334464639851)*x1061*x1062))+((r21*x1059*x1060))+(((-1.0)*x1060*x1069))+(((0.0728695955625022)*cj3*r21*x1059))+x1097+((x1061*x1084))+((x1071*x1078))+((x1071*x1076))+((x1067*x1079))+(((-1.0)*x1091))+(((-0.0728695955625022)*r22*x1062))+((x1067*x1080))+(((-1.0)*x1056*x1084))+(((-1.0)*x1056*x1083))+(((-0.997334464639851)*x1056*x1062))+(((-1.0)*x1072*x1079))+(((-1.0)*x1072*x1080))+(((-1.0)*sj4*x1056*x1060)));
evalcond[5]=((((-0.0728695955625022)*r12*x1062))+((x1073*x1084))+((x1077*x1078))+(((-1.0)*x1060*x1063))+x1096+(((0.997334464639851)*x1062*x1073))+((x1067*x1075))+(((-1.0)*x1095))+((x1066*x1067))+(((-1.0)*x1058*x1083))+(((-1.0)*x1058*x1084))+((r11*x1059*x1060))+(((-1.0)*sj4*x1058*x1060))+((x1076*x1077))+(((-1.0)*x1072*x1075))+(((-1.0)*x1066*x1072))+(((-0.997334464639851)*x1058*x1062))+(((0.0728695955625022)*cj3*r11*x1059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1098=(cj4*cj5);
IkReal x1099=((0.00238797124439986)*cj1);
IkReal x1100=(r10*sj1);
IkReal x1101=(cj5*sj4);
IkReal x1102=((0.0728309674939976)*cj4);
IkReal x1103=((0.0326831239315186)*r20);
IkReal x1104=((0.99680577906496)*cj1);
IkReal x1105=(cj4*r12);
IkReal x1106=(sj4*sj5);
IkReal x1107=((0.99680577906496)*sj1);
IkReal x1108=((0.00238797124439986)*sj1);
IkReal x1109=((0.0326831239315186)*cj1);
IkReal x1110=(r12*sj4);
IkReal x1111=((0.0728309674939976)*sj1);
IkReal x1112=((0.0326831239315186)*sj1);
IkReal x1113=((0.0728309674939976)*cj1);
IkReal x1114=(r21*sj5);
IkReal x1115=(cj4*r22);
IkReal x1116=(r11*sj5);
IkReal x1117=(r22*sj4);
IkReal x1118=(sj1*x1116);
if( IKabs((((r11*x1104*x1106))+((x1111*x1117))+(((-1.0)*cj1*x1102*x1116))+(((-1.0)*x1109*x1115))+(((-1.0)*r21*x1106*x1107))+((r20*x1101*x1107))+((sj1*x1102*x1114))+(((-1.0)*cj1*x1101*x1103))+((r11*x1106*x1112))+(((0.00238797124439986)*x1098*x1100))+(((-1.0)*cj4*x1108*x1116))+((r10*x1098*x1113))+(((-1.0)*x1108*x1110))+(((-1.0)*x1099*x1117))+((r21*x1106*x1109))+(((-1.0)*x1104*x1105))+(((-1.0)*cj4*x1099*x1114))+(((-1.0)*x1110*x1113))+(((-0.0326831239315186)*x1100*x1101))+((x1107*x1115))+(((-1.0)*r10*x1101*x1104))+(((-1.0)*x1105*x1112))+((r20*x1098*x1099))+(((-1.0)*r20*x1098*x1111)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1098*x1099))+((cj4*x1099*x1116))+((r21*x1104*x1106))+(((-1.0)*cj1*x1102*x1114))+((x1105*x1109))+(((-1.0)*sj1*x1101*x1103))+(((-1.0)*x1112*x1115))+(((-1.0)*x1113*x1117))+(((-1.0)*r20*x1101*x1104))+((r11*x1106*x1107))+((x1099*x1110))+(((-1.0)*cj4*x1108*x1114))+(((-1.0)*x1108*x1117))+((r21*x1106*x1112))+(((-0.99680577906496)*x1100*x1101))+(((-1.0)*r11*x1106*x1109))+((r20*x1098*x1113))+(((-1.0)*x1104*x1115))+((r20*x1098*x1108))+(((-1.0)*x1110*x1111))+((r10*x1101*x1109))+(((-1.0)*x1102*x1118))+(((-1.0)*x1105*x1107))+(((0.0728309674939976)*x1098*x1100)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x1104*x1106))+((x1111*x1117))+(((-1.0)*cj1*x1102*x1116))+(((-1.0)*x1109*x1115))+(((-1.0)*r21*x1106*x1107))+((r20*x1101*x1107))+((sj1*x1102*x1114))+(((-1.0)*cj1*x1101*x1103))+((r11*x1106*x1112))+(((0.00238797124439986)*x1098*x1100))+(((-1.0)*cj4*x1108*x1116))+((r10*x1098*x1113))+(((-1.0)*x1108*x1110))+(((-1.0)*x1099*x1117))+((r21*x1106*x1109))+(((-1.0)*x1104*x1105))+(((-1.0)*cj4*x1099*x1114))+(((-1.0)*x1110*x1113))+(((-0.0326831239315186)*x1100*x1101))+((x1107*x1115))+(((-1.0)*r10*x1101*x1104))+(((-1.0)*x1105*x1112))+((r20*x1098*x1099))+(((-1.0)*r20*x1098*x1111))))+IKsqr(((((-1.0)*r10*x1098*x1099))+((cj4*x1099*x1116))+((r21*x1104*x1106))+(((-1.0)*cj1*x1102*x1114))+((x1105*x1109))+(((-1.0)*sj1*x1101*x1103))+(((-1.0)*x1112*x1115))+(((-1.0)*x1113*x1117))+(((-1.0)*r20*x1101*x1104))+((r11*x1106*x1107))+((x1099*x1110))+(((-1.0)*cj4*x1108*x1114))+(((-1.0)*x1108*x1117))+((r21*x1106*x1112))+(((-0.99680577906496)*x1100*x1101))+(((-1.0)*r11*x1106*x1109))+((r20*x1098*x1113))+(((-1.0)*x1104*x1115))+((r20*x1098*x1108))+(((-1.0)*x1110*x1111))+((r10*x1101*x1109))+(((-1.0)*x1102*x1118))+(((-1.0)*x1105*x1107))+(((0.0728309674939976)*x1098*x1100))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r11*x1104*x1106))+((x1111*x1117))+(((-1.0)*cj1*x1102*x1116))+(((-1.0)*x1109*x1115))+(((-1.0)*r21*x1106*x1107))+((r20*x1101*x1107))+((sj1*x1102*x1114))+(((-1.0)*cj1*x1101*x1103))+((r11*x1106*x1112))+(((0.00238797124439986)*x1098*x1100))+(((-1.0)*cj4*x1108*x1116))+((r10*x1098*x1113))+(((-1.0)*x1108*x1110))+(((-1.0)*x1099*x1117))+((r21*x1106*x1109))+(((-1.0)*x1104*x1105))+(((-1.0)*cj4*x1099*x1114))+(((-1.0)*x1110*x1113))+(((-0.0326831239315186)*x1100*x1101))+((x1107*x1115))+(((-1.0)*r10*x1101*x1104))+(((-1.0)*x1105*x1112))+((r20*x1098*x1099))+(((-1.0)*r20*x1098*x1111))), ((((-1.0)*r10*x1098*x1099))+((cj4*x1099*x1116))+((r21*x1104*x1106))+(((-1.0)*cj1*x1102*x1114))+((x1105*x1109))+(((-1.0)*sj1*x1101*x1103))+(((-1.0)*x1112*x1115))+(((-1.0)*x1113*x1117))+(((-1.0)*r20*x1101*x1104))+((r11*x1106*x1107))+((x1099*x1110))+(((-1.0)*cj4*x1108*x1114))+(((-1.0)*x1108*x1117))+((r21*x1106*x1112))+(((-0.99680577906496)*x1100*x1101))+(((-1.0)*r11*x1106*x1109))+((r20*x1098*x1113))+(((-1.0)*x1104*x1115))+((r20*x1098*x1108))+(((-1.0)*x1110*x1111))+((r10*x1101*x1109))+(((-1.0)*x1102*x1118))+(((-1.0)*x1105*x1107))+(((0.0728309674939976)*x1098*x1100))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1119=IKcos(j2);
IkReal x1120=IKsin(j2);
IkReal x1121=(cj5*r20);
IkReal x1122=((0.0728701052062903)*cj4);
IkReal x1123=(cj5*r10);
IkReal x1124=(sj4*sj5);
IkReal x1125=((0.000272535012753886)*sj3);
IkReal x1126=(r21*sj5);
IkReal x1127=(cj3*cj4);
IkReal x1128=(cj4*r12);
IkReal x1129=((0.997341439912743)*sj4);
IkReal x1130=((1.08150140232244e-9)*sj5);
IkReal x1131=(r10*sj5);
IkReal x1132=((0.999993006133494)*sj3);
IkReal x1133=((1.08150140232244e-9)*cj5);
IkReal x1134=(cj4*r22);
IkReal x1135=((1.01965987338572e-8)*sj4);
IkReal x1136=(r22*sj4);
IkReal x1137=((0.0037400112430517)*cj3);
IkReal x1138=(r11*sj5);
IkReal x1139=((1.3955641253225e-7)*cj4);
IkReal x1140=(cj5*r11);
IkReal x1141=((0.00373006819843503)*sj3);
IkReal x1142=(r12*sj4);
IkReal x1143=((0.997334464639851)*cj3);
IkReal x1144=(cj5*r21);
IkReal x1145=(r20*sj5);
IkReal x1146=((0.211036575236598)*x1120);
IkReal x1147=(sj1*x1119);
IkReal x1148=((0.0728695955625022)*cj3*sj4);
IkReal x1149=(cj4*x1141);
IkReal x1150=(cj1*x1120);
IkReal x1151=(cj1*x1119);
IkReal x1152=(sj1*x1120);
IkReal x1153=((0.999462911269554)*x1150);
IkReal x1154=((0.999462911269554)*x1147);
IkReal x1155=((0.0327702455985164)*x1152);
IkReal x1156=((0.0327702455985164)*x1151);
IkReal x1157=((0.999462911269554)*x1152);
IkReal x1158=((0.999462911269554)*x1151);
IkReal x1159=((0.0327702455985164)*x1147);
IkReal x1160=((0.0327702455985164)*x1150);
IkReal x1161=(x1159+x1158+x1160);
IkReal x1162=(x1155+x1154+x1153);
evalcond[0]=(x1157+((x1121*x1122))+(((-1.0)*x1121*x1129))+(((-1.0)*x1122*x1126))+(((-0.0728701052062903)*x1136))+(((-1.0)*x1161))+(((0.997341439912743)*r21*x1124))+(((-0.997341439912743)*x1134)));
evalcond[1]=(x1156+(((-1.0)*x1122*x1138))+(((-1.0)*x1123*x1129))+((x1122*x1123))+(((-1.0)*x1162))+(((-0.0728701052062903)*x1142))+(((0.997341439912743)*r11*x1124))+(((-0.997341439912743)*x1128)));
evalcond[2]=(((x1126*x1139))+(((0.00691988466190158)*x1150))+(((1.01965987338572e-8)*r21*x1124))+(((-1.0)*x1121*x1135))+(((-1.0)*x1121*x1139))+(((0.14998636)*cj1))+(((0.211036575236598)*x1151))+(((0.00691988466190158)*x1147))+(((-1.0)*pz))+(((-1.01965987338572e-8)*x1134))+(((6.25181902607023e-7)*x1126))+(((1.3955641253225e-7)*x1136))+(((-1.0)*sj1*x1146))+(((-1.0)*r21*x1133))+(((-1.0)*r20*x1130))+(((-0.00202253)*sj1))+(((-6.25181902607023e-7)*x1121)));
evalcond[3]=((((1.3955641253225e-7)*x1142))+(((-1.0)*r11*x1133))+(((1.01965987338572e-8)*r11*x1124))+(((0.00691988466190158)*x1152))+(((-1.0)*r10*x1130))+(((0.14998636)*sj1))+(((-0.00691988466190158)*x1151))+((cj1*x1146))+(((-1.0)*x1123*x1135))+(((-1.0)*x1123*x1139))+(((6.25181902607023e-7)*x1138))+(((-1.0)*py))+(((0.211036575236598)*x1147))+(((-1.01965987338572e-8)*x1128))+((x1138*x1139))+(((-6.25181902607023e-7)*x1123))+(((0.00202253)*cj1)));
evalcond[4]=(x1162+(((-1.0)*x1121*x1149))+(((-1.0)*x1121*x1148))+(((-1.0)*x1137*x1145))+(((-1.0)*x1137*x1144))+(((-1.0)*x1156))+((x1132*x1144))+((x1132*x1145))+((x1126*x1149))+(((-0.0728695955625022)*r22*x1127))+(((0.0728695955625022)*cj3*r21*x1124))+(((-1.0)*sj4*x1121*x1125))+((r21*x1124*x1125))+(((0.997334464639851)*x1126*x1127))+(((-0.997334464639851)*x1121*x1127))+(((-1.0)*x1125*x1134))+((x1136*x1141))+((x1136*x1143)));
evalcond[5]=(x1157+(((-1.0)*x1137*x1140))+(((-1.0)*x1123*x1149))+(((-1.0)*x1123*x1148))+((x1131*x1132))+((x1141*x1142))+(((-1.0)*x1131*x1137))+((x1142*x1143))+((x1132*x1140))+(((-0.0728695955625022)*r12*x1127))+((r11*x1124*x1125))+(((-0.997334464639851)*x1123*x1127))+(((0.997334464639851)*x1127*x1138))+(((0.0728695955625022)*cj3*r11*x1124))+(((-1.0)*x1125*x1128))+(((-1.0)*x1161))+(((-1.0)*sj4*x1123*x1125))+((x1138*x1149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1163=((0.99680577906496)*sj4);
IkReal x1164=((0.0728309674939976)*cj4);
IkReal x1165=((0.00238797124439986)*cj1);
IkReal x1166=(r22*sj0);
IkReal x1167=(cj4*cj5);
IkReal x1168=((0.0326831239315186)*sj4);
IkReal x1169=(r12*sj1);
IkReal x1170=((0.99680577906496)*cj4);
IkReal x1171=((0.00238797124439986)*cj4);
IkReal x1172=((0.0728309674939976)*sj4);
IkReal x1173=((0.00238797124439986)*sj4);
IkReal x1174=((0.0326831239315186)*cj4);
IkReal x1175=(cj1*r12);
IkReal x1176=(r20*sj0);
IkReal x1177=(r11*sj5);
IkReal x1178=(cj5*r10*sj1);
IkReal x1179=(sj1*x1177);
IkReal x1180=(cj1*x1170);
IkReal x1181=(r21*sj0*sj5);
IkReal x1182=(cj5*x1176);
IkReal x1183=(cj1*cj5*r10);
CheckValue<IkReal> x1184=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1184.valid){
continue;
}
CheckValue<IkReal> x1185 = IKatan2WithCheck(IkReal(((((-1.0)*x1165*x1167*x1176))+(((-1.0)*x1168*x1178))+((x1168*x1179))+(((-1.0)*x1172*x1175))+((sj1*x1163*x1181))+((x1164*x1183))+(((-1.0)*x1171*x1179))+((cj1*x1163*x1177))+((sj1*x1164*x1182))+(((0.00238797124439986)*r10*sj1*x1167))+((cj4*x1165*x1181))+((sj4*x1165*x1166))+(((-1.0)*x1170*x1175))+(((-1.0)*x1169*x1173))+(((-1.0)*x1169*x1174))+((cj1*x1168*x1182))+(((-1.0)*cj1*x1164*x1177))+(((-1.0)*x1163*x1183))+(((-1.0)*sj1*x1164*x1181))+((cj1*x1166*x1174))+(((-1.0)*cj1*x1168*x1181))+(((-1.0)*sj1*x1163*x1182))+(((-1.0)*sj1*x1166*x1172))+(((-1.0)*sj1*x1166*x1170)))),IkReal((((x1164*x1178))+((cj1*x1164*x1181))+(((-1.0)*sj1*x1168*x1181))+((sj1*x1168*x1182))+((x1174*x1175))+((x1166*x1180))+(((-1.0)*r10*x1165*x1167))+((x1163*x1179))+(((-1.0)*x1163*x1178))+(((-1.0)*cj1*x1164*x1182))+(((-0.00238797124439986)*sj1*x1167*x1176))+((sj1*x1166*x1174))+((sj1*x1166*x1173))+((r12*sj4*x1165))+((sj1*x1171*x1181))+(((-1.0)*x1169*x1172))+(((-1.0)*x1169*x1170))+(((-1.0)*cj1*x1168*x1177))+(((-1.0)*cj1*x1163*x1181))+(((-1.0)*x1164*x1179))+((x1168*x1183))+((cj1*x1166*x1172))+((cj1*x1163*x1182))+((cj4*x1165*x1177)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1185.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x1184.value)))+(x1185.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1186=IKcos(j2);
IkReal x1187=IKsin(j2);
IkReal x1188=(cj3*cj5);
IkReal x1189=(sj3*sj5);
IkReal x1190=((0.000272535012753886)*sj4);
IkReal x1191=(cj4*r02);
IkReal x1192=((0.00373006819843503)*cj4);
IkReal x1193=(cj5*r00);
IkReal x1194=((1.3955641253225e-7)*cj4);
IkReal x1195=((0.0728695955625022)*sj4);
IkReal x1196=((1.01965987338572e-8)*sj4);
IkReal x1197=(r01*sj5);
IkReal x1198=(cj5*r20);
IkReal x1199=((0.211036575236598)*sj0);
IkReal x1200=(r21*sj5);
IkReal x1201=((0.997334464639851)*cj3);
IkReal x1202=(cj4*r12);
IkReal x1203=((0.0728701052062903)*cj4);
IkReal x1204=((0.211036575236598)*cj0);
IkReal x1205=(cj0*sj1);
IkReal x1206=((0.997341439912743)*sj4);
IkReal x1207=((1.08150140232244e-9)*sj5);
IkReal x1208=(r02*sj4);
IkReal x1209=((1.08150140232244e-9)*cj5);
IkReal x1210=((0.000272535012753886)*sj3);
IkReal x1211=((0.999462911269554)*cj0);
IkReal x1212=(cj4*r22);
IkReal x1213=((0.0327702455985164)*cj0);
IkReal x1214=(cj5*r10);
IkReal x1215=(r12*sj4);
IkReal x1216=((0.997334464639851)*cj4);
IkReal x1217=((0.999462911269554)*sj0);
IkReal x1218=(r22*sj4);
IkReal x1219=(r11*sj5);
IkReal x1220=(sj0*sj1);
IkReal x1221=((0.0327702455985164)*sj0);
IkReal x1222=((0.0728695955625022)*cj3);
IkReal x1223=((0.00202253)*cj1);
IkReal x1224=(cj5*x1203);
IkReal x1225=(sj1*x1186);
IkReal x1226=(cj1*x1187);
IkReal x1227=((0.00373006819843503)*sj3*sj4);
IkReal x1228=((0.00691988466190158)*x1187);
IkReal x1229=(sj1*x1187);
IkReal x1230=((0.999993006133494)*cj5*sj3);
IkReal x1231=((0.0037400112430517)*cj3*sj5);
IkReal x1232=(cj1*x1186);
IkReal x1233=(sj0*x1232);
evalcond[0]=((((-0.0327702455985164)*x1225))+(((-0.0327702455985164)*x1226))+(((-0.997341439912743)*x1212))+(((-0.999462911269554)*x1232))+((x1200*x1206))+(((-1.0)*x1200*x1203))+(((-0.0728701052062903)*x1218))+((x1198*x1203))+(((-1.0)*x1198*x1206))+(((0.999462911269554)*x1229)));
evalcond[1]=((((-0.0728701052062903)*x1208))+(((-1.0)*x1213*x1232))+(((-0.997341439912743)*x1191))+((x1211*x1226))+((x1193*x1203))+((x1197*x1206))+(((0.0327702455985164)*x1187*x1205))+(((-1.0)*x1197*x1203))+(((0.999462911269554)*x1186*x1205))+(((-1.0)*x1193*x1206)));
evalcond[2]=((((0.0327702455985164)*x1187*x1220))+((x1217*x1226))+((x1217*x1225))+(((-1.0)*x1206*x1214))+(((-1.0)*x1203*x1219))+((x1206*x1219))+(((-1.0)*x1221*x1232))+(((-0.0728701052062903)*x1215))+(((-0.997341439912743)*x1202))+((x1203*x1214)));
evalcond[3]=((((0.211036575236598)*x1232))+(((-1.0)*x1194*x1198))+(((0.14998636)*cj1))+(((-1.0)*pz))+(((0.00691988466190158)*x1225))+(((0.00691988466190158)*x1226))+((x1194*x1200))+(((-1.01965987338572e-8)*x1212))+(((-1.0)*x1196*x1198))+(((-0.211036575236598)*x1229))+(((-1.0)*r21*x1209))+(((-6.25181902607023e-7)*x1198))+(((1.3955641253225e-7)*x1218))+(((6.25181902607023e-7)*x1200))+(((-1.0)*r20*x1207))+(((-0.00202253)*sj1))+((x1196*x1200)));
evalcond[4]=(((r21*x1189*x1192))+((r21*x1189*x1190))+(((-0.0327702455985164)*x1232))+(((-1.0)*r20*x1188*x1195))+(((-1.0)*x1212*x1222))+(((-1.0)*r20*x1231))+(((0.0327702455985164)*x1229))+(((-1.0)*sj3*x1192*x1198))+((x1201*x1218))+(((-1.0)*sj3*x1190*x1198))+(((0.999993006133494)*r20*x1189))+(((-1.0)*x1210*x1212))+(((-1.0)*r20*x1188*x1216))+((cj3*x1195*x1200))+((cj4*x1200*x1201))+(((-0.0037400112430517)*r21*x1188))+(((0.00373006819843503)*sj3*x1218))+((r21*x1230))+(((0.999462911269554)*x1226))+(((0.999462911269554)*x1225)));
evalcond[5]=((((-1.0)*x1193*x1196))+(((-1.0)*x1193*x1194))+(((-0.14998636)*x1205))+((x1194*x1197))+(((-1.0)*cj0*x1223))+(((6.25181902607023e-7)*x1197))+(((-1.0)*x1204*x1225))+(((-1.0)*x1204*x1226))+(((-1.01965987338572e-8)*x1191))+(((-1.0)*r01*x1209))+(((1.3955641253225e-7)*x1208))+(((-1.0)*px))+(((-1.0)*r00*x1207))+((x1196*x1197))+(((0.00691988466190158)*cj0*x1232))+(((-6.25181902607023e-7)*x1193))+(((-1.0)*x1205*x1228)));
evalcond[6]=((((-1.0)*r10*x1207))+(((6.25181902607023e-7)*x1219))+(((-1.01965987338572e-8)*x1202))+(((-1.0)*x1220*x1228))+(((0.00691988466190158)*x1233))+(((-1.0)*py))+(((-1.0)*sj0*x1223))+(((-1.0)*x1196*x1214))+(((-1.0)*x1199*x1225))+(((-1.0)*x1199*x1226))+((x1196*x1219))+(((-0.14998636)*x1220))+(((-1.0)*r11*x1209))+(((1.3955641253225e-7)*x1215))+(((-6.25181902607023e-7)*x1214))+(((-1.0)*x1194*x1214))+((x1194*x1219)));
evalcond[7]=((((-1.0)*r00*x1231))+((x1211*x1232))+((cj3*x1195*x1197))+((r01*x1189*x1190))+((r01*x1189*x1192))+(((-0.0037400112430517)*r01*x1188))+((r01*x1230))+(((-1.0)*r00*x1188*x1216))+(((-1.0)*sj3*x1192*x1193))+((cj4*x1197*x1201))+(((-1.0)*x1191*x1222))+(((-1.0)*sj3*x1190*x1193))+(((-0.999462911269554)*x1187*x1205))+(((0.999993006133494)*r00*x1189))+(((0.0327702455985164)*x1186*x1205))+(((0.00373006819843503)*sj3*x1208))+((x1201*x1208))+((x1213*x1226))+(((-1.0)*x1191*x1210))+(((-1.0)*r00*x1188*x1195)));
evalcond[8]=((((-1.0)*x1202*x1222))+(((0.999993006133494)*r10*x1189))+((x1217*x1232))+(((-1.0)*sj3*x1190*x1214))+((r11*x1189*x1190))+((r11*x1189*x1192))+(((0.0327702455985164)*x1186*x1220))+(((-1.0)*sj3*x1192*x1214))+(((-1.0)*x1202*x1210))+((x1201*x1215))+((x1221*x1226))+(((-1.0)*x1217*x1229))+(((-1.0)*r10*x1231))+(((-0.0037400112430517)*r11*x1188))+(((-1.0)*r10*x1188*x1216))+((r11*x1230))+(((0.00373006819843503)*sj3*x1215))+(((-1.0)*r10*x1188*x1195))+((cj3*x1195*x1219))+((cj4*x1201*x1219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1234=(cj1*sj4);
IkReal x1235=((0.0326831239315186)*cj5);
IkReal x1236=((0.0728309674939976)*r02);
IkReal x1237=((0.0326831239315186)*sj1);
IkReal x1238=(cj0*r20);
IkReal x1239=(sj1*sj4);
IkReal x1240=((0.00238797124439986)*r02);
IkReal x1241=((0.99680577906496)*cj1);
IkReal x1242=(cj4*sj1);
IkReal x1243=((0.00238797124439986)*cj5);
IkReal x1244=(cj4*r02);
IkReal x1245=((0.0326831239315186)*cj1);
IkReal x1246=(r01*sj5);
IkReal x1247=((0.0728309674939976)*cj5);
IkReal x1248=(cj5*r00);
IkReal x1249=(cj0*r22);
IkReal x1250=(cj1*cj4);
IkReal x1251=((0.99680577906496)*cj5);
IkReal x1252=(cj4*x1249);
IkReal x1253=(cj0*r21*sj5);
IkReal x1254=((0.0728309674939976)*x1250);
CheckValue<IkReal> x1255=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1255.valid){
continue;
}
CheckValue<IkReal> x1256 = IKatan2WithCheck(IkReal(((((-0.99680577906496)*x1242*x1249))+(((-1.0)*x1239*x1240))+(((-1.0)*r00*x1235*x1239))+(((-0.0326831239315186)*x1234*x1253))+((x1245*x1252))+((x1238*x1242*x1247))+(((-0.00238797124439986)*x1242*x1246))+((r00*x1242*x1243))+(((0.99680577906496)*x1234*x1246))+(((-0.0728309674939976)*x1242*x1253))+(((-1.0)*x1246*x1254))+(((0.00238797124439986)*x1250*x1253))+((x1234*x1235*x1238))+((sj4*x1237*x1246))+(((-0.0728309674939976)*x1239*x1249))+(((-1.0)*x1234*x1236))+(((-1.0)*x1237*x1244))+(((-1.0)*x1241*x1244))+(((0.99680577906496)*x1239*x1253))+(((-1.0)*x1238*x1239*x1251))+(((0.00238797124439986)*x1234*x1249))+(((-0.99680577906496)*x1234*x1248))+(((-1.0)*x1238*x1243*x1250))+((r00*x1247*x1250)))),IkReal(((((-0.99680577906496)*r02*x1242))+(((0.0728309674939976)*x1234*x1249))+(((-0.0728309674939976)*x1242*x1246))+((x1241*x1252))+(((0.00238797124439986)*x1242*x1253))+((r00*x1242*x1247))+(((0.00238797124439986)*x1239*x1249))+(((0.00238797124439986)*x1246*x1250))+((x1237*x1252))+(((0.99680577906496)*x1239*x1246))+((x1253*x1254))+((r00*x1234*x1235))+(((-0.99680577906496)*x1234*x1253))+(((-0.0326831239315186)*x1234*x1246))+(((-1.0)*x1236*x1239))+((x1234*x1238*x1251))+((x1244*x1245))+(((-1.0)*x1238*x1247*x1250))+(((-1.0)*x1238*x1242*x1243))+(((-0.99680577906496)*x1239*x1248))+(((-1.0)*r00*x1243*x1250))+((x1234*x1240))+((x1235*x1238*x1239))+(((-1.0)*sj4*x1237*x1253)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1256.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x1255.value)))+(x1256.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1257=IKcos(j2);
IkReal x1258=IKsin(j2);
IkReal x1259=(cj3*cj5);
IkReal x1260=(sj3*sj5);
IkReal x1261=((0.000272535012753886)*sj4);
IkReal x1262=(cj4*r02);
IkReal x1263=((0.00373006819843503)*cj4);
IkReal x1264=(cj5*r00);
IkReal x1265=((1.3955641253225e-7)*cj4);
IkReal x1266=((0.0728695955625022)*sj4);
IkReal x1267=((1.01965987338572e-8)*sj4);
IkReal x1268=(r01*sj5);
IkReal x1269=(cj5*r20);
IkReal x1270=((0.211036575236598)*sj0);
IkReal x1271=(r21*sj5);
IkReal x1272=((0.997334464639851)*cj3);
IkReal x1273=(cj4*r12);
IkReal x1274=((0.0728701052062903)*cj4);
IkReal x1275=((0.211036575236598)*cj0);
IkReal x1276=(cj0*sj1);
IkReal x1277=((0.997341439912743)*sj4);
IkReal x1278=((1.08150140232244e-9)*sj5);
IkReal x1279=(r02*sj4);
IkReal x1280=((1.08150140232244e-9)*cj5);
IkReal x1281=((0.000272535012753886)*sj3);
IkReal x1282=((0.999462911269554)*cj0);
IkReal x1283=(cj4*r22);
IkReal x1284=((0.0327702455985164)*cj0);
IkReal x1285=(cj5*r10);
IkReal x1286=(r12*sj4);
IkReal x1287=((0.997334464639851)*cj4);
IkReal x1288=((0.999462911269554)*sj0);
IkReal x1289=(r22*sj4);
IkReal x1290=(r11*sj5);
IkReal x1291=(sj0*sj1);
IkReal x1292=((0.0327702455985164)*sj0);
IkReal x1293=((0.0728695955625022)*cj3);
IkReal x1294=((0.00202253)*cj1);
IkReal x1295=(cj5*x1274);
IkReal x1296=(sj1*x1257);
IkReal x1297=(cj1*x1258);
IkReal x1298=((0.00373006819843503)*sj3*sj4);
IkReal x1299=((0.00691988466190158)*x1258);
IkReal x1300=(sj1*x1258);
IkReal x1301=((0.999993006133494)*cj5*sj3);
IkReal x1302=((0.0037400112430517)*cj3*sj5);
IkReal x1303=(cj1*x1257);
IkReal x1304=(sj0*x1303);
evalcond[0]=(((x1269*x1274))+(((-0.999462911269554)*x1303))+(((-0.0327702455985164)*x1296))+(((-0.0327702455985164)*x1297))+(((-0.997341439912743)*x1283))+(((-1.0)*x1271*x1274))+(((-1.0)*x1269*x1277))+(((0.999462911269554)*x1300))+(((-0.0728701052062903)*x1289))+((x1271*x1277)));
evalcond[1]=((((-0.0728701052062903)*x1279))+(((-1.0)*x1268*x1274))+(((0.999462911269554)*x1257*x1276))+((x1264*x1274))+(((-1.0)*x1284*x1303))+((x1282*x1297))+(((-0.997341439912743)*x1262))+(((0.0327702455985164)*x1258*x1276))+((x1268*x1277))+(((-1.0)*x1264*x1277)));
evalcond[2]=((((-1.0)*x1274*x1290))+(((-0.997341439912743)*x1273))+(((-1.0)*x1277*x1285))+(((-0.0728701052062903)*x1286))+(((-1.0)*x1292*x1303))+((x1288*x1296))+((x1288*x1297))+((x1274*x1285))+(((0.0327702455985164)*x1258*x1291))+((x1277*x1290)));
evalcond[3]=((((-0.211036575236598)*x1300))+((x1265*x1271))+(((0.14998636)*cj1))+(((-1.0)*x1267*x1269))+(((-6.25181902607023e-7)*x1269))+((x1267*x1271))+(((0.00691988466190158)*x1296))+(((0.00691988466190158)*x1297))+(((-1.0)*pz))+(((-1.01965987338572e-8)*x1283))+(((0.211036575236598)*x1303))+(((-1.0)*x1265*x1269))+(((1.3955641253225e-7)*x1289))+(((-1.0)*r21*x1280))+(((6.25181902607023e-7)*x1271))+(((-0.00202253)*sj1))+(((-1.0)*r20*x1278)));
evalcond[4]=((((-1.0)*x1283*x1293))+(((-0.0037400112430517)*r21*x1259))+((cj3*x1266*x1271))+(((-1.0)*r20*x1259*x1266))+(((0.999462911269554)*x1296))+(((0.999462911269554)*x1297))+(((-1.0)*r20*x1259*x1287))+(((-1.0)*sj3*x1261*x1269))+(((0.0327702455985164)*x1300))+((cj4*x1271*x1272))+((r21*x1301))+(((-1.0)*r20*x1302))+((x1272*x1289))+(((-0.0327702455985164)*x1303))+(((-1.0)*sj3*x1263*x1269))+((r21*x1260*x1263))+((r21*x1260*x1261))+(((0.00373006819843503)*sj3*x1289))+(((0.999993006133494)*r20*x1260))+(((-1.0)*x1281*x1283)));
evalcond[5]=((((-1.0)*x1264*x1265))+(((-1.0)*x1264*x1267))+(((1.3955641253225e-7)*x1279))+(((-1.0)*r00*x1278))+(((-1.0)*cj0*x1294))+(((-6.25181902607023e-7)*x1264))+(((-1.0)*r01*x1280))+(((-1.0)*px))+(((-1.01965987338572e-8)*x1262))+((x1267*x1268))+(((6.25181902607023e-7)*x1268))+(((-1.0)*x1276*x1299))+(((-1.0)*x1275*x1297))+(((-1.0)*x1275*x1296))+(((0.00691988466190158)*cj0*x1303))+((x1265*x1268))+(((-0.14998636)*x1276)));
evalcond[6]=((((-1.0)*sj0*x1294))+((x1267*x1290))+(((-1.0)*x1267*x1285))+(((-1.0)*py))+(((0.00691988466190158)*x1304))+(((1.3955641253225e-7)*x1286))+(((-1.01965987338572e-8)*x1273))+(((-1.0)*x1270*x1296))+(((-1.0)*x1270*x1297))+(((6.25181902607023e-7)*x1290))+(((-0.14998636)*x1291))+(((-1.0)*x1291*x1299))+(((-6.25181902607023e-7)*x1285))+(((-1.0)*r10*x1278))+(((-1.0)*r11*x1280))+((x1265*x1290))+(((-1.0)*x1265*x1285)));
evalcond[7]=((((-1.0)*x1262*x1293))+((cj3*x1266*x1268))+(((-1.0)*r00*x1302))+((x1272*x1279))+(((0.999993006133494)*r00*x1260))+(((-1.0)*sj3*x1261*x1264))+((x1282*x1303))+((cj4*x1268*x1272))+(((-1.0)*r00*x1259*x1287))+((x1284*x1297))+(((-1.0)*x1262*x1281))+(((-0.999462911269554)*x1258*x1276))+(((0.0327702455985164)*x1257*x1276))+(((-1.0)*sj3*x1263*x1264))+(((-1.0)*r00*x1259*x1266))+((r01*x1260*x1263))+((r01*x1260*x1261))+(((-0.0037400112430517)*r01*x1259))+((r01*x1301))+(((0.00373006819843503)*sj3*x1279)));
evalcond[8]=(((x1288*x1303))+(((-1.0)*sj3*x1263*x1285))+(((-1.0)*r10*x1259*x1287))+((cj3*x1266*x1290))+(((0.999993006133494)*r10*x1260))+((cj4*x1272*x1290))+((r11*x1260*x1261))+((r11*x1260*x1263))+(((-0.0037400112430517)*r11*x1259))+(((0.0327702455985164)*x1257*x1291))+(((-1.0)*x1273*x1281))+(((-1.0)*x1288*x1300))+(((-1.0)*r10*x1302))+((r11*x1301))+(((-1.0)*sj3*x1261*x1285))+((x1272*x1286))+(((-1.0)*r10*x1259*x1266))+(((0.00373006819843503)*sj3*x1286))+(((-1.0)*x1273*x1293))+((x1292*x1297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1305=((0.00373006819843503)*cj4);
IkReal x1306=(r01*sj5);
IkReal x1307=(cj5*r20);
IkReal x1308=((0.0728695955625022)*sj4);
IkReal x1309=((0.0728695955625022)*cj4);
IkReal x1310=((0.0037400112430517)*cj5);
IkReal x1311=(r20*sj5);
IkReal x1312=((0.00373006819843503)*sj4);
IkReal x1313=((0.000272535012753886)*cj4);
IkReal x1314=(cj5*r00);
IkReal x1315=((0.000272535012753886)*sj4);
IkReal x1316=(r21*sj5);
IkReal x1317=((0.997334464639851)*cj4);
IkReal x1318=((0.997334464639851)*sj4);
IkReal x1319=(r00*sj5);
IkReal x1320=((0.999993006133494)*cj5);
IkReal x1321=(((x1307*x1315))+((x1305*x1307))+((r22*x1313)));
IkReal x1322=(((x1305*x1316))+((r22*x1312))+(((0.999993006133494)*x1311))+((r21*x1320))+((x1315*x1316)));
IkReal x1323=((((-1.0)*x1307*x1308))+((x1316*x1317))+(((-1.0)*r22*x1309))+((x1308*x1316))+(((-1.0)*x1307*x1317))+((r22*x1318))+(((-0.0037400112430517)*x1311))+(((-1.0)*r21*x1310)));
CheckValue<IkReal> x1324=IKPowWithIntegerCheck(IKsign((((((x1322+(((-1.0)*x1321))))*((((x1306*x1308))+(((-1.0)*x1308*x1314))+(((-1.0)*r01*x1310))+(((-1.0)*r02*x1309))+((x1306*x1317))+(((-1.0)*x1314*x1317))+(((-0.0037400112430517)*x1319))+((r02*x1318))))))+((x1323*((((x1314*x1315))+(((-1.0)*x1306*x1315))+(((-1.0)*r01*x1320))+((x1305*x1314))+(((-1.0)*r02*x1312))+(((-0.999993006133494)*x1319))+((r02*x1313))+(((-1.0)*x1305*x1306)))))))),-1);
if(!x1324.valid){
continue;
}
CheckValue<IkReal> x1325 = IKatan2WithCheck(IkReal((sj0*((x1321+(((-1.0)*x1322)))))),IkReal(((-1.0)*sj0*x1323)),IKFAST_ATAN2_MAGTHRESH);
if(!x1325.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1324.value)))+(x1325.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1326=IKsin(j3);
IkReal x1327=IKcos(j3);
IkReal x1328=((0.00373006819843503)*cj4);
IkReal x1329=(r01*sj5);
IkReal x1330=((0.999993006133494)*sj5);
IkReal x1331=((0.0728695955625022)*cj4);
IkReal x1332=((0.0037400112430517)*cj5);
IkReal x1333=(cj5*r10);
IkReal x1334=((0.0728695955625022)*sj4);
IkReal x1335=(r11*sj5);
IkReal x1336=((0.997334464639851)*cj4);
IkReal x1337=((0.000272535012753886)*sj4);
IkReal x1338=((0.00373006819843503)*sj4);
IkReal x1339=((0.000272535012753886)*cj4);
IkReal x1340=((0.0037400112430517)*sj5);
IkReal x1341=(cj5*r00);
IkReal x1342=(r21*sj5);
IkReal x1343=((0.997334464639851)*sj4);
IkReal x1344=(cj5*r20);
IkReal x1345=((0.999993006133494)*cj5);
IkReal x1346=(sj4*x1344);
evalcond[0]=(((x1326*(((((-1.0)*x1336*x1344))+(((-1.0)*r20*x1340))+((r22*x1343))+(((-1.0)*r22*x1331))+((x1334*x1342))+((x1336*x1342))+(((-1.0)*r21*x1332))+(((-1.0)*x1334*x1344))))))+((x1327*(((((-1.0)*r21*x1345))+(((-1.0)*r22*x1338))+((x1337*x1344))+((r22*x1339))+(((-1.0)*x1328*x1342))+(((-1.0)*r20*x1330))+(((-1.0)*x1337*x1342))+((x1328*x1344)))))));
evalcond[1]=(sj0+((x1326*(((((-1.0)*x1336*x1341))+((x1329*x1336))+((x1329*x1334))+(((-1.0)*r00*x1340))+((r02*x1343))+(((-1.0)*r01*x1332))+(((-1.0)*r02*x1331))+(((-1.0)*x1334*x1341))))))+((x1327*(((((-1.0)*x1328*x1329))+(((-1.0)*r01*x1345))+((x1337*x1341))+(((-1.0)*x1329*x1337))+(((-1.0)*r00*x1330))+(((-1.0)*r02*x1338))+((r02*x1339))+((x1328*x1341)))))));
evalcond[2]=(((x1326*((((x1335*x1336))+(((-1.0)*x1333*x1334))+(((-1.0)*x1333*x1336))+((r12*x1343))+(((-1.0)*r12*x1331))+(((-1.0)*r10*x1340))+((x1334*x1335))+(((-1.0)*r11*x1332))))))+((x1327*(((((-1.0)*x1335*x1337))+((r12*x1339))+(((-1.0)*x1328*x1335))+(((-1.0)*r11*x1345))+((x1328*x1333))+(((-1.0)*r10*x1330))+(((-1.0)*r12*x1338))+((x1333*x1337))))))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[8+1], zeror[8];
int numroots;
IkReal x1347=(r21*sj5);
IkReal x1348=(cj5*r20);
IkReal x1349=((1.3955641253225e-7)*cj4);
IkReal x1350=((1.01965987338572e-8)*sj4);
IkReal x1351=((0.0728701052062903)*cj4);
IkReal x1352=(cj4*r22);
IkReal x1353=(r22*sj4);
IkReal x1354=((0.997341439912743)*sj4);
IkReal x1355=((1.3955641253225e-7)*x1353);
IkReal x1356=((6.25181902607023e-7)*x1347);
IkReal x1357=(x1348*x1351);
IkReal x1358=(x1347*x1354);
IkReal x1359=(x1347*x1349);
IkReal x1360=(x1347*x1350);
IkReal x1361=(x1358+x1357);
IkReal x1362=(((x1348*x1354))+((x1347*x1351))+(((0.997341439912743)*x1352))+(((0.0728701052062903)*x1353)));
IkReal x1363=(x1359+x1356+x1355+x1360);
IkReal x1364=((((1.08150140232244e-9)*r20*sj5))+(((6.25181902607023e-7)*x1348))+((x1348*x1350))+(((1.01965987338572e-8)*x1352))+((x1348*x1349))+(((1.0)*pz))+(((1.08150140232244e-9)*cj5*r21)));
IkReal x1365=((-0.999462911269554)+x1361+(((-1.0)*x1362)));
IkReal x1366=((0.999462911269554)+x1361+(((-1.0)*x1362)));
IkReal x1367=((0.361022935236598)+x1363+(((-1.0)*x1364)));
IkReal x1368=((-0.0610502152365978)+x1363+(((-1.0)*x1364)));
IkReal x1369=((-0.361022935236598)+x1363+(((-1.0)*x1364)));
IkReal x1370=((0.0610502152365977)+x1363+(((-1.0)*x1364)));
IkReal gconst0=x1365;
IkReal gconst1=x1366;
IkReal gconst2=x1367;
IkReal gconst3=0.0138397693238032;
IkReal gconst4=x1368;
IkReal gconst5=x1365;
IkReal gconst6=x1366;
IkReal gconst7=x1367;
IkReal gconst8=0.0138397693238032;
IkReal gconst9=x1368;
IkReal gconst10=0.00979470932380316;
IkReal gconst11=-0.844146300946391;
IkReal gconst12=-0.0178848293238032;
IkReal gconst13=0.00979470932380316;
IkReal gconst14=-0.844146300946391;
IkReal gconst15=-0.0178848293238032;
IkReal gconst16=x1366;
IkReal gconst17=x1365;
IkReal gconst18=x1369;
IkReal gconst19=-0.0138397693238032;
IkReal gconst20=x1370;
IkReal gconst21=x1366;
IkReal gconst22=x1365;
IkReal gconst23=x1369;
IkReal gconst24=-0.0138397693238032;
IkReal gconst25=x1370;
IkReal x1371=((0.0655404911970328)*gconst13);
IkReal x1372=(gconst20*gconst22);
IkReal x1373=(gconst1*gconst5);
IkReal x1374=(gconst14*gconst3);
IkReal x1375=((0.0655404911970328)*gconst24);
IkReal x1376=(gconst19*gconst21);
IkReal x1377=(gconst1*gconst11);
IkReal x1378=(gconst15*gconst21);
IkReal x1379=((1.0)*gconst12);
IkReal x1380=(gconst2*gconst25);
IkReal x1381=(gconst16*gconst23);
IkReal x1382=(gconst13*gconst16);
IkReal x1383=(gconst6*gconst7);
IkReal x1384=((1.0)*gconst1);
IkReal x1385=(gconst11*gconst17);
IkReal x1386=(gconst17*gconst21);
IkReal x1387=((0.00429555598634833)*gconst20);
IkReal x1388=(gconst10*gconst17);
IkReal x1389=((0.0655404911970328)*gconst12);
IkReal x1390=(gconst5*gconst9);
IkReal x1391=((0.0655404911970328)*gconst23);
IkReal x1392=(gconst22*gconst23);
IkReal x1393=((0.00429555598634833)*gconst8);
IkReal x1394=(gconst20*gconst21);
IkReal x1395=((3.99785164507822)*gconst24);
IkReal x1396=(gconst1*gconst3);
IkReal x1397=(gconst0*gconst15);
IkReal x1398=((0.0655404911970328)*gconst4);
IkReal x1399=((3.99785164507822)*gconst7);
IkReal x1400=(gconst10*gconst9);
IkReal x1401=(gconst3*gconst7);
IkReal x1402=((0.00429555598634833)*gconst7);
IkReal x1403=((0.524042321102584)*gconst20);
IkReal x1404=((0.0655404911970328)*gconst8);
IkReal x1405=((1.0)*gconst8);
IkReal x1406=((0.524042321102584)*gconst12);
IkReal x1407=((1.0)*gconst16);
IkReal x1408=((0.0655404911970328)*gconst19);
IkReal x1409=(gconst14*gconst17);
IkReal x1410=(gconst4*gconst5);
IkReal x1411=((3.99785164507822)*gconst8);
IkReal x1412=((0.0655404911970328)*gconst1);
IkReal x1413=((0.0655404911970328)*gconst10);
IkReal x1414=(gconst14*gconst21);
IkReal x1415=(gconst18*gconst25);
IkReal x1416=(gconst17*gconst5);
IkReal x1417=(gconst14*gconst5);
IkReal x1418=(gconst2*gconst7);
IkReal x1419=(gconst21*gconst25);
IkReal x1420=((0.0655404911970328)*gconst20);
IkReal x1421=((0.00429555598634833)*gconst4);
IkReal x1422=(gconst15*gconst5);
IkReal x1423=((0.0655404911970328)*gconst2);
IkReal x1424=((0.0655404911970328)*gconst14);
IkReal x1425=(gconst4*gconst7);
IkReal x1426=((1.0)*gconst24);
IkReal x1427=(gconst21*gconst8);
IkReal x1428=((0.00429555598634833)*gconst12);
IkReal x1429=(gconst17*gconst19);
IkReal x1430=((3.99785164507822)*gconst23);
IkReal x1431=((0.00429555598634833)*gconst19);
IkReal x1432=(gconst1*gconst21);
IkReal x1433=(gconst2*gconst9);
IkReal x1434=(gconst13*gconst4);
IkReal x1435=(gconst0*gconst6);
IkReal x1436=(gconst18*gconst9);
IkReal x1437=(gconst18*gconst22);
IkReal x1438=((1.0)*gconst17);
IkReal x1439=(gconst0*gconst20);
IkReal x1440=((0.0655404911970328)*gconst25);
IkReal x1441=(gconst17*gconst18);
IkReal x1442=(gconst15*gconst2);
IkReal x1443=(gconst0*gconst4);
IkReal x1444=((0.0655404911970328)*gconst7);
IkReal x1445=(gconst20*gconst5);
IkReal x1446=((0.00429555598634833)*gconst23);
IkReal x1447=(gconst13*gconst6);
IkReal x1448=((3.99785164507822)*gconst14);
IkReal x1449=(gconst2*gconst6);
IkReal x1450=(gconst12*gconst22);
IkReal x1451=(gconst12*gconst21);
IkReal x1452=((0.0655404911970328)*gconst17);
IkReal x1453=(gconst0*gconst7);
IkReal x1454=(gconst0*gconst9);
IkReal x1455=(gconst16*gconst25);
IkReal x1456=((3.99785164507822)*gconst13);
IkReal x1457=(gconst13*x1428);
IkReal x1458=(gconst23*x1421);
IkReal x1459=(gconst7*x1387);
IkReal x1460=(gconst5*x1404);
IkReal x1461=((1.0)*gconst0*gconst25);
IkReal x1462=(x1375*x1394);
IkReal x1463=(x1391*x1429);
IkReal x1464=(gconst5*gconst8*x1398);
IkReal x1465=(x1396*x1444);
IkReal x1466=(x1463+x1462);
IkReal x1467=(x1465+x1464);
IkReal x1468=(x1457+x1458+x1459);
op[0]=((((-1.0)*gconst17*x1376*x1426))+(((-1.0)*gconst18*x1392*x1438))+(((-1.0)*gconst25*x1394*x1407))+(((-1.0)*gconst23*x1387))+((x1386*x1415))+((x1372*x1381))+x1466);
op[1]=(((x1429*x1430))+(((-1.0)*x1388*x1392))+((x1371*x1429))+((x1375*x1451))+(((-1.0)*gconst20*x1378*x1407))+((gconst10*gconst25*x1386))+(((-1.0)*x1372*x1391))+((x1381*x1420))+((x1394*x1440))+((x1394*x1395))+(((-1.0)*gconst23*x1428))+(((-1.0)*x1415*x1452))+(((-1.0)*x1375*x1376))+(((0.0655404911970328)*gconst21*x1415))+(((-1.0)*gconst13*x1387))+((gconst23*x1431))+((x1372*x1382))+((x1381*x1450))+(((-1.0)*x1391*x1437))+(((-1.0)*gconst23*x1403))+((x1385*x1391))+((x1420*x1455))+((x1375*x1429))+(((-1.0)*gconst13*x1437*x1438))+(((-1.0)*gconst16*x1379*x1419))+(((-1.0)*x1376*x1409))+((x1394*x1424))+(((-1.0)*gconst21*x1385*x1426))+(((-1.0)*x1391*x1441))+((x1378*x1441))+(((-1.0)*gconst24*x1387)));
op[2]=((((-1.0)*gconst4*x1407*x1419))+((x1382*x1450))+((x1415*x1416))+((x1380*x1386))+(((-1.0)*gconst2*x1392*x1438))+((x1381*x1389))+((gconst11*x1446))+((gconst22*gconst4*x1381))+((x1371*x1385))+((x1386*x1436))+(((-1.0)*x1388*x1440))+(((-1.0)*gconst16*x1378*x1379))+(((-1.0)*x1389*x1392))+(((0.262021160551292)*gconst19*gconst23))+((gconst15*gconst16*x1420))+((x1413*x1419))+(((-1.0)*gconst25*x1407*x1445))+((x1378*x1420))+(((-1.0)*x1371*x1372))+(((-1.0)*x1376*x1424))+((x1394*x1448))+(((-1.0)*x1468))+(((-1.0)*x1466))+(((-0.0655404911970328)*gconst15*x1441))+(((-1.0)*gconst11*gconst21*x1375))+(((-0.00429555598634833)*x1415))+((x1389*x1455))+(((-1.0)*x1371*x1437))+(((-1.0)*gconst7*x1437*x1438))+(((-1.0)*gconst24*x1376*x1384))+((gconst17*gconst7*x1408))+(((-1.0)*gconst24*x1428))+(((-1.0)*gconst3*x1386*x1426))+(((-1.0)*gconst9*x1394*x1407))+((gconst16*gconst20*x1371))+((gconst20*gconst6*x1381))+(((-15.9785222200683)*gconst20*gconst23))+((x1395*x1451))+(((-1.0)*x1385*x1414))+((x1394*x1404))+((x1389*x1414))+((x1389*x1419))+(((-1.0)*gconst10*gconst22*x1391))+(((-1.0)*gconst18*x1384*x1392))+(((-1.0)*gconst13*x1403))+((x1375*x1445))+((gconst13*x1431))+(((-1.0)*gconst17*x1376*x1405))+(((-0.262021160551292)*gconst20*gconst24))+((x1415*x1432))+((x1375*x1385))+((gconst16*gconst7*x1372))+((gconst21*gconst4*x1375))+((x1408*x1409))+(((-1.0)*gconst13*gconst22*x1388))+(((-1.0)*gconst23*x1406))+((gconst0*gconst23*x1372))+(((-1.0)*x1388*x1391))+(((-1.0)*gconst14*x1387))+((gconst24*x1431))+(((0.0655404911970328)*gconst18*x1378))+((gconst1*gconst19*x1391))+(((-1.0)*gconst19*x1416*x1426))+(((-1.0)*gconst18*x1446))+(((-1.0)*gconst18*gconst23*gconst6*x1438))+(((-1.0)*x1394*x1461))+((x1429*x1456))+((x1378*x1388))+(((-1.0)*x1371*x1441))+((gconst17*gconst3*x1391))+(((-1.0)*gconst25*x1387))+((x1385*x1430)));
op[3]=((((-0.00429555598634833)*gconst12*gconst25))+(((0.0655404911970328)*gconst1*gconst19*gconst24))+(((-1.0)*gconst10*gconst17*gconst23*gconst6))+((gconst13*gconst16*gconst20*gconst6))+(((-1.0)*gconst13*gconst17*gconst18*gconst6))+(((0.00429555598634833)*gconst11*gconst24))+(((0.0655404911970328)*gconst2*gconst21*gconst25))+(((0.0655404911970328)*gconst17*gconst24*gconst3))+(((0.0655404911970328)*gconst18*gconst25*gconst5))+(((-0.0655404911970328)*gconst18*gconst23*gconst6))+(((0.00429555598634833)*gconst11*gconst13))+(((-1.0)*gconst12*gconst16*gconst25*gconst5))+(((-15.9785222200683)*gconst12*gconst23))+(((-0.00429555598634833)*gconst24*gconst4))+(((0.0655404911970328)*gconst11*gconst14*gconst17))+((gconst10*gconst17*gconst25*gconst5))+(((0.262021160551292)*gconst11*gconst23))+(((-0.0655404911970328)*gconst20*gconst23*gconst6))+(((0.00429555598634833)*gconst19*gconst7))+(((-1.0)*gconst1*gconst11*gconst21*gconst24))+(((-0.0655404911970328)*gconst11*gconst14*gconst21))+(((-1.0)*gconst0*gconst12*gconst21*gconst25))+(((0.262021160551292)*gconst13*gconst19))+(((0.524042321102584)*gconst20*gconst23))+(((-0.0655404911970328)*gconst2*gconst22*gconst23))+(((3.99785164507822)*gconst17*gconst23*gconst3))+((gconst13*gconst16*gconst22*gconst4))+((gconst15*gconst17*gconst18*gconst5))+(((-0.0655404911970328)*gconst17*gconst18*gconst7))+(((-0.0655404911970328)*gconst17*gconst18*gconst9))+(((0.0655404911970328)*gconst10*gconst15*gconst21))+(((-1.0)*gconst11*gconst17*gconst21*gconst8))+(((-0.0655404911970328)*gconst19*gconst21*gconst8))+((gconst12*gconst16*gconst22*gconst7))+((gconst1*gconst15*gconst18*gconst21))+(((-1.0)*gconst15*gconst16*gconst21*gconst4))+(((0.0655404911970328)*gconst20*gconst21*gconst9))+(((3.99785164507822)*gconst12*gconst14*gconst21))+(((-1.0)*gconst1*gconst13*gconst18*gconst22))+(((0.0655404911970328)*gconst12*gconst15*gconst21))+(((-0.0655404911970328)*gconst17*gconst2*gconst23))+(((-0.0655404911970328)*gconst17*gconst2*gconst25))+(((-0.262021160551292)*gconst12*gconst24))+(((-0.00429555598634833)*gconst19*gconst23))+(((0.0655404911970328)*gconst12*gconst13*gconst16))+(((0.0655404911970328)*gconst1*gconst11*gconst23))+(((0.0655404911970328)*gconst12*gconst15*gconst16))+(((-0.524042321102584)*gconst23*gconst4))+(((0.00429555598634833)*gconst23*gconst3))+(((3.99785164507822)*gconst20*gconst21*gconst8))+((gconst0*gconst12*gconst22*gconst23))+(((-1.0)*gconst0*gconst15*gconst20*gconst21))+(((0.0655404911970328)*gconst12*gconst24*gconst5))+(((0.0655404911970328)*gconst12*gconst21*gconst8))+((gconst1*gconst10*gconst21*gconst25))+(((-0.00429555598634833)*gconst10*gconst25))+(((-0.00429555598634833)*gconst10*gconst23))+(((-1.0)*gconst1*gconst14*gconst19*gconst21))+(((-15.9785222200683)*gconst13*gconst20))+(((-0.00429555598634833)*gconst13*gconst4))+(((-0.262021160551292)*gconst14*gconst20))+(((-0.0655404911970328)*gconst22*gconst23*gconst4))+(((-1.0)*gconst14*gconst17*gconst21*gconst3))+(((0.0655404911970328)*gconst14*gconst20*gconst5))+((gconst15*gconst17*gconst2*gconst21))+(((-0.00429555598634833)*gconst13*gconst18))+(((-0.0655404911970328)*gconst18*gconst22*gconst7))+(((-1.0)*gconst12*gconst16*gconst21*gconst9))+(((3.99785164507822)*gconst21*gconst24*gconst4))+(((-0.0655404911970328)*gconst10*gconst13*gconst22))+(((-0.0655404911970328)*gconst13*gconst17*gconst19))+(((3.99785164507822)*gconst17*gconst19*gconst7))+(((0.0655404911970328)*gconst17*gconst19*gconst8))+(((-0.0655404911970328)*gconst10*gconst13*gconst17))+(((0.00429555598634833)*gconst14*gconst19))+(((0.0655404911970328)*gconst11*gconst17*gconst7))+(((-0.0655404911970328)*gconst20*gconst22*gconst7))+(((3.99785164507822)*gconst11*gconst13*gconst17))+(((0.0655404911970328)*gconst16*gconst20*gconst9))+(((0.0655404911970328)*gconst16*gconst20*gconst7))+(((-0.0655404911970328)*gconst14*gconst20*gconst21))+(((0.0655404911970328)*gconst18*gconst21*gconst9))+(((-0.0655404911970328)*gconst12*gconst21*gconst24))+(((3.99785164507822)*gconst20*gconst24*gconst5))+(((0.0655404911970328)*gconst21*gconst25*gconst4))+(((-1.0)*gconst10*gconst17*gconst22*gconst7))+(((-0.0655404911970328)*gconst12*gconst13*gconst22))+(((-0.0655404911970328)*gconst10*gconst15*gconst17))+(((-1.0)*gconst11*gconst17*gconst24*gconst5))+(((0.0655404911970328)*gconst14*gconst21*gconst4))+(((0.0655404911970328)*gconst1*gconst13*gconst19))+(((0.0655404911970328)*gconst16*gconst25*gconst4))+((gconst12*gconst16*gconst23*gconst6))+(((-1.0)*gconst1*gconst10*gconst22*gconst23))+(((-1.0)*gconst13*gconst17*gconst2*gconst22))+(((0.0655404911970328)*gconst20*gconst25*gconst5))+(((0.0655404911970328)*gconst0*gconst20*gconst23))+(((0.0655404911970328)*gconst0*gconst20*gconst25))+(((-0.0655404911970328)*gconst11*gconst17*gconst23))+(((-0.524042321102584)*gconst12*gconst13))+(((0.0655404911970328)*gconst16*gconst23*gconst4))+(((-1.0)*gconst14*gconst17*gconst19*gconst5))+(((-0.00429555598634833)*gconst15*gconst20))+(((3.99785164507822)*gconst1*gconst19*gconst23))+(((0.00429555598634833)*gconst20*gconst24))+((gconst0*gconst13*gconst20*gconst22))+(((-0.0655404911970328)*gconst19*gconst24*gconst5))+(((-0.0655404911970328)*gconst21*gconst24*gconst3))+(((-0.00429555598634833)*gconst15*gconst18))+(((-0.00429555598634833)*gconst12*gconst7))+(((-0.524042321102584)*gconst20*gconst7))+((gconst10*gconst17*gconst21*gconst9))+(((-0.00429555598634833)*gconst20*gconst8))+(((-0.00429555598634833)*gconst12*gconst14))+(((-0.0655404911970328)*gconst1*gconst18*gconst23))+(((-0.0655404911970328)*gconst1*gconst18*gconst25))+(((0.0655404911970328)*gconst13*gconst17*gconst3))+(((-1.0)*gconst15*gconst16*gconst20*gconst5)));
op[4]=((((-0.0655404911970328)*gconst11*gconst13*gconst17))+(((3.99785164507822)*gconst1*gconst13*gconst19))+(((0.0655404911970328)*gconst15*gconst2*gconst21))+(((-1.0)*gconst0*gconst20*gconst21*gconst9))+(((0.0655404911970328)*gconst24*gconst4*gconst5))+(((-1.0)*gconst17*gconst2*gconst23*gconst6))+(((0.0655404911970328)*gconst13*gconst16*gconst4))+(((-15.9785222200683)*gconst12*gconst13))+(((0.00429555598634833)*gconst11*gconst14))+(((-1.0)*gconst1*gconst18*gconst23*gconst6))+(((3.99785164507822)*gconst13*gconst17*gconst3))+((gconst0*gconst22*gconst23*gconst4))+(((-0.0655404911970328)*gconst1*gconst13*gconst18))+(((0.524042321102584)*gconst13*gconst20))+(((0.00429555598634833)*gconst13*gconst3))+(((0.524042321102584)*gconst12*gconst23))+(((-1.0)*gconst17*gconst2*gconst22*gconst7))+(((-1.0)*gconst11*gconst14*gconst17*gconst5))+(((0.00429555598634833)*gconst19*gconst8))+(((-0.0655404911970328)*gconst10*gconst22*gconst7))+(((-0.00429555598634833)*gconst2*gconst25))+(((-0.00429555598634833)*gconst2*gconst23))+(((-1.0)*gconst17*gconst24*gconst3*gconst5))+(((0.0655404911970328)*gconst21*gconst4*gconst8))+(((-0.0655404911970328)*gconst14*gconst21*gconst3))+(((0.0655404911970328)*gconst10*gconst21*gconst9))+(((0.262021160551292)*gconst11*gconst13))+((gconst16*gconst20*gconst6*gconst7))+(((-0.0655404911970328)*gconst10*gconst17*gconst7))+(((-0.0655404911970328)*gconst10*gconst17*gconst9))+(((0.0655404911970328)*gconst20*gconst5*gconst8))+(((3.99785164507822)*gconst12*gconst24*gconst5))+((gconst0*gconst20*gconst23*gconst6))+(((-1.0)*gconst1*gconst10*gconst13*gconst22))+((gconst16*gconst23*gconst4*gconst6))+(((-0.0655404911970328)*gconst11*gconst24*gconst5))+(((0.0655404911970328)*gconst0*gconst12*gconst23))+(((0.0655404911970328)*gconst0*gconst12*gconst25))+(((-0.0655404911970328)*gconst15*gconst17*gconst2))+(((0.262021160551292)*gconst23*gconst3))+(((-0.0655404911970328)*gconst1*gconst10*gconst23))+(((-0.0655404911970328)*gconst1*gconst10*gconst25))+(((-1.0)*gconst1*gconst11*gconst14*gconst21))+(((3.99785164507822)*gconst14*gconst21*gconst4))+((gconst1*gconst18*gconst21*gconst9))+((gconst0*gconst12*gconst13*gconst22))+(((0.0655404911970328)*gconst15*gconst21*gconst4))+((gconst10*gconst15*gconst17*gconst5))+(((0.00429555598634833)*gconst11*gconst7))+(((0.0655404911970328)*gconst1*gconst11*gconst24))+(((-1.0)*gconst0*gconst20*gconst25*gconst5))+((gconst0*gconst20*gconst22*gconst7))+(((-0.0655404911970328)*gconst1*gconst15*gconst18))+(((-15.9785222200683)*gconst23*gconst4))+(((-1.0)*gconst17*gconst19*gconst5*gconst8))+(((0.0655404911970328)*gconst1*gconst11*gconst13))+(((-0.262021160551292)*gconst12*gconst14))+(((0.0655404911970328)*gconst0*gconst13*gconst20))+(((-0.524042321102584)*gconst12*gconst7))+(((3.99785164507822)*gconst11*gconst17*gconst7))+(((-0.00429555598634833)*gconst18*gconst7))+(((-0.00429555598634833)*gconst18*gconst9))+(((-0.00429555598634833)*gconst4*gconst7))+(((3.99785164507822)*gconst14*gconst20*gconst5))+(((-0.0655404911970328)*gconst13*gconst18*gconst6))+(((-0.524042321102584)*gconst13*gconst4))+(((-0.0655404911970328)*gconst13*gconst17*gconst2))+(((0.0655404911970328)*gconst0*gconst15*gconst20))+(((0.0655404911970328)*gconst12*gconst21*gconst9))+((gconst17*gconst2*gconst21*gconst9))+(((0.0655404911970328)*gconst15*gconst16*gconst4))+(((-1.0)*gconst1*gconst21*gconst24*gconst3))+(((-0.00429555598634833)*gconst10*gconst13))+(((-0.00429555598634833)*gconst10*gconst15))+(((-0.0655404911970328)*gconst12*gconst23*gconst6))+(((-0.0655404911970328)*gconst1*gconst19*gconst23))+(((-1.0)*gconst16*gconst21*gconst4*gconst9))+(((-0.00429555598634833)*gconst13*gconst19))+(((0.0655404911970328)*gconst17*gconst3*gconst7))+(((-1.0)*gconst1*gconst19*gconst21*gconst8))+(((0.0655404911970328)*gconst1*gconst14*gconst19))+(((0.0655404911970328)*gconst12*gconst25*gconst5))+(((0.0655404911970328)*gconst15*gconst20*gconst5))+(((0.0655404911970328)*gconst10*gconst25*gconst5))+(((0.00429555598634833)*gconst14*gconst20))+((gconst1*gconst18*gconst25*gconst5))+(((-1.0)*gconst16*gconst20*gconst5*gconst9))+(((-1.0)*gconst17*gconst21*gconst3*gconst8))+(((-0.00429555598634833)*gconst20*gconst23))+(((0.0655404911970328)*gconst11*gconst17*gconst8))+((gconst12*gconst13*gconst16*gconst6))+(((-0.0655404911970328)*gconst17*gconst19*gconst7))+(((-0.262021160551292)*gconst24*gconst4))+(((-0.00429555598634833)*gconst11*gconst23))+((gconst1*gconst2*gconst21*gconst25))+(((-0.0655404911970328)*gconst13*gconst22*gconst4))+(((0.0655404911970328)*gconst14*gconst17*gconst3))+(((-1.0)*gconst12*gconst15*gconst16*gconst5))+(((0.0655404911970328)*gconst15*gconst18*gconst5))+(((0.0655404911970328)*gconst1*gconst19*gconst7))+(((-0.0655404911970328)*gconst12*gconst14*gconst21))+(((-0.0655404911970328)*gconst17*gconst23*gconst3))+(((-0.00429555598634833)*gconst25*gconst4))+(((-0.0655404911970328)*gconst13*gconst2*gconst22))+(((-1.0)*gconst1*gconst19*gconst24*gconst5))+(((-0.0655404911970328)*gconst14*gconst19*gconst5))+(((0.262021160551292)*gconst19*gconst7))+((gconst17*gconst18*gconst5*gconst9))+(((-0.0655404911970328)*gconst20*gconst21*gconst8))+(((-1.0)*gconst16*gconst25*gconst4*gconst5))+(((-0.0655404911970328)*gconst20*gconst24*gconst5))+(((-0.00429555598634833)*gconst14*gconst4))+(((-1.0)*gconst1*gconst2*gconst22*gconst23))+(((-1.0)*gconst1*gconst18*gconst22*gconst7))+(((-0.0655404911970328)*gconst11*gconst21*gconst8))+(((3.99785164507822)*gconst1*gconst11*gconst23))+(((-1.0)*gconst17*gconst18*gconst6*gconst7))+(((-0.0655404911970328)*gconst13*gconst20*gconst6))+(((3.99785164507822)*gconst12*gconst21*gconst8))+(((-1.0)*gconst10*gconst13*gconst17*gconst6))+(((-0.0655404911970328)*gconst12*gconst22*gconst7))+(((0.0655404911970328)*gconst12*gconst14*gconst5))+(((-0.0655404911970328)*gconst10*gconst23*gconst6))+((gconst17*gconst2*gconst25*gconst5))+(((-0.0655404911970328)*gconst21*gconst24*gconst4))+(((-15.9785222200683)*gconst20*gconst7))+((gconst1*gconst10*gconst15*gconst21))+(((-0.00429555598634833)*gconst12*gconst8))+(((-0.262021160551292)*gconst20*gconst8))+(((-1.0)*gconst0*gconst21*gconst25*gconst4))+((gconst16*gconst22*gconst4*gconst7))+(((0.0655404911970328)*gconst12*gconst16*gconst7))+(((0.0655404911970328)*gconst12*gconst16*gconst9))+(((-0.00429555598634833)*gconst20*gconst9))+(((0.00429555598634833)*gconst24*gconst3))+(((0.0655404911970328)*gconst1*gconst23*gconst3))+(((-0.00429555598634833)*gconst12*gconst15))+(((0.00429555598634833)*gconst12*gconst24))+(((-1.0)*gconst0*gconst12*gconst15*gconst21)));
op[5]=((((-15.9785222200683)*gconst13*gconst4))+(((-0.00429555598634833)*gconst12*gconst23))+((gconst12*gconst16*gconst6*gconst7))+(((-0.0655404911970328)*gconst11*gconst14*gconst5))+(((0.0655404911970328)*gconst25*gconst4*gconst5))+(((0.00429555598634833)*gconst12*gconst14))+(((-0.0655404911970328)*gconst1*gconst11*gconst23))+(((0.0655404911970328)*gconst1*gconst13*gconst3))+(((-1.0)*gconst0*gconst15*gconst21*gconst4))+(((0.0655404911970328)*gconst18*gconst5*gconst9))+((gconst1*gconst10*gconst25*gconst5))+((gconst15*gconst17*gconst2*gconst5))+(((0.524042321102584)*gconst12*gconst13))+(((-0.0655404911970328)*gconst20*gconst6*gconst7))+((gconst13*gconst16*gconst4*gconst6))+(((-0.0655404911970328)*gconst1*gconst13*gconst19))+(((0.0655404911970328)*gconst0*gconst20*gconst9))+(((0.0655404911970328)*gconst0*gconst20*gconst7))+(((-0.0655404911970328)*gconst23*gconst4*gconst6))+(((-0.0655404911970328)*gconst22*gconst4*gconst7))+(((-1.0)*gconst12*gconst16*gconst5*gconst9))+(((-1.0)*gconst1*gconst13*gconst18*gconst6))+(((0.0655404911970328)*gconst21*gconst4*gconst9))+(((0.0655404911970328)*gconst10*gconst15*gconst5))+(((-15.9785222200683)*gconst12*gconst7))+(((-0.0655404911970328)*gconst14*gconst21*gconst4))+(((-0.0655404911970328)*gconst1*gconst10*gconst15))+(((-0.0655404911970328)*gconst1*gconst10*gconst13))+(((-0.0655404911970328)*gconst2*gconst22*gconst7))+(((0.0655404911970328)*gconst20*gconst5*gconst9))+(((-1.0)*gconst14*gconst17*gconst3*gconst5))+(((0.0655404911970328)*gconst0*gconst12*gconst15))+(((0.0655404911970328)*gconst0*gconst12*gconst13))+(((0.524042321102584)*gconst23*gconst4))+(((-0.00429555598634833)*gconst23*gconst3))+(((3.99785164507822)*gconst21*gconst4*gconst8))+(((-0.00429555598634833)*gconst10*gconst7))+(((-0.00429555598634833)*gconst10*gconst9))+(((3.99785164507822)*gconst24*gconst4*gconst5))+(((-0.0655404911970328)*gconst12*gconst13*gconst6))+(((0.00429555598634833)*gconst11*gconst8))+(((-0.0655404911970328)*gconst11*gconst17*gconst7))+(((-0.0655404911970328)*gconst18*gconst6*gconst7))+((gconst0*gconst12*gconst22*gconst7))+(((0.0655404911970328)*gconst1*gconst11*gconst7))+(((0.0655404911970328)*gconst1*gconst11*gconst14))+((gconst1*gconst15*gconst2*gconst21))+(((-0.0655404911970328)*gconst19*gconst5*gconst8))+(((-0.524042321102584)*gconst4*gconst7))+(((-0.00429555598634833)*gconst4*gconst8))+(((-1.0)*gconst0*gconst15*gconst20*gconst5))+(((-0.262021160551292)*gconst12*gconst8))+(((0.262021160551292)*gconst11*gconst7))+(((-0.0655404911970328)*gconst14*gconst20*gconst5))+(((0.262021160551292)*gconst13*gconst3))+(((-0.0655404911970328)*gconst13*gconst17*gconst3))+(((-1.0)*gconst1*gconst13*gconst2*gconst22))+(((-0.00429555598634833)*gconst19*gconst7))+(((0.0655404911970328)*gconst2*gconst21*gconst9))+(((-0.0655404911970328)*gconst2*gconst23*gconst6))+((gconst10*gconst17*gconst5*gconst9))+(((-1.0)*gconst1*gconst14*gconst21*gconst3))+(((-1.0)*gconst10*gconst17*gconst6*gconst7))+(((0.524042321102584)*gconst20*gconst7))+(((-0.00429555598634833)*gconst13*gconst2))+(((-0.262021160551292)*gconst14*gconst4))+(((-0.00429555598634833)*gconst13*gconst20))+(((3.99785164507822)*gconst20*gconst5*gconst8))+(((-1.0)*gconst1*gconst14*gconst19*gconst5))+(((0.0655404911970328)*gconst0*gconst25*gconst4))+(((0.0655404911970328)*gconst17*gconst3*gconst8))+(((-0.0655404911970328)*gconst1*gconst2*gconst25))+(((-0.0655404911970328)*gconst1*gconst2*gconst23))+(((3.99785164507822)*gconst1*gconst23*gconst3))+(((0.0655404911970328)*gconst12*gconst5*gconst8))+((gconst1*gconst15*gconst18*gconst5))+(((0.00429555598634833)*gconst3*gconst7))+((gconst0*gconst12*gconst23*gconst6))+(((3.99785164507822)*gconst12*gconst14*gconst5))+(((-1.0)*gconst13*gconst17*gconst2*gconst6))+((gconst0*gconst13*gconst22*gconst4))+(((0.0655404911970328)*gconst1*gconst19*gconst8))+((gconst1*gconst10*gconst21*gconst9))+(((0.0655404911970328)*gconst14*gconst4*gconst5))+(((-1.0)*gconst11*gconst17*gconst5*gconst8))+(((-0.0655404911970328)*gconst12*gconst24*gconst5))+(((-0.00429555598634833)*gconst11*gconst13))+(((0.0655404911970328)*gconst0*gconst23*gconst4))+(((-1.0)*gconst1*gconst11*gconst24*gconst5))+(((0.00429555598634833)*gconst20*gconst8))+(((-1.0)*gconst0*gconst12*gconst25*gconst5))+(((-0.0655404911970328)*gconst17*gconst2*gconst9))+(((-0.0655404911970328)*gconst17*gconst2*gconst7))+(((0.0655404911970328)*gconst12*gconst15*gconst5))+(((-0.0655404911970328)*gconst10*gconst13*gconst6))+(((-0.0655404911970328)*gconst1*gconst18*gconst9))+(((-0.0655404911970328)*gconst1*gconst18*gconst7))+(((3.99785164507822)*gconst1*gconst11*gconst13))+(((0.0655404911970328)*gconst2*gconst25*gconst5))+(((-0.0655404911970328)*gconst24*gconst3*gconst5))+((gconst0*gconst13*gconst20*gconst6))+(((3.99785164507822)*gconst1*gconst19*gconst7))+(((0.0655404911970328)*gconst1*gconst24*gconst3))+(((3.99785164507822)*gconst17*gconst3*gconst7))+(((-1.0)*gconst15*gconst16*gconst4*gconst5))+(((-1.0)*gconst1*gconst10*gconst23*gconst6))+(((0.00429555598634833)*gconst14*gconst3))+(((-0.00429555598634833)*gconst15*gconst2))+(((-0.00429555598634833)*gconst15*gconst4))+(((-1.0)*gconst0*gconst12*gconst21*gconst9))+(((-1.0)*gconst1*gconst11*gconst21*gconst8))+(((-0.0655404911970328)*gconst12*gconst21*gconst8))+(((0.0655404911970328)*gconst16*gconst4*gconst9))+(((0.0655404911970328)*gconst16*gconst4*gconst7))+(((-0.00429555598634833)*gconst12*gconst9))+(((-0.0655404911970328)*gconst21*gconst3*gconst8))+(((0.00429555598634833)*gconst24*gconst4))+(((-1.0)*gconst1*gconst10*gconst22*gconst7)));
op[6]=((((-0.262021160551292)*gconst4*gconst8))+((x1432*x1433))+((gconst17*gconst2*x1390))+((x1377*x1404))+(((-1.0)*gconst2*x1383*x1438))+(((0.262021160551292)*x1401))+(((-1.0)*x1383*x1389))+((gconst12*x1393))+((x1373*x1436))+((x1422*x1423))+(((-1.0)*x1391*x1396))+(((-1.0)*x1383*x1413))+(((-0.00429555598634833)*x1433))+((gconst10*gconst15*x1373))+((x1398*x1422))+(((-1.0)*x1371*x1377))+(((-1.0)*gconst3*x1373*x1426))+((x1374*x1412))+(((-1.0)*x1389*x1417))+(((-1.0)*x1468))+((x1389*x1453))+((x1389*x1454))+(((-1.0)*gconst3*x1384*x1427))+(((-15.9785222200683)*x1425))+(((-1.0)*x1404*x1445))+((gconst14*x1421))+((gconst3*x1393))+(((-1.0)*gconst11*gconst14*x1373))+(((-1.0)*gconst2*x1402))+(((-1.0)*x1400*x1412))+((gconst12*gconst5*x1411))+(((-1.0)*gconst9*x1421))+(((-1.0)*gconst11*x1460))+(((-1.0)*gconst19*x1373*x1405))+((gconst23*gconst4*x1435))+(((-0.00429555598634833)*gconst13*gconst3))+(((-1.0)*x1410*x1461))+((x1396*x1456))+(((0.524042321102584)*x1434))+(((-1.0)*x1401*x1452))+(((-1.0)*gconst11*x1402))+((x1390*x1413))+(((-1.0)*gconst10*gconst7*x1412))+((x1397*x1398))+(((-1.0)*gconst3*x1405*x1416))+(((-1.0)*x1412*x1442))+((x1377*x1399))+x1467+(((-1.0)*x1375*x1410))+((x1389*x1390))+((gconst0*gconst22*x1425))+((gconst7*x1406))+(((-1.0)*gconst23*x1384*x1449))+((gconst12*gconst13*x1435))+((x1373*x1380))+(((-1.0)*gconst1*gconst2*x1371))+(((-1.0)*gconst21*gconst9*x1443))+(((-1.0)*x1390*x1439))+(((-1.0)*x1398*x1427))+(((-0.0655404911970328)*gconst5*x1374))+(((-1.0)*gconst22*x1384*x1418))+(((-1.0)*gconst10*x1384*x1447))+((x1383*x1439))+((x1371*x1443))+(((-1.0)*gconst18*x1383*x1384))+(((-1.0)*gconst1*gconst7*x1408))+(((-1.0)*gconst4*x1390*x1407))+(((-1.0)*x1371*x1449))+(((-1.0)*gconst4*gconst6*x1371))+(((-1.0)*gconst5*x1379*x1397))+((x1410*x1448))+((gconst16*gconst4*x1383)));
op[7]=(((gconst0*gconst12*x1383))+(((0.524042321102584)*x1425))+(((-1.0)*x1383*x1423))+(((-1.0)*gconst12*x1402))+(((-1.0)*gconst10*x1383*x1384))+(((-1.0)*gconst13*x1421))+(((-1.0)*x1373*x1374))+((gconst4*x1393))+((x1373*x1400))+(((-1.0)*x1383*x1398))+(((-1.0)*gconst5*gconst8*x1389))+(((-1.0)*x1412*x1418))+(((-0.00429555598634833)*x1401))+(((-1.0)*x1377*x1444))+(((-1.0)*gconst11*x1373*x1405))+(((-1.0)*gconst0*x1379*x1390))+((x1396*x1404))+(((-1.0)*x1397*x1410))+((x1390*x1398))+((x1434*x1435))+(((-1.0)*gconst3*x1460))+(((-1.0)*x1412*x1433))+((x1390*x1423))+(((-1.0)*x1398*x1417))+((x1373*x1442))+(((-1.0)*gconst2*x1384*x1447))+((x1396*x1399))+((x1398*x1454))+((x1398*x1453))+((x1410*x1411))+(((-1.0)*x1371*x1396)));
op[8]=((((-1.0)*x1390*x1443))+((x1373*x1433))+((x1383*x1443))+(((-1.0)*x1467))+(((-1.0)*gconst2*x1383*x1384))+(((-1.0)*gconst3*x1373*x1405))+(((-1.0)*gconst4*x1402)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1469=(cj1*cj5);
IkReal x1470=((0.00238797124439986)*cj4);
IkReal x1471=((0.0326831239315186)*sj4);
IkReal x1472=(r02*sj4);
IkReal x1473=((0.0728309674939976)*cj1);
IkReal x1474=(r01*sj5);
IkReal x1475=(cj5*sj1);
IkReal x1476=((0.99680577906496)*sj4);
IkReal x1477=((0.00238797124439986)*sj1);
IkReal x1478=(r21*sj5);
IkReal x1479=((0.0728309674939976)*cj4);
IkReal x1480=(r22*sj4);
IkReal x1481=((0.0728309674939976)*sj1);
IkReal x1482=(cj4*sj1);
IkReal x1483=((0.0326831239315186)*r22);
IkReal x1484=((0.00238797124439986)*cj1);
IkReal x1485=((0.0326831239315186)*cj4*r02);
IkReal x1486=((0.99680577906496)*cj1*cj4);
if( IKabs((((r00*x1471*x1475))+((cj1*x1471*x1478))+(((-1.0)*r00*x1469*x1479))+((sj1*x1478*x1479))+(((0.99680577906496)*r22*x1482))+(((-1.0)*r20*x1469*x1471))+(((-1.0)*r20*x1475*x1479))+((x1480*x1481))+((r20*x1475*x1476))+((sj1*x1470*x1474))+(((-1.0)*cj1*x1474*x1476))+(((-1.0)*x1480*x1484))+(((-1.0)*cj1*x1470*x1478))+((x1472*x1473))+((x1472*x1477))+((r00*x1469*x1476))+(((-1.0)*sj1*x1476*x1478))+(((0.0326831239315186)*r02*x1482))+(((-1.0)*sj1*x1471*x1474))+(((-1.0)*r00*x1470*x1475))+((cj4*x1473*x1474))+(((-1.0)*cj1*cj4*x1483))+((r02*x1486))+((r20*x1469*x1470)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x1471*x1475))+(((-1.0)*x1482*x1483))+((cj1*x1471*x1474))+(((-1.0)*r00*x1469*x1471))+((sj1*x1471*x1478))+((cj1*x1476*x1478))+((r20*x1470*x1475))+(((-1.0)*r20*x1469*x1476))+(((-1.0)*cj4*x1473*x1478))+((x1472*x1481))+(((-1.0)*sj1*x1474*x1476))+(((-1.0)*cj1*x1485))+(((-1.0)*cj1*x1470*x1474))+((r00*x1469*x1470))+(((-1.0)*r22*x1486))+(((-1.0)*x1477*x1480))+(((-1.0)*sj1*x1470*x1478))+(((-1.0)*r00*x1475*x1479))+((sj1*x1474*x1479))+(((-1.0)*x1472*x1484))+(((-1.0)*x1473*x1480))+((r00*x1475*x1476))+(((0.99680577906496)*r02*x1482))+((r20*x1469*x1479)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1471*x1475))+((cj1*x1471*x1478))+(((-1.0)*r00*x1469*x1479))+((sj1*x1478*x1479))+(((0.99680577906496)*r22*x1482))+(((-1.0)*r20*x1469*x1471))+(((-1.0)*r20*x1475*x1479))+((x1480*x1481))+((r20*x1475*x1476))+((sj1*x1470*x1474))+(((-1.0)*cj1*x1474*x1476))+(((-1.0)*x1480*x1484))+(((-1.0)*cj1*x1470*x1478))+((x1472*x1473))+((x1472*x1477))+((r00*x1469*x1476))+(((-1.0)*sj1*x1476*x1478))+(((0.0326831239315186)*r02*x1482))+(((-1.0)*sj1*x1471*x1474))+(((-1.0)*r00*x1470*x1475))+((cj4*x1473*x1474))+(((-1.0)*cj1*cj4*x1483))+((r02*x1486))+((r20*x1469*x1470))))+IKsqr(((((-1.0)*r20*x1471*x1475))+(((-1.0)*x1482*x1483))+((cj1*x1471*x1474))+(((-1.0)*r00*x1469*x1471))+((sj1*x1471*x1478))+((cj1*x1476*x1478))+((r20*x1470*x1475))+(((-1.0)*r20*x1469*x1476))+(((-1.0)*cj4*x1473*x1478))+((x1472*x1481))+(((-1.0)*sj1*x1474*x1476))+(((-1.0)*cj1*x1485))+(((-1.0)*cj1*x1470*x1474))+((r00*x1469*x1470))+(((-1.0)*r22*x1486))+(((-1.0)*x1477*x1480))+(((-1.0)*sj1*x1470*x1478))+(((-1.0)*r00*x1475*x1479))+((sj1*x1474*x1479))+(((-1.0)*x1472*x1484))+(((-1.0)*x1473*x1480))+((r00*x1475*x1476))+(((0.99680577906496)*r02*x1482))+((r20*x1469*x1479))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r00*x1471*x1475))+((cj1*x1471*x1478))+(((-1.0)*r00*x1469*x1479))+((sj1*x1478*x1479))+(((0.99680577906496)*r22*x1482))+(((-1.0)*r20*x1469*x1471))+(((-1.0)*r20*x1475*x1479))+((x1480*x1481))+((r20*x1475*x1476))+((sj1*x1470*x1474))+(((-1.0)*cj1*x1474*x1476))+(((-1.0)*x1480*x1484))+(((-1.0)*cj1*x1470*x1478))+((x1472*x1473))+((x1472*x1477))+((r00*x1469*x1476))+(((-1.0)*sj1*x1476*x1478))+(((0.0326831239315186)*r02*x1482))+(((-1.0)*sj1*x1471*x1474))+(((-1.0)*r00*x1470*x1475))+((cj4*x1473*x1474))+(((-1.0)*cj1*cj4*x1483))+((r02*x1486))+((r20*x1469*x1470))), ((((-1.0)*r20*x1471*x1475))+(((-1.0)*x1482*x1483))+((cj1*x1471*x1474))+(((-1.0)*r00*x1469*x1471))+((sj1*x1471*x1478))+((cj1*x1476*x1478))+((r20*x1470*x1475))+(((-1.0)*r20*x1469*x1476))+(((-1.0)*cj4*x1473*x1478))+((x1472*x1481))+(((-1.0)*sj1*x1474*x1476))+(((-1.0)*cj1*x1485))+(((-1.0)*cj1*x1470*x1474))+((r00*x1469*x1470))+(((-1.0)*r22*x1486))+(((-1.0)*x1477*x1480))+(((-1.0)*sj1*x1470*x1478))+(((-1.0)*r00*x1475*x1479))+((sj1*x1474*x1479))+(((-1.0)*x1472*x1484))+(((-1.0)*x1473*x1480))+((r00*x1475*x1476))+(((0.99680577906496)*r02*x1482))+((r20*x1469*x1479))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1487=IKcos(j2);
IkReal x1488=IKsin(j2);
IkReal x1489=(cj5*r20);
IkReal x1490=((0.997341439912743)*sj4);
IkReal x1491=((0.0728701052062903)*cj4);
IkReal x1492=(r01*sj5);
IkReal x1493=(cj5*r00);
IkReal x1494=(cj4*r02);
IkReal x1495=((1.3955641253225e-7)*cj4);
IkReal x1496=(cj3*sj4);
IkReal x1497=((1.01965987338572e-8)*sj4);
IkReal x1498=(sj3*sj5);
IkReal x1499=(r21*sj5);
IkReal x1500=((0.00373006819843503)*cj4);
IkReal x1501=(cj5*r01);
IkReal x1502=((0.0037400112430517)*cj3);
IkReal x1503=((1.08150140232244e-9)*sj5);
IkReal x1504=(r02*sj4);
IkReal x1505=((0.00373006819843503)*sj3);
IkReal x1506=(cj4*r22);
IkReal x1507=(r22*sj4);
IkReal x1508=((0.999993006133494)*sj3);
IkReal x1509=((0.000272535012753886)*sj3);
IkReal x1510=((0.0728695955625022)*cj3);
IkReal x1511=(cj5*r21);
IkReal x1512=(sj4*x1509);
IkReal x1513=(sj1*x1487);
IkReal x1514=((0.997334464639851)*cj3*cj4);
IkReal x1515=(cj1*x1488);
IkReal x1516=(cj1*x1487);
IkReal x1517=(sj1*x1488);
IkReal x1518=((0.999462911269554)*x1515);
IkReal x1519=((0.999462911269554)*x1513);
IkReal x1520=((0.0327702455985164)*x1517);
IkReal x1521=((0.0327702455985164)*x1516);
IkReal x1522=((0.999462911269554)*x1516);
IkReal x1523=((0.0327702455985164)*x1513);
IkReal x1524=((0.0327702455985164)*x1515);
IkReal x1525=((0.999462911269554)*x1517);
IkReal x1526=(x1524+x1522+x1523);
IkReal x1527=(x1520+x1519+x1518);
evalcond[0]=((((-0.0728701052062903)*x1507))+((x1489*x1491))+(((-1.0)*x1526))+(((-0.997341439912743)*x1506))+x1525+(((-1.0)*x1491*x1499))+((x1490*x1499))+(((-1.0)*x1489*x1490)));
evalcond[1]=((((-0.0728701052062903)*x1504))+(((-1.0)*x1521))+((x1491*x1493))+(((-0.997341439912743)*x1494))+x1527+(((-1.0)*x1491*x1492))+(((-1.0)*x1490*x1493))+((x1490*x1492)));
evalcond[2]=((((-1.0)*r20*x1503))+(((-1.08150140232244e-9)*x1511))+(((-6.25181902607023e-7)*x1489))+(((0.14998636)*cj1))+((x1495*x1499))+(((-1.01965987338572e-8)*x1506))+((x1497*x1499))+(((-0.211036575236598)*x1517))+(((-1.0)*pz))+(((6.25181902607023e-7)*x1499))+(((0.211036575236598)*x1516))+(((-0.00202253)*sj1))+(((1.3955641253225e-7)*x1507))+(((0.00691988466190158)*x1515))+(((0.00691988466190158)*x1513))+(((-1.0)*x1489*x1495))+(((-1.0)*x1489*x1497)));
evalcond[3]=((((-1.08150140232244e-9)*x1501))+(((-6.25181902607023e-7)*x1493))+(((-1.0)*r00*x1503))+(((-1.0)*x1493*x1497))+(((-1.0)*x1493*x1495))+(((-0.211036575236598)*x1513))+(((-0.211036575236598)*x1515))+(((-0.00202253)*cj1))+(((-0.14998636)*sj1))+(((-1.0)*px))+(((6.25181902607023e-7)*x1492))+((x1492*x1497))+((x1492*x1495))+(((-0.00691988466190158)*x1517))+(((-1.01965987338572e-8)*x1494))+(((1.3955641253225e-7)*x1504))+(((0.00691988466190158)*x1516)));
evalcond[4]=(((x1499*x1514))+(((0.999993006133494)*r20*x1498))+((x1508*x1511))+(((0.0728695955625022)*x1496*x1499))+((r21*x1498*x1500))+(((-1.0)*x1506*x1510))+(((-1.0)*x1521))+(((0.997334464639851)*r22*x1496))+(((-1.0)*x1506*x1509))+(((-1.0)*sj3*x1489*x1500))+(((-0.0728695955625022)*x1489*x1496))+(((0.000272535012753886)*r21*sj4*x1498))+(((-1.0)*r20*sj5*x1502))+x1527+(((-1.0)*x1489*x1512))+(((-1.0)*x1489*x1514))+(((-1.0)*x1502*x1511))+((x1505*x1507)));
evalcond[5]=((((0.997334464639851)*r02*x1496))+(((-1.0)*x1525))+((x1504*x1505))+(((-1.0)*x1494*x1509))+(((-1.0)*x1494*x1510))+(((-1.0)*x1501*x1502))+((x1501*x1508))+(((0.999993006133494)*r00*x1498))+(((-1.0)*sj3*x1493*x1500))+x1526+(((0.0728695955625022)*x1492*x1496))+(((-1.0)*r00*sj5*x1502))+((sj3*x1492*x1500))+(((-1.0)*x1493*x1512))+(((-1.0)*x1493*x1514))+((x1492*x1514))+((x1492*x1512))+(((-0.0728695955625022)*x1493*x1496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1528=(cj1*cj5);
IkReal x1529=((0.00238797124439986)*cj4);
IkReal x1530=((0.0326831239315186)*sj4);
IkReal x1531=(r02*sj4);
IkReal x1532=((0.0728309674939976)*cj1);
IkReal x1533=(r01*sj5);
IkReal x1534=(cj5*sj1);
IkReal x1535=((0.99680577906496)*sj4);
IkReal x1536=((0.00238797124439986)*sj1);
IkReal x1537=(r21*sj5);
IkReal x1538=((0.0728309674939976)*cj4);
IkReal x1539=(r22*sj4);
IkReal x1540=((0.0728309674939976)*sj1);
IkReal x1541=(cj4*sj1);
IkReal x1542=((0.0326831239315186)*r22);
IkReal x1543=((0.00238797124439986)*cj1);
IkReal x1544=((0.0326831239315186)*cj4*r02);
IkReal x1545=((0.99680577906496)*cj1*cj4);
if( IKabs((((sj1*x1537*x1538))+(((-1.0)*r02*x1545))+(((-1.0)*r20*x1534*x1538))+(((-1.0)*sj1*x1529*x1533))+((cj1*x1530*x1537))+((x1539*x1540))+((sj1*x1530*x1533))+(((-1.0)*x1531*x1536))+(((-1.0)*x1531*x1532))+(((-1.0)*cj1*cj4*x1542))+(((-1.0)*r20*x1528*x1530))+(((-1.0)*cj4*x1532*x1533))+(((-0.0326831239315186)*r02*x1541))+((r00*x1528*x1538))+(((-1.0)*x1539*x1543))+(((-1.0)*r00*x1530*x1534))+((cj1*x1533*x1535))+(((-1.0)*sj1*x1535*x1537))+((r00*x1529*x1534))+((r20*x1534*x1535))+(((0.99680577906496)*r22*x1541))+(((-1.0)*r00*x1528*x1535))+((r20*x1528*x1529))+(((-1.0)*cj1*x1529*x1537)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1534*x1535))+(((-1.0)*r20*x1530*x1534))+((x1531*x1543))+((cj1*x1529*x1533))+((sj1*x1533*x1535))+(((-1.0)*sj1*x1529*x1537))+((sj1*x1530*x1537))+((cj1*x1544))+(((-1.0)*r20*x1528*x1535))+(((-1.0)*x1532*x1539))+((r00*x1534*x1538))+(((-0.99680577906496)*r02*x1541))+(((-1.0)*x1531*x1540))+(((-1.0)*r22*x1545))+(((-1.0)*cj4*x1532*x1537))+((r00*x1528*x1530))+(((-1.0)*sj1*x1533*x1538))+(((-1.0)*r00*x1528*x1529))+((cj1*x1535*x1537))+(((-1.0)*x1536*x1539))+(((-1.0)*x1541*x1542))+(((-1.0)*cj1*x1530*x1533))+((r20*x1529*x1534))+((r20*x1528*x1538)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1537*x1538))+(((-1.0)*r02*x1545))+(((-1.0)*r20*x1534*x1538))+(((-1.0)*sj1*x1529*x1533))+((cj1*x1530*x1537))+((x1539*x1540))+((sj1*x1530*x1533))+(((-1.0)*x1531*x1536))+(((-1.0)*x1531*x1532))+(((-1.0)*cj1*cj4*x1542))+(((-1.0)*r20*x1528*x1530))+(((-1.0)*cj4*x1532*x1533))+(((-0.0326831239315186)*r02*x1541))+((r00*x1528*x1538))+(((-1.0)*x1539*x1543))+(((-1.0)*r00*x1530*x1534))+((cj1*x1533*x1535))+(((-1.0)*sj1*x1535*x1537))+((r00*x1529*x1534))+((r20*x1534*x1535))+(((0.99680577906496)*r22*x1541))+(((-1.0)*r00*x1528*x1535))+((r20*x1528*x1529))+(((-1.0)*cj1*x1529*x1537))))+IKsqr(((((-1.0)*r00*x1534*x1535))+(((-1.0)*r20*x1530*x1534))+((x1531*x1543))+((cj1*x1529*x1533))+((sj1*x1533*x1535))+(((-1.0)*sj1*x1529*x1537))+((sj1*x1530*x1537))+((cj1*x1544))+(((-1.0)*r20*x1528*x1535))+(((-1.0)*x1532*x1539))+((r00*x1534*x1538))+(((-0.99680577906496)*r02*x1541))+(((-1.0)*x1531*x1540))+(((-1.0)*r22*x1545))+(((-1.0)*cj4*x1532*x1537))+((r00*x1528*x1530))+(((-1.0)*sj1*x1533*x1538))+(((-1.0)*r00*x1528*x1529))+((cj1*x1535*x1537))+(((-1.0)*x1536*x1539))+(((-1.0)*x1541*x1542))+(((-1.0)*cj1*x1530*x1533))+((r20*x1529*x1534))+((r20*x1528*x1538))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1537*x1538))+(((-1.0)*r02*x1545))+(((-1.0)*r20*x1534*x1538))+(((-1.0)*sj1*x1529*x1533))+((cj1*x1530*x1537))+((x1539*x1540))+((sj1*x1530*x1533))+(((-1.0)*x1531*x1536))+(((-1.0)*x1531*x1532))+(((-1.0)*cj1*cj4*x1542))+(((-1.0)*r20*x1528*x1530))+(((-1.0)*cj4*x1532*x1533))+(((-0.0326831239315186)*r02*x1541))+((r00*x1528*x1538))+(((-1.0)*x1539*x1543))+(((-1.0)*r00*x1530*x1534))+((cj1*x1533*x1535))+(((-1.0)*sj1*x1535*x1537))+((r00*x1529*x1534))+((r20*x1534*x1535))+(((0.99680577906496)*r22*x1541))+(((-1.0)*r00*x1528*x1535))+((r20*x1528*x1529))+(((-1.0)*cj1*x1529*x1537))), ((((-1.0)*r00*x1534*x1535))+(((-1.0)*r20*x1530*x1534))+((x1531*x1543))+((cj1*x1529*x1533))+((sj1*x1533*x1535))+(((-1.0)*sj1*x1529*x1537))+((sj1*x1530*x1537))+((cj1*x1544))+(((-1.0)*r20*x1528*x1535))+(((-1.0)*x1532*x1539))+((r00*x1534*x1538))+(((-0.99680577906496)*r02*x1541))+(((-1.0)*x1531*x1540))+(((-1.0)*r22*x1545))+(((-1.0)*cj4*x1532*x1537))+((r00*x1528*x1530))+(((-1.0)*sj1*x1533*x1538))+(((-1.0)*r00*x1528*x1529))+((cj1*x1535*x1537))+(((-1.0)*x1536*x1539))+(((-1.0)*x1541*x1542))+(((-1.0)*cj1*x1530*x1533))+((r20*x1529*x1534))+((r20*x1528*x1538))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1546=IKcos(j2);
IkReal x1547=IKsin(j2);
IkReal x1548=(cj5*r20);
IkReal x1549=((0.997341439912743)*sj4);
IkReal x1550=((0.0728701052062903)*cj4);
IkReal x1551=(r01*sj5);
IkReal x1552=(cj5*r00);
IkReal x1553=(cj4*r02);
IkReal x1554=((1.3955641253225e-7)*cj4);
IkReal x1555=(cj3*sj4);
IkReal x1556=((1.01965987338572e-8)*sj4);
IkReal x1557=(sj3*sj5);
IkReal x1558=(r21*sj5);
IkReal x1559=((0.00373006819843503)*cj4);
IkReal x1560=(cj5*r01);
IkReal x1561=((0.0037400112430517)*cj3);
IkReal x1562=((1.08150140232244e-9)*sj5);
IkReal x1563=(r02*sj4);
IkReal x1564=((0.00373006819843503)*sj3);
IkReal x1565=(cj4*r22);
IkReal x1566=(r22*sj4);
IkReal x1567=((0.999993006133494)*sj3);
IkReal x1568=((0.000272535012753886)*sj3);
IkReal x1569=((0.0728695955625022)*cj3);
IkReal x1570=(cj5*r21);
IkReal x1571=(sj4*x1568);
IkReal x1572=(sj1*x1546);
IkReal x1573=((0.997334464639851)*cj3*cj4);
IkReal x1574=(cj1*x1547);
IkReal x1575=(cj1*x1546);
IkReal x1576=(sj1*x1547);
IkReal x1577=((0.999462911269554)*x1574);
IkReal x1578=((0.999462911269554)*x1572);
IkReal x1579=((0.0327702455985164)*x1576);
IkReal x1580=((0.0327702455985164)*x1575);
IkReal x1581=((0.999462911269554)*x1576);
IkReal x1582=((0.999462911269554)*x1575);
IkReal x1583=((0.0327702455985164)*x1572);
IkReal x1584=((0.0327702455985164)*x1574);
IkReal x1585=(x1582+x1583+x1584);
IkReal x1586=(x1579+x1578+x1577);
evalcond[0]=((((-1.0)*x1585))+(((-1.0)*x1548*x1549))+(((-0.0728701052062903)*x1566))+(((-0.997341439912743)*x1565))+((x1549*x1558))+x1581+(((-1.0)*x1550*x1558))+((x1548*x1550)));
evalcond[1]=((((-1.0)*x1586))+(((-1.0)*x1549*x1552))+((x1550*x1552))+(((-0.0728701052062903)*x1563))+(((-0.997341439912743)*x1553))+((x1549*x1551))+x1580+(((-1.0)*x1550*x1551)));
evalcond[2]=((((-1.08150140232244e-9)*x1570))+((x1556*x1558))+(((-6.25181902607023e-7)*x1548))+(((0.14998636)*cj1))+(((-1.0)*x1548*x1554))+(((-1.0)*x1548*x1556))+(((-1.01965987338572e-8)*x1565))+(((-1.0)*r20*x1562))+(((-1.0)*pz))+(((-0.211036575236598)*x1576))+((x1554*x1558))+(((0.00691988466190158)*x1574))+(((0.00691988466190158)*x1572))+(((0.211036575236598)*x1575))+(((6.25181902607023e-7)*x1558))+(((-0.00202253)*sj1))+(((1.3955641253225e-7)*x1566)));
evalcond[3]=(((x1551*x1554))+((x1551*x1556))+(((-1.08150140232244e-9)*x1560))+(((-6.25181902607023e-7)*x1552))+(((-0.00691988466190158)*x1575))+(((0.14998636)*sj1))+(((-1.0)*x1552*x1554))+(((-1.0)*x1552*x1556))+(((-1.01965987338572e-8)*x1553))+(((-1.0)*px))+(((-1.0)*r00*x1562))+(((0.00691988466190158)*x1576))+(((0.211036575236598)*x1574))+(((0.211036575236598)*x1572))+(((6.25181902607023e-7)*x1551))+(((1.3955641253225e-7)*x1563))+(((0.00202253)*cj1)));
evalcond[4]=((((-1.0)*x1580))+(((-1.0)*r20*sj5*x1561))+((x1567*x1570))+(((-1.0)*x1565*x1569))+(((-1.0)*x1565*x1568))+(((-1.0)*x1548*x1573))+(((-1.0)*x1548*x1571))+(((-1.0)*sj3*x1548*x1559))+(((-0.0728695955625022)*x1548*x1555))+x1586+(((0.000272535012753886)*r21*sj4*x1557))+(((0.999993006133494)*r20*x1557))+(((0.0728695955625022)*x1555*x1558))+((r21*x1557*x1559))+(((0.997334464639851)*r22*x1555))+((x1558*x1573))+((x1564*x1566))+(((-1.0)*x1561*x1570)));
evalcond[5]=((((-1.0)*x1585))+((x1560*x1567))+(((-1.0)*r00*sj5*x1561))+(((-1.0)*sj3*x1552*x1559))+(((0.999993006133494)*r00*x1557))+(((0.997334464639851)*r02*x1555))+(((-1.0)*x1552*x1573))+(((-1.0)*x1552*x1571))+(((-1.0)*x1560*x1561))+x1581+(((0.0728695955625022)*x1551*x1555))+(((-1.0)*x1553*x1568))+(((-1.0)*x1553*x1569))+((sj3*x1551*x1559))+(((-0.0728695955625022)*x1552*x1555))+((x1563*x1564))+((x1551*x1573))+((x1551*x1571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1587=(cj4*cj5);
IkReal x1588=((0.00238797124439986)*cj1);
IkReal x1589=(r10*sj1);
IkReal x1590=(cj5*sj4);
IkReal x1591=((0.0728309674939976)*cj4);
IkReal x1592=((0.0326831239315186)*r20);
IkReal x1593=((0.99680577906496)*cj1);
IkReal x1594=(cj4*r12);
IkReal x1595=(r21*sj5);
IkReal x1596=((0.0326831239315186)*sj4);
IkReal x1597=((0.99680577906496)*sj1);
IkReal x1598=((0.00238797124439986)*sj1);
IkReal x1599=(r12*sj4);
IkReal x1600=((0.0728309674939976)*sj1);
IkReal x1601=((0.0326831239315186)*sj1);
IkReal x1602=((0.0728309674939976)*cj1);
IkReal x1603=((0.0326831239315186)*cj1);
IkReal x1604=(cj4*r22);
IkReal x1605=(r11*sj5);
IkReal x1606=(r22*sj4);
IkReal x1607=(sj1*x1605);
if( IKabs(((((-1.0)*x1588*x1606))+(((0.0326831239315186)*x1589*x1590))+(((-1.0)*sj4*x1595*x1597))+(((-1.0)*r20*x1587*x1600))+((x1593*x1594))+((x1600*x1606))+((x1599*x1602))+((sj1*x1591*x1595))+(((-0.00238797124439986)*x1587*x1589))+((x1598*x1599))+((cj1*x1591*x1605))+((cj1*x1595*x1596))+((x1594*x1601))+(((-1.0)*sj4*x1593*x1605))+((r10*x1590*x1593))+(((-1.0)*r10*x1587*x1602))+(((-1.0)*cj1*x1590*x1592))+(((-1.0)*x1596*x1607))+(((-1.0)*x1603*x1604))+((cj4*x1598*x1605))+(((-1.0)*cj4*x1588*x1595))+((r20*x1590*x1597))+((r20*x1587*x1588))+((x1597*x1604)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1593*x1604))+(((-1.0)*sj4*x1597*x1605))+((x1591*x1607))+(((-1.0)*x1594*x1603))+((x1594*x1597))+(((-1.0)*r20*x1590*x1593))+(((-0.0728309674939976)*x1587*x1589))+((x1599*x1600))+((r10*x1587*x1588))+(((-1.0)*x1601*x1604))+(((-1.0)*x1588*x1599))+((sj4*x1593*x1595))+(((-1.0)*cj4*x1595*x1598))+((sj1*x1595*x1596))+(((-1.0)*cj1*x1591*x1595))+(((-1.0)*cj4*x1588*x1605))+((r20*x1587*x1602))+(((-1.0)*x1602*x1606))+(((0.99680577906496)*x1589*x1590))+(((-1.0)*sj1*x1590*x1592))+((r20*x1587*x1598))+(((-1.0)*x1598*x1606))+(((-1.0)*r10*x1590*x1603))+((cj1*x1596*x1605)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1588*x1606))+(((0.0326831239315186)*x1589*x1590))+(((-1.0)*sj4*x1595*x1597))+(((-1.0)*r20*x1587*x1600))+((x1593*x1594))+((x1600*x1606))+((x1599*x1602))+((sj1*x1591*x1595))+(((-0.00238797124439986)*x1587*x1589))+((x1598*x1599))+((cj1*x1591*x1605))+((cj1*x1595*x1596))+((x1594*x1601))+(((-1.0)*sj4*x1593*x1605))+((r10*x1590*x1593))+(((-1.0)*r10*x1587*x1602))+(((-1.0)*cj1*x1590*x1592))+(((-1.0)*x1596*x1607))+(((-1.0)*x1603*x1604))+((cj4*x1598*x1605))+(((-1.0)*cj4*x1588*x1595))+((r20*x1590*x1597))+((r20*x1587*x1588))+((x1597*x1604))))+IKsqr(((((-1.0)*x1593*x1604))+(((-1.0)*sj4*x1597*x1605))+((x1591*x1607))+(((-1.0)*x1594*x1603))+((x1594*x1597))+(((-1.0)*r20*x1590*x1593))+(((-0.0728309674939976)*x1587*x1589))+((x1599*x1600))+((r10*x1587*x1588))+(((-1.0)*x1601*x1604))+(((-1.0)*x1588*x1599))+((sj4*x1593*x1595))+(((-1.0)*cj4*x1595*x1598))+((sj1*x1595*x1596))+(((-1.0)*cj1*x1591*x1595))+(((-1.0)*cj4*x1588*x1605))+((r20*x1587*x1602))+(((-1.0)*x1602*x1606))+(((0.99680577906496)*x1589*x1590))+(((-1.0)*sj1*x1590*x1592))+((r20*x1587*x1598))+(((-1.0)*x1598*x1606))+(((-1.0)*r10*x1590*x1603))+((cj1*x1596*x1605))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1588*x1606))+(((0.0326831239315186)*x1589*x1590))+(((-1.0)*sj4*x1595*x1597))+(((-1.0)*r20*x1587*x1600))+((x1593*x1594))+((x1600*x1606))+((x1599*x1602))+((sj1*x1591*x1595))+(((-0.00238797124439986)*x1587*x1589))+((x1598*x1599))+((cj1*x1591*x1605))+((cj1*x1595*x1596))+((x1594*x1601))+(((-1.0)*sj4*x1593*x1605))+((r10*x1590*x1593))+(((-1.0)*r10*x1587*x1602))+(((-1.0)*cj1*x1590*x1592))+(((-1.0)*x1596*x1607))+(((-1.0)*x1603*x1604))+((cj4*x1598*x1605))+(((-1.0)*cj4*x1588*x1595))+((r20*x1590*x1597))+((r20*x1587*x1588))+((x1597*x1604))), ((((-1.0)*x1593*x1604))+(((-1.0)*sj4*x1597*x1605))+((x1591*x1607))+(((-1.0)*x1594*x1603))+((x1594*x1597))+(((-1.0)*r20*x1590*x1593))+(((-0.0728309674939976)*x1587*x1589))+((x1599*x1600))+((r10*x1587*x1588))+(((-1.0)*x1601*x1604))+(((-1.0)*x1588*x1599))+((sj4*x1593*x1595))+(((-1.0)*cj4*x1595*x1598))+((sj1*x1595*x1596))+(((-1.0)*cj1*x1591*x1595))+(((-1.0)*cj4*x1588*x1605))+((r20*x1587*x1602))+(((-1.0)*x1602*x1606))+(((0.99680577906496)*x1589*x1590))+(((-1.0)*sj1*x1590*x1592))+((r20*x1587*x1598))+(((-1.0)*x1598*x1606))+(((-1.0)*r10*x1590*x1603))+((cj1*x1596*x1605))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1608=IKcos(j2);
IkReal x1609=IKsin(j2);
IkReal x1610=(cj5*r20);
IkReal x1611=((0.0728701052062903)*cj4);
IkReal x1612=(cj5*r10);
IkReal x1613=(sj4*sj5);
IkReal x1614=((0.000272535012753886)*sj3);
IkReal x1615=(r21*sj5);
IkReal x1616=(cj3*cj4);
IkReal x1617=(cj4*r12);
IkReal x1618=((0.997341439912743)*sj4);
IkReal x1619=((1.08150140232244e-9)*sj5);
IkReal x1620=(r10*sj5);
IkReal x1621=((0.999993006133494)*sj3);
IkReal x1622=((1.08150140232244e-9)*cj5);
IkReal x1623=(cj4*r22);
IkReal x1624=((1.01965987338572e-8)*sj4);
IkReal x1625=(r22*sj4);
IkReal x1626=((0.0037400112430517)*cj3);
IkReal x1627=(r11*sj5);
IkReal x1628=((1.3955641253225e-7)*cj4);
IkReal x1629=(cj5*r11);
IkReal x1630=((0.00373006819843503)*sj3);
IkReal x1631=(r12*sj4);
IkReal x1632=((0.997334464639851)*cj3);
IkReal x1633=(cj5*r21);
IkReal x1634=(r20*sj5);
IkReal x1635=((0.211036575236598)*x1609);
IkReal x1636=(sj1*x1608);
IkReal x1637=((0.0728695955625022)*cj3*sj4);
IkReal x1638=(cj4*x1630);
IkReal x1639=(cj1*x1609);
IkReal x1640=(cj1*x1608);
IkReal x1641=(sj1*x1609);
IkReal x1642=((0.999462911269554)*x1639);
IkReal x1643=((0.999462911269554)*x1636);
IkReal x1644=((0.0327702455985164)*x1641);
IkReal x1645=((0.0327702455985164)*x1640);
IkReal x1646=((0.999462911269554)*x1640);
IkReal x1647=((0.0327702455985164)*x1636);
IkReal x1648=((0.0327702455985164)*x1639);
IkReal x1649=((0.999462911269554)*x1641);
IkReal x1650=(x1647+x1646+x1648);
IkReal x1651=(x1644+x1643+x1642);
evalcond[0]=((((-1.0)*x1611*x1615))+x1649+(((-1.0)*x1610*x1618))+(((0.997341439912743)*r21*x1613))+(((-0.997341439912743)*x1623))+(((-1.0)*x1650))+(((-0.0728701052062903)*x1625))+((x1610*x1611)));
evalcond[1]=((((-0.0728701052062903)*x1631))+(((-1.0)*x1611*x1627))+x1651+(((-1.0)*x1645))+(((-0.997341439912743)*x1617))+(((0.997341439912743)*r11*x1613))+(((-1.0)*x1612*x1618))+((x1611*x1612)));
evalcond[2]=((((-1.0)*sj1*x1635))+(((0.211036575236598)*x1640))+(((-1.0)*r20*x1619))+(((-1.0)*r21*x1622))+(((-1.0)*x1610*x1624))+(((-1.0)*x1610*x1628))+(((0.14998636)*cj1))+(((6.25181902607023e-7)*x1615))+(((0.00691988466190158)*x1639))+(((0.00691988466190158)*x1636))+(((-1.0)*pz))+((x1615*x1628))+(((1.3955641253225e-7)*x1625))+(((-6.25181902607023e-7)*x1610))+(((-1.01965987338572e-8)*x1623))+(((-0.00202253)*sj1))+(((1.01965987338572e-8)*r21*x1613)));
evalcond[3]=((((-0.211036575236598)*x1636))+(((-1.0)*r11*x1622))+((x1627*x1628))+(((1.01965987338572e-8)*r11*x1613))+(((-1.0)*cj1*x1635))+(((0.00691988466190158)*x1640))+(((-0.00202253)*cj1))+(((-0.14998636)*sj1))+(((-1.0)*py))+(((6.25181902607023e-7)*x1627))+(((1.3955641253225e-7)*x1631))+(((-1.0)*r10*x1619))+(((-1.01965987338572e-8)*x1617))+(((-6.25181902607023e-7)*x1612))+(((-1.0)*x1612*x1624))+(((-1.0)*x1612*x1628))+(((-0.00691988466190158)*x1641)));
evalcond[4]=((((0.997334464639851)*x1615*x1616))+(((-0.997334464639851)*x1610*x1616))+x1651+((x1621*x1634))+((x1621*x1633))+((r21*x1613*x1614))+((x1615*x1638))+((x1625*x1632))+((x1625*x1630))+(((-1.0)*x1645))+(((-1.0)*sj4*x1610*x1614))+(((-1.0)*x1614*x1623))+(((-1.0)*x1610*x1638))+(((-1.0)*x1610*x1637))+(((0.0728695955625022)*cj3*r21*x1613))+(((-1.0)*x1626*x1634))+(((-1.0)*x1626*x1633))+(((-0.0728695955625022)*r22*x1616)));
evalcond[5]=(((x1620*x1621))+((x1627*x1638))+x1650+(((-0.997334464639851)*x1612*x1616))+(((-1.0)*x1612*x1638))+(((-1.0)*x1612*x1637))+(((-1.0)*x1649))+((r11*x1613*x1614))+(((-1.0)*x1620*x1626))+(((0.997334464639851)*x1616*x1627))+(((-1.0)*x1614*x1617))+(((-0.0728695955625022)*r12*x1616))+((x1631*x1632))+((x1630*x1631))+(((-1.0)*x1626*x1629))+(((-1.0)*sj4*x1612*x1614))+(((0.0728695955625022)*cj3*r11*x1613))+((x1621*x1629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1652=(cj4*cj5);
IkReal x1653=((0.00238797124439986)*cj1);
IkReal x1654=(r10*sj1);
IkReal x1655=(cj5*sj4);
IkReal x1656=((0.0728309674939976)*cj4);
IkReal x1657=((0.0326831239315186)*r20);
IkReal x1658=((0.99680577906496)*cj1);
IkReal x1659=(cj4*r12);
IkReal x1660=(sj4*sj5);
IkReal x1661=((0.99680577906496)*sj1);
IkReal x1662=((0.00238797124439986)*sj1);
IkReal x1663=((0.0326831239315186)*cj1);
IkReal x1664=(r12*sj4);
IkReal x1665=((0.0728309674939976)*sj1);
IkReal x1666=((0.0326831239315186)*sj1);
IkReal x1667=((0.0728309674939976)*cj1);
IkReal x1668=(r21*sj5);
IkReal x1669=(cj4*r22);
IkReal x1670=(r11*sj5);
IkReal x1671=(r22*sj4);
IkReal x1672=(sj1*x1670);
if( IKabs((((r10*x1652*x1667))+((x1665*x1671))+(((-1.0)*x1662*x1664))+(((-1.0)*cj1*x1655*x1657))+((sj1*x1656*x1668))+(((-1.0)*r20*x1652*x1665))+((r11*x1660*x1666))+((r20*x1652*x1653))+((r11*x1658*x1660))+((r20*x1655*x1661))+(((-1.0)*x1663*x1669))+(((0.00238797124439986)*x1652*x1654))+(((-1.0)*cj4*x1653*x1668))+(((-1.0)*cj4*x1662*x1670))+(((-1.0)*cj1*x1656*x1670))+((r21*x1660*x1663))+(((-1.0)*r21*x1660*x1661))+(((-1.0)*r10*x1655*x1658))+(((-1.0)*x1658*x1659))+((x1661*x1669))+(((-0.0326831239315186)*x1654*x1655))+(((-1.0)*x1664*x1667))+(((-1.0)*x1653*x1671))+(((-1.0)*x1659*x1666)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1667*x1671))+((r10*x1655*x1663))+((r21*x1658*x1660))+((r11*x1660*x1661))+(((-1.0)*sj1*x1655*x1657))+((r20*x1652*x1667))+((r20*x1652*x1662))+(((-1.0)*cj1*x1656*x1668))+(((-1.0)*r11*x1660*x1663))+(((-1.0)*x1656*x1672))+(((-1.0)*x1662*x1671))+((cj4*x1653*x1670))+(((0.0728309674939976)*x1652*x1654))+((r21*x1660*x1666))+((x1659*x1663))+(((-1.0)*r20*x1655*x1658))+(((-0.99680577906496)*x1654*x1655))+(((-1.0)*r10*x1652*x1653))+(((-1.0)*x1658*x1669))+(((-1.0)*x1666*x1669))+((x1653*x1664))+(((-1.0)*cj4*x1662*x1668))+(((-1.0)*x1664*x1665))+(((-1.0)*x1659*x1661)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x1652*x1667))+((x1665*x1671))+(((-1.0)*x1662*x1664))+(((-1.0)*cj1*x1655*x1657))+((sj1*x1656*x1668))+(((-1.0)*r20*x1652*x1665))+((r11*x1660*x1666))+((r20*x1652*x1653))+((r11*x1658*x1660))+((r20*x1655*x1661))+(((-1.0)*x1663*x1669))+(((0.00238797124439986)*x1652*x1654))+(((-1.0)*cj4*x1653*x1668))+(((-1.0)*cj4*x1662*x1670))+(((-1.0)*cj1*x1656*x1670))+((r21*x1660*x1663))+(((-1.0)*r21*x1660*x1661))+(((-1.0)*r10*x1655*x1658))+(((-1.0)*x1658*x1659))+((x1661*x1669))+(((-0.0326831239315186)*x1654*x1655))+(((-1.0)*x1664*x1667))+(((-1.0)*x1653*x1671))+(((-1.0)*x1659*x1666))))+IKsqr(((((-1.0)*x1667*x1671))+((r10*x1655*x1663))+((r21*x1658*x1660))+((r11*x1660*x1661))+(((-1.0)*sj1*x1655*x1657))+((r20*x1652*x1667))+((r20*x1652*x1662))+(((-1.0)*cj1*x1656*x1668))+(((-1.0)*r11*x1660*x1663))+(((-1.0)*x1656*x1672))+(((-1.0)*x1662*x1671))+((cj4*x1653*x1670))+(((0.0728309674939976)*x1652*x1654))+((r21*x1660*x1666))+((x1659*x1663))+(((-1.0)*r20*x1655*x1658))+(((-0.99680577906496)*x1654*x1655))+(((-1.0)*r10*x1652*x1653))+(((-1.0)*x1658*x1669))+(((-1.0)*x1666*x1669))+((x1653*x1664))+(((-1.0)*cj4*x1662*x1668))+(((-1.0)*x1664*x1665))+(((-1.0)*x1659*x1661))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r10*x1652*x1667))+((x1665*x1671))+(((-1.0)*x1662*x1664))+(((-1.0)*cj1*x1655*x1657))+((sj1*x1656*x1668))+(((-1.0)*r20*x1652*x1665))+((r11*x1660*x1666))+((r20*x1652*x1653))+((r11*x1658*x1660))+((r20*x1655*x1661))+(((-1.0)*x1663*x1669))+(((0.00238797124439986)*x1652*x1654))+(((-1.0)*cj4*x1653*x1668))+(((-1.0)*cj4*x1662*x1670))+(((-1.0)*cj1*x1656*x1670))+((r21*x1660*x1663))+(((-1.0)*r21*x1660*x1661))+(((-1.0)*r10*x1655*x1658))+(((-1.0)*x1658*x1659))+((x1661*x1669))+(((-0.0326831239315186)*x1654*x1655))+(((-1.0)*x1664*x1667))+(((-1.0)*x1653*x1671))+(((-1.0)*x1659*x1666))), ((((-1.0)*x1667*x1671))+((r10*x1655*x1663))+((r21*x1658*x1660))+((r11*x1660*x1661))+(((-1.0)*sj1*x1655*x1657))+((r20*x1652*x1667))+((r20*x1652*x1662))+(((-1.0)*cj1*x1656*x1668))+(((-1.0)*r11*x1660*x1663))+(((-1.0)*x1656*x1672))+(((-1.0)*x1662*x1671))+((cj4*x1653*x1670))+(((0.0728309674939976)*x1652*x1654))+((r21*x1660*x1666))+((x1659*x1663))+(((-1.0)*r20*x1655*x1658))+(((-0.99680577906496)*x1654*x1655))+(((-1.0)*r10*x1652*x1653))+(((-1.0)*x1658*x1669))+(((-1.0)*x1666*x1669))+((x1653*x1664))+(((-1.0)*cj4*x1662*x1668))+(((-1.0)*x1664*x1665))+(((-1.0)*x1659*x1661))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1673=IKcos(j2);
IkReal x1674=IKsin(j2);
IkReal x1675=(cj5*r20);
IkReal x1676=((0.0728701052062903)*cj4);
IkReal x1677=(cj5*r10);
IkReal x1678=(sj4*sj5);
IkReal x1679=((0.000272535012753886)*sj3);
IkReal x1680=(r21*sj5);
IkReal x1681=(cj3*cj4);
IkReal x1682=(cj4*r12);
IkReal x1683=((0.997341439912743)*sj4);
IkReal x1684=((1.08150140232244e-9)*sj5);
IkReal x1685=(r10*sj5);
IkReal x1686=((0.999993006133494)*sj3);
IkReal x1687=((1.08150140232244e-9)*cj5);
IkReal x1688=(cj4*r22);
IkReal x1689=((1.01965987338572e-8)*sj4);
IkReal x1690=(r22*sj4);
IkReal x1691=((0.0037400112430517)*cj3);
IkReal x1692=(r11*sj5);
IkReal x1693=((1.3955641253225e-7)*cj4);
IkReal x1694=(cj5*r11);
IkReal x1695=((0.00373006819843503)*sj3);
IkReal x1696=(r12*sj4);
IkReal x1697=((0.997334464639851)*cj3);
IkReal x1698=(cj5*r21);
IkReal x1699=(r20*sj5);
IkReal x1700=((0.211036575236598)*x1674);
IkReal x1701=(sj1*x1673);
IkReal x1702=((0.0728695955625022)*cj3*sj4);
IkReal x1703=(cj4*x1695);
IkReal x1704=(cj1*x1674);
IkReal x1705=(cj1*x1673);
IkReal x1706=(sj1*x1674);
IkReal x1707=((0.999462911269554)*x1704);
IkReal x1708=((0.999462911269554)*x1701);
IkReal x1709=((0.0327702455985164)*x1706);
IkReal x1710=((0.0327702455985164)*x1705);
IkReal x1711=((0.999462911269554)*x1706);
IkReal x1712=((0.999462911269554)*x1705);
IkReal x1713=((0.0327702455985164)*x1701);
IkReal x1714=((0.0327702455985164)*x1704);
IkReal x1715=(x1713+x1712+x1714);
IkReal x1716=(x1707+x1708+x1709);
evalcond[0]=(((x1675*x1676))+x1711+(((-1.0)*x1675*x1683))+(((-1.0)*x1715))+(((-1.0)*x1676*x1680))+(((-0.997341439912743)*x1688))+(((-0.0728701052062903)*x1690))+(((0.997341439912743)*r21*x1678)));
evalcond[1]=(((x1676*x1677))+(((-1.0)*x1676*x1692))+(((-1.0)*x1677*x1683))+x1710+(((-1.0)*x1716))+(((-0.997341439912743)*x1682))+(((-0.0728701052062903)*x1696))+(((0.997341439912743)*r11*x1678)));
evalcond[2]=((((-6.25181902607023e-7)*x1675))+(((-1.0)*x1675*x1693))+(((0.211036575236598)*x1705))+(((-1.0)*x1675*x1689))+(((-1.0)*r20*x1684))+(((0.14998636)*cj1))+(((-1.0)*sj1*x1700))+(((-1.0)*r21*x1687))+(((6.25181902607023e-7)*x1680))+(((-1.01965987338572e-8)*x1688))+(((-1.0)*pz))+(((1.3955641253225e-7)*x1690))+(((1.01965987338572e-8)*r21*x1678))+(((-0.00202253)*sj1))+(((0.00691988466190158)*x1704))+(((0.00691988466190158)*x1701))+((x1680*x1693)));
evalcond[3]=((((-6.25181902607023e-7)*x1677))+(((-0.00691988466190158)*x1705))+((cj1*x1700))+(((-1.0)*x1677*x1689))+(((-1.0)*r11*x1687))+(((0.211036575236598)*x1701))+(((-1.0)*r10*x1684))+(((0.14998636)*sj1))+((x1692*x1693))+(((6.25181902607023e-7)*x1692))+(((-1.01965987338572e-8)*x1682))+(((-1.0)*py))+(((1.01965987338572e-8)*r11*x1678))+(((1.3955641253225e-7)*x1696))+(((-1.0)*x1677*x1693))+(((0.00691988466190158)*x1706))+(((0.00202253)*cj1)));
evalcond[4]=(((x1690*x1695))+((x1690*x1697))+(((-0.997334464639851)*x1675*x1681))+x1716+(((-1.0)*x1710))+((r21*x1678*x1679))+((x1680*x1703))+(((-1.0)*x1679*x1688))+(((-1.0)*x1691*x1698))+(((-1.0)*x1691*x1699))+(((0.0728695955625022)*cj3*r21*x1678))+((x1686*x1698))+((x1686*x1699))+(((-1.0)*x1675*x1703))+(((-1.0)*x1675*x1702))+(((0.997334464639851)*x1680*x1681))+(((-1.0)*sj4*x1675*x1679))+(((-0.0728695955625022)*r22*x1681)));
evalcond[5]=((((0.0728695955625022)*cj3*r11*x1678))+x1711+(((-1.0)*x1715))+((x1695*x1696))+(((-0.997334464639851)*x1677*x1681))+(((-1.0)*x1679*x1682))+(((-1.0)*x1691*x1694))+((x1686*x1694))+(((-0.0728695955625022)*r12*x1681))+((r11*x1678*x1679))+(((-1.0)*x1677*x1703))+(((-1.0)*x1677*x1702))+((x1696*x1697))+((x1692*x1703))+((x1685*x1686))+(((0.997334464639851)*x1681*x1692))+(((-1.0)*sj4*x1677*x1679))+(((-1.0)*x1685*x1691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1717=((0.99680577906496)*sj4);
IkReal x1718=((0.0728309674939976)*cj4);
IkReal x1719=((0.00238797124439986)*cj1);
IkReal x1720=(r22*sj0);
IkReal x1721=(cj4*cj5);
IkReal x1722=((0.0326831239315186)*sj4);
IkReal x1723=(r12*sj1);
IkReal x1724=((0.99680577906496)*cj4);
IkReal x1725=((0.00238797124439986)*cj4);
IkReal x1726=((0.0728309674939976)*sj4);
IkReal x1727=((0.00238797124439986)*sj4);
IkReal x1728=((0.0326831239315186)*cj4);
IkReal x1729=(cj1*r12);
IkReal x1730=(r20*sj0);
IkReal x1731=(r11*sj5);
IkReal x1732=(cj5*r10*sj1);
IkReal x1733=(sj1*x1731);
IkReal x1734=(cj1*x1724);
IkReal x1735=(r21*sj0*sj5);
IkReal x1736=(cj5*x1730);
IkReal x1737=(cj1*cj5*r10);
CheckValue<IkReal> x1738 = IKatan2WithCheck(IkReal((((cj1*x1722*x1736))+(((-1.0)*sj1*x1720*x1726))+(((-1.0)*sj1*x1720*x1724))+((x1722*x1733))+(((-1.0)*x1726*x1729))+(((-1.0)*x1719*x1721*x1730))+(((-1.0)*x1722*x1732))+(((-1.0)*sj1*x1718*x1735))+((sj1*x1718*x1736))+((x1718*x1737))+(((-1.0)*x1723*x1727))+(((-1.0)*x1723*x1728))+((sj1*x1717*x1735))+(((-1.0)*x1717*x1737))+(((-1.0)*cj1*x1722*x1735))+((cj4*x1719*x1735))+((cj1*x1720*x1728))+((cj1*x1717*x1731))+((sj4*x1719*x1720))+(((0.00238797124439986)*r10*sj1*x1721))+(((-1.0)*x1724*x1729))+(((-1.0)*cj1*x1718*x1731))+(((-1.0)*x1725*x1733))+(((-1.0)*sj1*x1717*x1736)))),IkReal((((x1728*x1729))+(((-1.0)*r10*x1719*x1721))+((cj1*x1718*x1735))+((x1722*x1737))+((sj1*x1720*x1728))+((sj1*x1720*x1727))+(((-1.0)*cj1*x1717*x1735))+((r12*sj4*x1719))+((sj1*x1725*x1735))+((sj1*x1722*x1736))+((x1718*x1732))+(((-1.0)*x1723*x1724))+(((-1.0)*x1723*x1726))+((x1717*x1733))+((x1720*x1734))+(((-1.0)*x1717*x1732))+(((-1.0)*cj1*x1722*x1731))+((cj4*x1719*x1731))+((cj1*x1720*x1726))+((cj1*x1717*x1736))+(((-0.00238797124439986)*sj1*x1721*x1730))+(((-1.0)*cj1*x1718*x1736))+(((-1.0)*x1718*x1733))+(((-1.0)*sj1*x1722*x1735)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1738.valid){
continue;
}
CheckValue<IkReal> x1739=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1739.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1738.value)+(((-1.5707963267949)*(x1739.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1740=IKcos(j2);
IkReal x1741=IKsin(j2);
IkReal x1742=(cj3*cj5);
IkReal x1743=(sj3*sj5);
IkReal x1744=((0.000272535012753886)*sj4);
IkReal x1745=(cj4*r02);
IkReal x1746=((0.00373006819843503)*cj4);
IkReal x1747=(cj5*r00);
IkReal x1748=((1.3955641253225e-7)*cj4);
IkReal x1749=((0.0728695955625022)*sj4);
IkReal x1750=((1.01965987338572e-8)*sj4);
IkReal x1751=(r01*sj5);
IkReal x1752=(cj5*r20);
IkReal x1753=((0.211036575236598)*sj0);
IkReal x1754=(r21*sj5);
IkReal x1755=((0.997334464639851)*cj3);
IkReal x1756=(cj4*r12);
IkReal x1757=((0.0728701052062903)*cj4);
IkReal x1758=((0.211036575236598)*cj0);
IkReal x1759=(cj0*sj1);
IkReal x1760=((0.997341439912743)*sj4);
IkReal x1761=((1.08150140232244e-9)*sj5);
IkReal x1762=(r02*sj4);
IkReal x1763=((1.08150140232244e-9)*cj5);
IkReal x1764=((0.000272535012753886)*sj3);
IkReal x1765=((0.999462911269554)*cj0);
IkReal x1766=(cj4*r22);
IkReal x1767=((0.0327702455985164)*cj0);
IkReal x1768=(cj5*r10);
IkReal x1769=(r12*sj4);
IkReal x1770=((0.997334464639851)*cj4);
IkReal x1771=((0.999462911269554)*sj0);
IkReal x1772=(r22*sj4);
IkReal x1773=(r11*sj5);
IkReal x1774=(sj0*sj1);
IkReal x1775=((0.0327702455985164)*sj0);
IkReal x1776=((0.0728695955625022)*cj3);
IkReal x1777=((0.00202253)*cj1);
IkReal x1778=(cj5*x1757);
IkReal x1779=(sj1*x1740);
IkReal x1780=(cj1*x1741);
IkReal x1781=((0.00373006819843503)*sj3*sj4);
IkReal x1782=((0.00691988466190158)*x1741);
IkReal x1783=(sj1*x1741);
IkReal x1784=((0.999993006133494)*cj5*sj3);
IkReal x1785=((0.0037400112430517)*cj3*sj5);
IkReal x1786=(cj1*x1740);
IkReal x1787=(sj0*x1786);
evalcond[0]=(((x1752*x1757))+(((-1.0)*x1752*x1760))+(((-0.0327702455985164)*x1779))+(((-0.997341439912743)*x1766))+(((0.999462911269554)*x1783))+(((-0.0327702455985164)*x1780))+((x1754*x1760))+(((-0.999462911269554)*x1786))+(((-1.0)*x1754*x1757))+(((-0.0728701052062903)*x1772)));
evalcond[1]=((((0.999462911269554)*x1740*x1759))+(((-1.0)*x1747*x1760))+((x1747*x1757))+((x1751*x1760))+(((-1.0)*x1751*x1757))+(((-0.997341439912743)*x1745))+((x1765*x1780))+(((-0.0728701052062903)*x1762))+(((-1.0)*x1767*x1786))+(((0.0327702455985164)*x1741*x1759)));
evalcond[2]=(((x1760*x1773))+((x1771*x1779))+(((-1.0)*x1775*x1786))+(((-1.0)*x1757*x1773))+((x1757*x1768))+(((0.0327702455985164)*x1741*x1774))+(((-1.0)*x1760*x1768))+(((-0.997341439912743)*x1756))+((x1771*x1780))+(((-0.0728701052062903)*x1769)));
evalcond[3]=((((-1.01965987338572e-8)*x1766))+(((-1.0)*x1748*x1752))+(((-1.0)*r21*x1763))+(((-1.0)*r20*x1761))+(((0.14998636)*cj1))+(((0.00691988466190158)*x1780))+((x1750*x1754))+(((-6.25181902607023e-7)*x1752))+(((-1.0)*pz))+(((0.211036575236598)*x1786))+(((-1.0)*x1750*x1752))+((x1748*x1754))+(((-0.211036575236598)*x1783))+(((0.00691988466190158)*x1779))+(((6.25181902607023e-7)*x1754))+(((-0.00202253)*sj1))+(((1.3955641253225e-7)*x1772)));
evalcond[4]=((((0.0327702455985164)*x1783))+(((-1.0)*r20*x1742*x1749))+(((0.999993006133494)*r20*x1743))+(((-1.0)*sj3*x1746*x1752))+((r21*x1784))+((cj4*x1754*x1755))+(((-1.0)*sj3*x1744*x1752))+(((0.999462911269554)*x1780))+((r21*x1743*x1746))+((r21*x1743*x1744))+(((0.00373006819843503)*sj3*x1772))+(((-0.0327702455985164)*x1786))+((x1755*x1772))+((cj3*x1749*x1754))+(((-1.0)*x1764*x1766))+(((-1.0)*r20*x1785))+(((-0.0037400112430517)*r21*x1742))+(((-1.0)*x1766*x1776))+(((0.999462911269554)*x1779))+(((-1.0)*r20*x1742*x1770)));
evalcond[5]=((((-1.0)*r01*x1763))+(((-1.0)*r00*x1761))+(((-1.0)*x1759*x1782))+(((-1.0)*x1758*x1779))+(((1.3955641253225e-7)*x1762))+(((0.00691988466190158)*cj0*x1786))+((x1750*x1751))+(((-0.14998636)*x1759))+(((-1.0)*x1747*x1750))+(((-6.25181902607023e-7)*x1747))+(((-1.0)*px))+(((-1.01965987338572e-8)*x1745))+((x1748*x1751))+(((-1.0)*x1747*x1748))+(((-1.0)*x1758*x1780))+(((-1.0)*cj0*x1777))+(((6.25181902607023e-7)*x1751)));
evalcond[6]=((((-1.0)*x1753*x1780))+(((-1.0)*x1750*x1768))+((x1748*x1773))+(((-1.0)*x1774*x1782))+((x1750*x1773))+(((1.3955641253225e-7)*x1769))+(((6.25181902607023e-7)*x1773))+(((0.00691988466190158)*x1787))+(((-1.0)*r11*x1763))+(((-1.01965987338572e-8)*x1756))+(((-1.0)*py))+(((-1.0)*x1748*x1768))+(((-1.0)*sj0*x1777))+(((-1.0)*x1753*x1779))+(((-0.14998636)*x1774))+(((-1.0)*r10*x1761))+(((-6.25181902607023e-7)*x1768)));
evalcond[7]=((((0.999993006133494)*r00*x1743))+(((-1.0)*r00*x1742*x1749))+(((-1.0)*r00*x1785))+(((-1.0)*sj3*x1746*x1747))+(((-1.0)*x1745*x1764))+(((-1.0)*r00*x1742*x1770))+(((0.00373006819843503)*sj3*x1762))+(((-1.0)*sj3*x1744*x1747))+(((0.0327702455985164)*x1740*x1759))+((cj4*x1751*x1755))+(((-0.999462911269554)*x1741*x1759))+((x1755*x1762))+((cj3*x1749*x1751))+((x1767*x1780))+(((-1.0)*x1745*x1776))+((r01*x1743*x1746))+((r01*x1743*x1744))+((x1765*x1786))+((r01*x1784))+(((-0.0037400112430517)*r01*x1742)));
evalcond[8]=(((cj3*x1749*x1773))+(((-1.0)*r10*x1785))+((x1775*x1780))+(((0.00373006819843503)*sj3*x1769))+(((-1.0)*x1756*x1776))+(((-1.0)*r10*x1742*x1749))+((x1755*x1769))+((r11*x1743*x1746))+((r11*x1743*x1744))+(((-1.0)*x1756*x1764))+(((-0.0037400112430517)*r11*x1742))+((cj4*x1755*x1773))+(((-1.0)*sj3*x1746*x1768))+(((0.0327702455985164)*x1740*x1774))+((r11*x1784))+(((0.999993006133494)*r10*x1743))+((x1771*x1786))+(((-1.0)*r10*x1742*x1770))+(((-1.0)*x1771*x1783))+(((-1.0)*sj3*x1744*x1768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1788=(cj1*sj4);
IkReal x1789=((0.0326831239315186)*cj5);
IkReal x1790=((0.0728309674939976)*r02);
IkReal x1791=((0.0326831239315186)*sj1);
IkReal x1792=(cj0*r20);
IkReal x1793=(sj1*sj4);
IkReal x1794=((0.00238797124439986)*r02);
IkReal x1795=((0.99680577906496)*cj1);
IkReal x1796=(cj4*sj1);
IkReal x1797=((0.00238797124439986)*cj5);
IkReal x1798=(cj4*r02);
IkReal x1799=((0.0326831239315186)*cj1);
IkReal x1800=(r01*sj5);
IkReal x1801=((0.0728309674939976)*cj5);
IkReal x1802=(cj5*r00);
IkReal x1803=(cj0*r22);
IkReal x1804=(cj1*cj4);
IkReal x1805=((0.99680577906496)*cj5);
IkReal x1806=(cj4*x1803);
IkReal x1807=(cj0*r21*sj5);
IkReal x1808=((0.0728309674939976)*x1804);
CheckValue<IkReal> x1809 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x1789*x1793))+(((-1.0)*x1795*x1798))+(((-0.0728309674939976)*x1796*x1807))+((sj4*x1791*x1800))+((x1799*x1806))+(((-1.0)*x1792*x1797*x1804))+(((0.99680577906496)*x1793*x1807))+(((-0.99680577906496)*x1796*x1803))+(((-0.0728309674939976)*x1793*x1803))+(((-0.0326831239315186)*x1788*x1807))+((r00*x1801*x1804))+(((0.99680577906496)*x1788*x1800))+((r00*x1796*x1797))+((x1788*x1789*x1792))+(((-1.0)*x1793*x1794))+(((-1.0)*x1800*x1808))+(((0.00238797124439986)*x1804*x1807))+(((-1.0)*x1788*x1790))+(((-1.0)*x1792*x1793*x1805))+(((-0.00238797124439986)*x1796*x1800))+(((-0.99680577906496)*x1788*x1802))+((x1792*x1796*x1801))+(((0.00238797124439986)*x1788*x1803))+(((-1.0)*x1791*x1798)))),IkReal((((x1798*x1799))+(((-0.0728309674939976)*x1796*x1800))+((r00*x1788*x1789))+(((-1.0)*x1790*x1793))+(((0.99680577906496)*x1793*x1800))+((r00*x1796*x1801))+(((-0.0326831239315186)*x1788*x1800))+(((0.00238797124439986)*x1796*x1807))+((x1795*x1806))+(((-0.99680577906496)*x1793*x1802))+((x1789*x1792*x1793))+(((-1.0)*x1792*x1796*x1797))+(((0.0728309674939976)*x1788*x1803))+(((-1.0)*r00*x1797*x1804))+(((-0.99680577906496)*r02*x1796))+((x1788*x1792*x1805))+(((-1.0)*x1792*x1801*x1804))+(((0.00238797124439986)*x1793*x1803))+(((-0.99680577906496)*x1788*x1807))+(((-1.0)*sj4*x1791*x1807))+((x1788*x1794))+((x1807*x1808))+((x1791*x1806))+(((0.00238797124439986)*x1800*x1804)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1809.valid){
continue;
}
CheckValue<IkReal> x1810=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1810.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1809.value)+(((-1.5707963267949)*(x1810.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1811=IKcos(j2);
IkReal x1812=IKsin(j2);
IkReal x1813=(cj3*cj5);
IkReal x1814=(sj3*sj5);
IkReal x1815=((0.000272535012753886)*sj4);
IkReal x1816=(cj4*r02);
IkReal x1817=((0.00373006819843503)*cj4);
IkReal x1818=(cj5*r00);
IkReal x1819=((1.3955641253225e-7)*cj4);
IkReal x1820=((0.0728695955625022)*sj4);
IkReal x1821=((1.01965987338572e-8)*sj4);
IkReal x1822=(r01*sj5);
IkReal x1823=(cj5*r20);
IkReal x1824=((0.211036575236598)*sj0);
IkReal x1825=(r21*sj5);
IkReal x1826=((0.997334464639851)*cj3);
IkReal x1827=(cj4*r12);
IkReal x1828=((0.0728701052062903)*cj4);
IkReal x1829=((0.211036575236598)*cj0);
IkReal x1830=(cj0*sj1);
IkReal x1831=((0.997341439912743)*sj4);
IkReal x1832=((1.08150140232244e-9)*sj5);
IkReal x1833=(r02*sj4);
IkReal x1834=((1.08150140232244e-9)*cj5);
IkReal x1835=((0.000272535012753886)*sj3);
IkReal x1836=((0.999462911269554)*cj0);
IkReal x1837=(cj4*r22);
IkReal x1838=((0.0327702455985164)*cj0);
IkReal x1839=(cj5*r10);
IkReal x1840=(r12*sj4);
IkReal x1841=((0.997334464639851)*cj4);
IkReal x1842=((0.999462911269554)*sj0);
IkReal x1843=(r22*sj4);
IkReal x1844=(r11*sj5);
IkReal x1845=(sj0*sj1);
IkReal x1846=((0.0327702455985164)*sj0);
IkReal x1847=((0.0728695955625022)*cj3);
IkReal x1848=((0.00202253)*cj1);
IkReal x1849=(cj5*x1828);
IkReal x1850=(sj1*x1811);
IkReal x1851=(cj1*x1812);
IkReal x1852=((0.00373006819843503)*sj3*sj4);
IkReal x1853=((0.00691988466190158)*x1812);
IkReal x1854=(sj1*x1812);
IkReal x1855=((0.999993006133494)*cj5*sj3);
IkReal x1856=((0.0037400112430517)*cj3*sj5);
IkReal x1857=(cj1*x1811);
IkReal x1858=(sj0*x1857);
evalcond[0]=((((-0.997341439912743)*x1837))+((x1823*x1828))+(((-1.0)*x1825*x1828))+(((0.999462911269554)*x1854))+(((-0.0728701052062903)*x1843))+((x1825*x1831))+(((-1.0)*x1823*x1831))+(((-0.0327702455985164)*x1851))+(((-0.0327702455985164)*x1850))+(((-0.999462911269554)*x1857)));
evalcond[1]=((((-0.0728701052062903)*x1833))+(((0.0327702455985164)*x1812*x1830))+((x1818*x1828))+((x1836*x1851))+(((-1.0)*x1838*x1857))+((x1822*x1831))+(((-1.0)*x1818*x1831))+(((-1.0)*x1822*x1828))+(((-0.997341439912743)*x1816))+(((0.999462911269554)*x1811*x1830)));
evalcond[2]=(((x1842*x1850))+((x1842*x1851))+(((0.0327702455985164)*x1812*x1845))+(((-1.0)*x1828*x1844))+((x1831*x1844))+(((-0.0728701052062903)*x1840))+(((-1.0)*x1831*x1839))+((x1828*x1839))+(((-0.997341439912743)*x1827))+(((-1.0)*x1846*x1857)));
evalcond[3]=((((0.00691988466190158)*x1851))+(((0.00691988466190158)*x1850))+(((-1.0)*x1821*x1823))+(((-1.0)*r20*x1832))+((x1819*x1825))+(((-1.0)*r21*x1834))+(((0.14998636)*cj1))+(((-1.0)*x1819*x1823))+(((-1.0)*pz))+((x1821*x1825))+(((0.211036575236598)*x1857))+(((6.25181902607023e-7)*x1825))+(((-6.25181902607023e-7)*x1823))+(((-1.01965987338572e-8)*x1837))+(((1.3955641253225e-7)*x1843))+(((-0.211036575236598)*x1854))+(((-0.00202253)*sj1)));
evalcond[4]=((((-1.0)*r20*x1813*x1820))+(((-1.0)*sj3*x1817*x1823))+(((0.00373006819843503)*sj3*x1843))+((x1826*x1843))+(((-1.0)*x1835*x1837))+(((-1.0)*r20*x1813*x1841))+(((-0.0037400112430517)*r21*x1813))+(((0.999462911269554)*x1850))+(((0.999462911269554)*x1851))+(((-1.0)*sj3*x1815*x1823))+(((0.999993006133494)*r20*x1814))+((r21*x1814*x1815))+((r21*x1814*x1817))+(((-1.0)*x1837*x1847))+(((-0.0327702455985164)*x1857))+(((0.0327702455985164)*x1854))+((r21*x1855))+((cj3*x1820*x1825))+(((-1.0)*r20*x1856))+((cj4*x1825*x1826)));
evalcond[5]=((((-1.0)*x1830*x1853))+((x1819*x1822))+(((-1.0)*r00*x1832))+(((-1.0)*r01*x1834))+(((-1.01965987338572e-8)*x1816))+(((-1.0)*x1818*x1821))+(((-1.0)*px))+((x1821*x1822))+(((6.25181902607023e-7)*x1822))+(((0.00691988466190158)*cj0*x1857))+(((1.3955641253225e-7)*x1833))+(((-0.14998636)*x1830))+(((-1.0)*x1818*x1819))+(((-6.25181902607023e-7)*x1818))+(((-1.0)*cj0*x1848))+(((-1.0)*x1829*x1850))+(((-1.0)*x1829*x1851)));
evalcond[6]=((((-1.0)*x1845*x1853))+(((0.00691988466190158)*x1858))+(((-0.14998636)*x1845))+((x1819*x1844))+(((-1.0)*r10*x1832))+(((6.25181902607023e-7)*x1844))+(((-1.0)*py))+(((-1.0)*x1819*x1839))+(((-1.0)*sj0*x1848))+(((-1.0)*x1824*x1850))+(((-1.0)*x1824*x1851))+(((-6.25181902607023e-7)*x1839))+(((1.3955641253225e-7)*x1840))+((x1821*x1844))+(((-1.0)*r11*x1834))+(((-1.0)*x1821*x1839))+(((-1.01965987338572e-8)*x1827)));
evalcond[7]=((((-1.0)*sj3*x1817*x1818))+(((0.999993006133494)*r00*x1814))+((x1826*x1833))+((r01*x1855))+((x1836*x1857))+((x1838*x1851))+(((-1.0)*r00*x1856))+(((-1.0)*x1816*x1847))+((r01*x1814*x1817))+((r01*x1814*x1815))+(((0.00373006819843503)*sj3*x1833))+(((0.0327702455985164)*x1811*x1830))+(((-0.0037400112430517)*r01*x1813))+((cj4*x1822*x1826))+(((-0.999462911269554)*x1812*x1830))+(((-1.0)*r00*x1813*x1820))+(((-1.0)*x1816*x1835))+(((-1.0)*sj3*x1815*x1818))+((cj3*x1820*x1822))+(((-1.0)*r00*x1813*x1841)));
evalcond[8]=(((x1842*x1857))+(((-1.0)*r10*x1813*x1820))+(((0.00373006819843503)*sj3*x1840))+((x1846*x1851))+((cj3*x1820*x1844))+(((-1.0)*r10*x1813*x1841))+((x1826*x1840))+((r11*x1814*x1817))+((r11*x1814*x1815))+(((-1.0)*x1827*x1847))+(((-1.0)*sj3*x1815*x1839))+(((-1.0)*x1842*x1854))+(((0.0327702455985164)*x1811*x1845))+(((-1.0)*x1827*x1835))+(((0.999993006133494)*r10*x1814))+(((-1.0)*sj3*x1817*x1839))+((r11*x1855))+(((-0.0037400112430517)*r11*x1813))+(((-1.0)*r10*x1856))+((cj4*x1826*x1844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "480b7a7ed05ac4556ab577b0499c02d6"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
