
classdef IKPointsServiceRequest < ros.Message
    %IKPointsServiceRequest MATLAB implementation of ob1_arm_control/IKPointsServiceRequest
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'ob1_arm_control/IKPointsServiceRequest' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '277fc6b60045d7610e020622b515d0d7' % The MD5 Checksum of the message definition
        PropertyList = { 'Pose' 'Request' 'NumPts' 'Tolerance' 'Distance' } % List of non-constant message properties
        ROSPropertyList = { 'pose' 'request' 'num_pts' 'tolerance' 'distance' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.geometry_msgs.Pose' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Pose
        Request
        NumPts
        Tolerance
        Distance
    end
    methods
        function set.Pose(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Pose'};
            validateattributes(val, validClasses, validAttributes, 'IKPointsServiceRequest', 'Pose')
            obj.Pose = val;
        end
        function set.Request(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'IKPointsServiceRequest', 'Request');
            obj.Request = char(val);
        end
        function set.NumPts(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'IKPointsServiceRequest', 'NumPts');
            obj.NumPts = uint32(val);
        end
        function set.Tolerance(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'IKPointsServiceRequest', 'Tolerance');
            obj.Tolerance = single(val);
        end
        function set.Distance(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'IKPointsServiceRequest', 'Distance');
            obj.Distance = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.ob1_arm_control.IKPointsServiceRequest.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.ob1_arm_control.IKPointsServiceRequest(strObj);
        end
    end
end
