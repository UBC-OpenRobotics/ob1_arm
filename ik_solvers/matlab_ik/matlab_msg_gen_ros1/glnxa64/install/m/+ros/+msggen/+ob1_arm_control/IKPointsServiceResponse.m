
classdef IKPointsServiceResponse < ros.Message
    %IKPointsServiceResponse MATLAB implementation of ob1_arm_control/IKPointsServiceResponse
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'ob1_arm_control/IKPointsServiceResponse' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'd33dd84b62a8467976be018c77f8d97c' % The MD5 Checksum of the message definition
        PropertyList = { 'PoseTargets' 'JointTargets' 'Condition' } % List of non-constant message properties
        ROSPropertyList = { 'pose_targets' 'joint_targets' 'condition' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.geometry_msgs.Pose' ...
            'ros.msggen.ob1_arm_control.JointTarget' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        PoseTargets
        JointTargets
        Condition
    end
    methods
        function set.PoseTargets(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.geometry_msgs.Pose.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.geometry_msgs.Pose'};
            validateattributes(val, validClasses, validAttributes, 'IKPointsServiceResponse', 'PoseTargets')
            obj.PoseTargets = val;
        end
        function set.JointTargets(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.ob1_arm_control.JointTarget.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.ob1_arm_control.JointTarget'};
            validateattributes(val, validClasses, validAttributes, 'IKPointsServiceResponse', 'JointTargets')
            obj.JointTargets = val;
        end
        function set.Condition(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'IKPointsServiceResponse', 'Condition');
            obj.Condition = logical(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.ob1_arm_control.IKPointsServiceResponse.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.ob1_arm_control.IKPointsServiceResponse(strObj);
        end
    end
end
