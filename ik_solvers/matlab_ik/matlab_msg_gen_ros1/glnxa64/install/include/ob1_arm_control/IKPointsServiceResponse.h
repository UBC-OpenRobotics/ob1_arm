// Generated by gencpp from file ob1_arm_control/IKPointsServiceResponse.msg
// DO NOT EDIT!


#ifndef OB1_ARM_CONTROL_MESSAGE_IKPOINTSSERVICERESPONSE_H
#define OB1_ARM_CONTROL_MESSAGE_IKPOINTSSERVICERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <ob1_arm_control/JointTarget.h>

namespace ob1_arm_control
{
template <class ContainerAllocator>
struct IKPointsServiceResponse_
{
  typedef IKPointsServiceResponse_<ContainerAllocator> Type;

  IKPointsServiceResponse_()
    : pose_targets()
    , joint_targets()
    , condition(false)  {
    }
  IKPointsServiceResponse_(const ContainerAllocator& _alloc)
    : pose_targets(_alloc)
    , joint_targets(_alloc)
    , condition(false)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _pose_targets_type;
  _pose_targets_type pose_targets;

   typedef std::vector< ::ob1_arm_control::JointTarget_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ob1_arm_control::JointTarget_<ContainerAllocator> >::other >  _joint_targets_type;
  _joint_targets_type joint_targets;

   typedef uint8_t _condition_type;
  _condition_type condition;





  typedef boost::shared_ptr< ::ob1_arm_control::IKPointsServiceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ob1_arm_control::IKPointsServiceResponse_<ContainerAllocator> const> ConstPtr;

}; // struct IKPointsServiceResponse_

typedef ::ob1_arm_control::IKPointsServiceResponse_<std::allocator<void> > IKPointsServiceResponse;

typedef boost::shared_ptr< ::ob1_arm_control::IKPointsServiceResponse > IKPointsServiceResponsePtr;
typedef boost::shared_ptr< ::ob1_arm_control::IKPointsServiceResponse const> IKPointsServiceResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ob1_arm_control::IKPointsServiceResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ob1_arm_control::IKPointsServiceResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ob1_arm_control::IKPointsServiceResponse_<ContainerAllocator1> & lhs, const ::ob1_arm_control::IKPointsServiceResponse_<ContainerAllocator2> & rhs)
{
  return lhs.pose_targets == rhs.pose_targets &&
    lhs.joint_targets == rhs.joint_targets &&
    lhs.condition == rhs.condition;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ob1_arm_control::IKPointsServiceResponse_<ContainerAllocator1> & lhs, const ::ob1_arm_control::IKPointsServiceResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ob1_arm_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ob1_arm_control::IKPointsServiceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ob1_arm_control::IKPointsServiceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ob1_arm_control::IKPointsServiceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ob1_arm_control::IKPointsServiceResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ob1_arm_control::IKPointsServiceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ob1_arm_control::IKPointsServiceResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ob1_arm_control::IKPointsServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d33dd84b62a8467976be018c77f8d97c";
  }

  static const char* value(const ::ob1_arm_control::IKPointsServiceResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd33dd84b62a84679ULL;
  static const uint64_t static_value2 = 0x76be018c77f8d97cULL;
};

template<class ContainerAllocator>
struct DataType< ::ob1_arm_control::IKPointsServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ob1_arm_control/IKPointsServiceResponse";
  }

  static const char* value(const ::ob1_arm_control::IKPointsServiceResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ob1_arm_control::IKPointsServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose[] pose_targets\n"
"JointTarget[] joint_targets\n"
"bool condition\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: ob1_arm_control/JointTarget\n"
"float64[] joint_target\n"
;
  }

  static const char* value(const ::ob1_arm_control::IKPointsServiceResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ob1_arm_control::IKPointsServiceResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose_targets);
      stream.next(m.joint_targets);
      stream.next(m.condition);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IKPointsServiceResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ob1_arm_control::IKPointsServiceResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ob1_arm_control::IKPointsServiceResponse_<ContainerAllocator>& v)
  {
    s << indent << "pose_targets[]" << std::endl;
    for (size_t i = 0; i < v.pose_targets.size(); ++i)
    {
      s << indent << "  pose_targets[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.pose_targets[i]);
    }
    s << indent << "joint_targets[]" << std::endl;
    for (size_t i = 0; i < v.joint_targets.size(); ++i)
    {
      s << indent << "  joint_targets[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ob1_arm_control::JointTarget_<ContainerAllocator> >::stream(s, indent + "    ", v.joint_targets[i]);
    }
    s << indent << "condition: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.condition);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OB1_ARM_CONTROL_MESSAGE_IKPOINTSSERVICERESPONSE_H
