// Generated by gencpp from file ob1_arm_control/IKPointsServiceRequest.msg
// DO NOT EDIT!


#ifndef OB1_ARM_CONTROL_MESSAGE_IKPOINTSSERVICEREQUEST_H
#define OB1_ARM_CONTROL_MESSAGE_IKPOINTSSERVICEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace ob1_arm_control
{
template <class ContainerAllocator>
struct IKPointsServiceRequest_
{
  typedef IKPointsServiceRequest_<ContainerAllocator> Type;

  IKPointsServiceRequest_()
    : request()
    , pose()
    , num_pts(0)
    , tolerance(0.0)
    , distance(0.0)  {
    }
  IKPointsServiceRequest_(const ContainerAllocator& _alloc)
    : request(_alloc)
    , pose(_alloc)
    , num_pts(0)
    , tolerance(0.0)
    , distance(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _request_type;
  _request_type request;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef uint32_t _num_pts_type;
  _num_pts_type num_pts;

   typedef float _tolerance_type;
  _tolerance_type tolerance;

   typedef float _distance_type;
  _distance_type distance;





  typedef boost::shared_ptr< ::ob1_arm_control::IKPointsServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ob1_arm_control::IKPointsServiceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct IKPointsServiceRequest_

typedef ::ob1_arm_control::IKPointsServiceRequest_<std::allocator<void> > IKPointsServiceRequest;

typedef boost::shared_ptr< ::ob1_arm_control::IKPointsServiceRequest > IKPointsServiceRequestPtr;
typedef boost::shared_ptr< ::ob1_arm_control::IKPointsServiceRequest const> IKPointsServiceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ob1_arm_control::IKPointsServiceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ob1_arm_control::IKPointsServiceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ob1_arm_control::IKPointsServiceRequest_<ContainerAllocator1> & lhs, const ::ob1_arm_control::IKPointsServiceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.request == rhs.request &&
    lhs.pose == rhs.pose &&
    lhs.num_pts == rhs.num_pts &&
    lhs.tolerance == rhs.tolerance &&
    lhs.distance == rhs.distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ob1_arm_control::IKPointsServiceRequest_<ContainerAllocator1> & lhs, const ::ob1_arm_control::IKPointsServiceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ob1_arm_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ob1_arm_control::IKPointsServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ob1_arm_control::IKPointsServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ob1_arm_control::IKPointsServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ob1_arm_control::IKPointsServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ob1_arm_control::IKPointsServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ob1_arm_control::IKPointsServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ob1_arm_control::IKPointsServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "277fc6b60045d7610e020622b515d0d7";
  }

  static const char* value(const ::ob1_arm_control::IKPointsServiceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x277fc6b60045d761ULL;
  static const uint64_t static_value2 = 0x0e020622b515d0d7ULL;
};

template<class ContainerAllocator>
struct DataType< ::ob1_arm_control::IKPointsServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ob1_arm_control/IKPointsServiceRequest";
  }

  static const char* value(const ::ob1_arm_control::IKPointsServiceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ob1_arm_control::IKPointsServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string request\n"
"geometry_msgs/Pose pose\n"
"uint32 num_pts\n"
"float32 tolerance\n"
"float32 distance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::ob1_arm_control::IKPointsServiceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ob1_arm_control::IKPointsServiceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.request);
      stream.next(m.pose);
      stream.next(m.num_pts);
      stream.next(m.tolerance);
      stream.next(m.distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IKPointsServiceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ob1_arm_control::IKPointsServiceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ob1_arm_control::IKPointsServiceRequest_<ContainerAllocator>& v)
  {
    s << indent << "request: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.request);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "num_pts: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num_pts);
    s << indent << "tolerance: ";
    Printer<float>::stream(s, indent + "  ", v.tolerance);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OB1_ARM_CONTROL_MESSAGE_IKPOINTSSERVICEREQUEST_H
