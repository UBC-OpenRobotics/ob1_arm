// Generated by gencpp from file ob1_arm_hw_interface/armCmd.msg
// DO NOT EDIT!


#ifndef OB1_ARM_HW_INTERFACE_MESSAGE_ARMCMD_H
#define OB1_ARM_HW_INTERFACE_MESSAGE_ARMCMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ob1_arm_hw_interface
{
template <class ContainerAllocator>
struct armCmd_
{
  typedef armCmd_<ContainerAllocator> Type;

  armCmd_()
    : vel()
    , angle()
    , msg_send_ctr(0)
    , num_joints(0)  {
      vel.assign(0.0);

      angle.assign(0.0);
  }
  armCmd_(const ContainerAllocator& _alloc)
    : vel()
    , angle()
    , msg_send_ctr(0)
    , num_joints(0)  {
  (void)_alloc;
      vel.assign(0.0);

      angle.assign(0.0);
  }



   typedef boost::array<float, 6>  _vel_type;
  _vel_type vel;

   typedef boost::array<float, 6>  _angle_type;
  _angle_type angle;

   typedef int32_t _msg_send_ctr_type;
  _msg_send_ctr_type msg_send_ctr;

   typedef int32_t _num_joints_type;
  _num_joints_type num_joints;





  typedef boost::shared_ptr< ::ob1_arm_hw_interface::armCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ob1_arm_hw_interface::armCmd_<ContainerAllocator> const> ConstPtr;

}; // struct armCmd_

typedef ::ob1_arm_hw_interface::armCmd_<std::allocator<void> > armCmd;

typedef boost::shared_ptr< ::ob1_arm_hw_interface::armCmd > armCmdPtr;
typedef boost::shared_ptr< ::ob1_arm_hw_interface::armCmd const> armCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ob1_arm_hw_interface::armCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ob1_arm_hw_interface::armCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ob1_arm_hw_interface::armCmd_<ContainerAllocator1> & lhs, const ::ob1_arm_hw_interface::armCmd_<ContainerAllocator2> & rhs)
{
  return lhs.vel == rhs.vel &&
    lhs.angle == rhs.angle &&
    lhs.msg_send_ctr == rhs.msg_send_ctr &&
    lhs.num_joints == rhs.num_joints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ob1_arm_hw_interface::armCmd_<ContainerAllocator1> & lhs, const ::ob1_arm_hw_interface::armCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ob1_arm_hw_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ob1_arm_hw_interface::armCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ob1_arm_hw_interface::armCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ob1_arm_hw_interface::armCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ob1_arm_hw_interface::armCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ob1_arm_hw_interface::armCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ob1_arm_hw_interface::armCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ob1_arm_hw_interface::armCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8b54c869722a6f46d221c71294caa2ad";
  }

  static const char* value(const ::ob1_arm_hw_interface::armCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8b54c869722a6f46ULL;
  static const uint64_t static_value2 = 0xd221c71294caa2adULL;
};

template<class ContainerAllocator>
struct DataType< ::ob1_arm_hw_interface::armCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ob1_arm_hw_interface/armCmd";
  }

  static const char* value(const ::ob1_arm_hw_interface::armCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ob1_arm_hw_interface::armCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[6] vel #deg/s\n"
"float32[6] angle #deg\n"
"int32 msg_send_ctr # count sent msgs to detected missed messages\n"
"int32 num_joints\n"
;
  }

  static const char* value(const ::ob1_arm_hw_interface::armCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ob1_arm_hw_interface::armCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vel);
      stream.next(m.angle);
      stream.next(m.msg_send_ctr);
      stream.next(m.num_joints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct armCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ob1_arm_hw_interface::armCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ob1_arm_hw_interface::armCmd_<ContainerAllocator>& v)
  {
    s << indent << "vel[]" << std::endl;
    for (size_t i = 0; i < v.vel.size(); ++i)
    {
      s << indent << "  vel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vel[i]);
    }
    s << indent << "angle[]" << std::endl;
    for (size_t i = 0; i < v.angle.size(); ++i)
    {
      s << indent << "  angle[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angle[i]);
    }
    s << indent << "msg_send_ctr: ";
    Printer<int32_t>::stream(s, indent + "  ", v.msg_send_ctr);
    s << indent << "num_joints: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_joints);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OB1_ARM_HW_INTERFACE_MESSAGE_ARMCMD_H
